/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ze={},Ie=()=>{},Ce=Object.assign,Oe=Array.isArray,D=e=>typeof e=="function",Se=e=>typeof e=="string",Me=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Me));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Ne(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function xt(e){v.push(e)}function kt(){v.pop()}let W=!1;function Et(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Te();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...Fe(s)),console.warn(...r)}W=!1}function Te(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function Fe(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...$e(n))}),t}function $e({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Ve(e.props),r]:[s+r]}function Ve(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Se(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Ne(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):D(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||ze;if(t){let c=t.parent;const a=t.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const u=c.ec;if(u){for(let h=0;h<u.length;h++)if(u[h](e,a,l)===!1)return}c=c.parent}if(r){A(r,null,10,[e,a,l]);return}}Re(e,n,s,o,i)}function Re(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const I=[];let k=null,C=0;const je=Promise.resolve();let q=null;const De=100;function Le(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function Pe(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Le(t),0,e),e.flags|=1,te()}}function te(){q||(q=je.then(ne))}function We(e){Oe(e)?I.push(...e):k&&e.id===-1?k.splice(C+1,0,e):e.flags&1||(I.push(e),e.flags|=1),te()}function Ae(e){if(I.length){const t=[...new Set(I)].sort((n,o)=>M(n)-M(o));if(I.length=0,k){k.push(...t);return}for(k=t,C=0;C<k.length;C++){const n=k[C];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,C=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=Ie;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,Ae(e),q=null,(b.length||I.length)&&ne(e)}}function zt(e,t){const n=e.get(t)||0;if(n>De){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,T=new Map;function It(e,t){return T.has(e)?!1:(T.set(e,{initialDef:F(t),instances:new Set}),!0)}function F(e){return Ue(e)?e.__vccOpts:e}function Ct(e,t){const n=T.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,F(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=T.get(e);if(!n)return;t=F(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=F(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?Pe(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}We(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function St(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Mt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const qe=/(?:^|[-_])(\w)/g,He=e=>e.replace(qe,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return D(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?He(o):n?"App":"Anonymous"}function Ue(e){return D(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Je}=Object,{fromEntries:Ge}=Object,Be="ENTRIES",ie="KEYS",ce="VALUES",_="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=O(this._path);if(O(n)===_)return{done:!1,value:this.result()};const o=t.get(O(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=O(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>O(t)).filter(t=>t!==_).join("")}value(){return O(this._path).node.get(_)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const O=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const a=r*i;e:for(const l of e.keys())if(l===_){const u=s[a-1];u<=n&&o.set(c,[e.get(l),u])}else{let u=r;for(let h=0;h<l.length;++h,++u){const p=l[h],g=i*u,y=g-i;let f=s[g];const d=Math.max(0,u-n-1),w=Math.min(i-1,u+n);for(let m=d;m<w;++m){const R=p!==t[m],j=s[y+m]+ +R,N=s[y+m+1]+1,E=s[g+m]+1,S=s[g+m+1]=Math.min(j,N,E);S<f&&(f=S)}if(f>n)continue e}le(e.get(l),t,n,o,s,u,i,c+l)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=$(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new z(c,t)}}return new z(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Ye(this._tree,t)}entries(){return new U(this,Be)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(_):void 0}has(t){return J(this._tree,t)?.has(_)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(_,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(_,n(o.get(_))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(_);return s===void 0&&o.set(_,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new z;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return z.from(Object.entries(t))}}const $=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==_&&t.startsWith(o))return n.push([e,o]),$(e.get(o),t.slice(o.length),n);return n.push([e,t]),$(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==_&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==_&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const a=e.get(r);if(c===r.length)e=a;else{const l=new Map;l.set(r.slice(c),a),e.set(t.slice(o,o+c),l),e.delete(r),e=l}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Ye=(e,t)=>{const[n,o]=$(e,t);if(n!==void 0){if(n.delete(_),n.size===0)ue(o);else if(n.size===1){const[s,r]=n.entries().next().value;ae(o,s,r)}}},ue=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ue(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==_&&ae(e.slice(0,-1),o,s)}},ae=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Qe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Xe=/[\n\r\p{Z}\p{P}]+/u,K="or",fe="and",Ze="and_not",et=(e,t)=>{e.includes(t)||e.push(t)},de=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},he=({score:e},{score:t})=>t-e,tt=()=>new Map,V=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},pe=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ge={[K]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),de(o.terms,r)}}return e},[fe]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);de(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[Ze]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},nt=(e,t,n,o,s,r)=>{const{k:i,b:c,d:a}=r;return Math.log(1+(n-t+.5)/(t+.5))*(a+e*(i+1)/(e+i*(1-c+c*o/s)))},ot=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),me=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},st=(e,t,n,o)=>{if(!e._index.has(o)){me(e,n,t,o);return}const s=e._index.fetch(o,tt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?me(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},rt={k:1.2,b:.7,d:.5},it={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Xe),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},_e={combineWith:K,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:rt},ct={combineWith:fe,prefix:(e,t,n)=>t===n.length-1},lt={batchSize:1e3,batchWait:10},ye={minDirtFactor:.1,minDirtCount:20},ut={...lt,...ye},we=Symbol("*"),at=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},be=(e,t=K)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in ge))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(ge[n])},Y=(e,t,n,o,s,r,i,c,a,l=new Map)=>{if(r==null)return l;for(const u of Object.keys(i)){const h=i[u],p=e._fieldIds[u],g=r.get(p);if(g==null)continue;let y=g.size;const f=e._avgFieldLength[p];for(const d of g.keys()){if(!e._documentIds.has(d)){st(e,p,d,n),y-=1;continue}const w=c?c(e._documentIds.get(d),n,e._storedFields.get(d)):1;if(!w)continue;const m=g.get(d),R=e._fieldLength.get(d)[p],j=nt(m,y,e._documentCount,R,f,a),N=o*s*h*w*j,E=l.get(d);if(E){E.score+=N,et(E.terms,t);const S=pe(E.match,n);S?S.push(u):E.match[n]=[u]}else l.set(d,{score:N,terms:[t],match:{[n]:[u]}})}}return l},ft=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((f,d)=>({...f,[d]:pe(o.boost,d)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:a}=o,{fuzzy:l,prefix:u}={..._e.weights,...i},h=e._index.get(t.term),p=Y(e,t.term,t.term,1,t.termBoost,h,s,r,a);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const f=t.fuzzy===!0?.2:t.fuzzy,d=f<1?Math.min(c,Math.round(t.term.length*f)):f;d&&(y=e._index.fuzzyGet(t.term,d))}if(g)for(const[f,d]of g){const w=f.length-t.term.length;if(!w)continue;y?.delete(f);const m=u*f.length/(f.length+.3*w);Y(e,t.term,f,m,t.termBoost,d,s,r,a,p)}if(y)for(const f of y.keys()){const[d,w]=y.get(f);if(!w)continue;const m=l*f.length/(f.length+w);Y(e,t.term,f,m,t.termBoost,d,s,r,a,p)}return p},xe=(e,t,n={})=>{if(t===we)return at(e,n);if(typeof t!="string"){const u={...n,...t,queries:void 0},h=t.queries.map(p=>xe(e,p,u));return be(h,u.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:a}=i,l=c(t).flatMap(u=>a(u)).filter(u=>!!u).map(ot(i)).map(u=>ft(e,u,i));return be(l,i.combineWith)},ke=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=xe(e,t,n),i=[];for(const[c,{score:a,terms:l,match:u}]of r){const h=l.length||1,p={id:e._documentIds.get(c),score:a*h,terms:Object.keys(u),queryTerms:l,match:u};Object.assign(p,e._storedFields.get(c)),(s.filter==null||s.filter(p))&&i.push(p)}return t===we&&s.boostDocument==null||i.sort(he),i},dt=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of ke(e,t,n)){const c=i.join(" "),a=o.get(c);a!=null?(a.score+=r,a.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:a}]of o)s.push({suggestion:r,terms:c,score:i/a});return s.sort(he),s};class ht{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?ut:t.autoVacuum;this._options={...it,...t,autoVacuum:n,searchOptions:{..._e,...t.searchOptions},autoSuggestOptions:{...ct,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=ye,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const pt=e=>new ht(e),gt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=pt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new z,c},mt=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=gt(e,t);i._documentIds=V(o),i._fieldLength=V(s),i._storedFields=V(r);for(const[c,a]of i._documentIds)i._idToShortId.set(a,c);for(const[c,a]of n){const l=new Map;for(const u of Object.keys(a))l.set(parseInt(u,10),V(a[u]));i._index.set(c,l)}return i},{entries:_t}=Object,Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(l,u=!1)=>{let h;i===0?h=l.length>20?`… ${l.slice(-20)}`:l:u?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&s.push(h),i+=h.length,u||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let a=n.indexOf(o,r);if(a===-1)return null;for(;a>=0;){const l=a+o.length;if(c(e.slice(r,a)),r=l,i>100)break;a=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},yt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),wt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ee=(e,t,n={})=>{const o={};return ke(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(s=>{const{id:r,terms:i,score:c}=s,a=r.includes("@"),l=r.includes("#"),[u,h]=r.split(/[#@]/),p=Number(u),g=i.sort((f,d)=>f.length-d.length).filter((f,d)=>i.slice(d+1).every(w=>!w.includes(f))),{contents:y}=o[p]??={title:"",contents:[]};if(a)y.push([{type:"customField",id:p,index:h,display:g.map(f=>s.c.map(d=>Q(d,f))).flat().filter(f=>f!==null)},c]);else{const f=g.map(d=>Q(s.h,d)).filter(d=>d!==null);if(f.length&&y.push([{type:l?"heading":"title",id:p,...l&&{anchor:h},display:f},c]),"t"in s&&s.t)for(const d of s.t){const w=g.map(m=>Q(d,m)).filter(m=>m!==null);w.length&&y.push([{type:"text",id:p,...l&&{anchor:h},display:w},c])}}}),_t(o).sort(([,s],[,r])=>"max"==="total"?yt(s,r):wt(s,r)).map(([s,{title:r,contents:i}])=>{if(!r){const c=Qe(t,s);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},ve=(e,t,n={})=>{const o=dt(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},bt=Ge(Je(JSON.parse("{\"/en/\":{\"documentCount\":4,\"nextId\":4,\"documentIds\":{\"0\":\"3\",\"1\":\"3#tutorial-usage\",\"2\":\"3#project-purpose\",\"3\":\"3#contact-information\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[2,6],\"2\":[2,14],\"3\":[2,4]},\"averageFieldLength\":[1.75,6.25],\"storedFields\":{\"0\":{\"h\":\"About\",\"t\":[\"Passwordgloo\"]},\"1\":{\"h\":\"Tutorial Usage\",\"t\":[\"Access lanzou cloud, password is 666\"]},\"2\":{\"h\":\"Project purpose\",\"t\":[\"File personal learning experiences\",\"Leave a trace of your own learning\",\"Inspire others' intellectual sparks\"]},\"3\":{\"h\":\"Contact information\",\"t\":[\"Github\",\"Gmail\",\"163 Mail\"]}},\"dirtCount\":0,\"index\":[[\"mail\",{\"1\":{\"3\":1}}],[\"163\",{\"1\":{\"3\":1}}],[\"gmail\",{\"1\":{\"3\":1}}],[\"github\",{\"1\":{\"3\":1}}],[\"contact\",{\"0\":{\"3\":1}}],[\"cloud\",{\"1\":{\"1\":1}}],[\"sparks\",{\"1\":{\"2\":1}}],[\"information\",{\"0\":{\"3\":1}}],[\"intellectual\",{\"1\":{\"2\":1}}],[\"inspire\",{\"1\":{\"2\":1}}],[\"is\",{\"1\":{\"1\":1}}],[\"others\",{\"1\":{\"2\":1}}],[\"own\",{\"1\":{\"2\":1}}],[\"of\",{\"1\":{\"2\":1}}],[\"your\",{\"1\":{\"2\":1}}],[\"trace\",{\"1\":{\"2\":1}}],[\"tutorial\",{\"0\":{\"1\":1}}],[\"experiences\",{\"1\":{\"2\":1}}],[\"leave\",{\"1\":{\"2\":1}}],[\"learning\",{\"1\":{\"2\":2}}],[\"lanzou\",{\"1\":{\"1\":1}}],[\"file\",{\"1\":{\"2\":1}}],[\"personal\",{\"1\":{\"2\":1}}],[\"purpose\",{\"0\":{\"2\":1}}],[\"project\",{\"0\":{\"2\":1}}],[\"password\",{\"1\":{\"1\":1}}],[\"passwordgloo\",{\"1\":{\"0\":1}}],[\"666\",{\"1\":{\"1\":1}}],[\"a\",{\"1\":{\"2\":1}}],[\"access\",{\"1\":{\"1\":1}}],[\"about\",{\"0\":{\"0\":1}}],[\"usage\",{\"0\":{\"1\":1}}]],\"version\":2},\"/\":{\"documentCount\":210,\"nextId\":210,\"documentIds\":{\"0\":\"0\",\"1\":\"0#联系信息\",\"2\":\"1\",\"3\":\"1#项目用途\",\"4\":\"1#联系信息\",\"5\":\"4\",\"6\":\"4#线程池种类\",\"7\":\"4#创建固定线程数的线程池\",\"8\":\"4#单线程化的线程池\",\"9\":\"4#可缓存线程池\",\"10\":\"4#定时线程池\",\"11\":\"4#核心线程数的确定\",\"12\":\"4#阻塞队列\",\"13\":\"4#arrayblockingqueue\",\"14\":\"4#linkedblockingqueue\",\"15\":\"4#synchronousqueue\",\"16\":\"4#delayedworkqueue\",\"17\":\"4#拒绝策略\",\"18\":\"4#java-线程池怎么实现线程自动回收\",\"19\":\"4#threadlocalmap的引用类型\",\"20\":\"4#为什么-threadlocalmap-的键-key-是弱引用-weak-reference\",\"21\":\"4#为什么-threadlocalmap的值-value-是强引用\",\"22\":\"4#inheritablethreadlocal原理\",\"23\":\"4#threadlocal改进的框架或者工具\",\"24\":\"4#死锁\",\"25\":\"5\",\"26\":\"5#类加载过程\",\"27\":\"5#加载-loading\",\"28\":\"5#连接-验证、准备、解析\",\"29\":\"5#初始化、使用、卸载\",\"30\":\"5#垃圾收集器\",\"31\":\"5#静态代理、动态代理\",\"32\":\"5#双亲委派\",\"33\":\"5#为什么使用双亲委派\",\"34\":\"6\",\"35\":\"6#javascript是什么\",\"36\":\"6#javascript作用\",\"37\":\"6#javascript的组成\",\"38\":\"6#javascript书写位置\",\"39\":\"6#javascript注释\",\"40\":\"6#单行注释\",\"41\":\"6#块注释\",\"42\":\"6#javascript结束符\",\"43\":\"6#输入和输出语法\",\"44\":\"6#输出语法\",\"45\":\"6#输入语法\",\"46\":\"7\",\"47\":\"7#spring-boot-与-spring-mvc-的区别\",\"48\":\"7#spring-boot\",\"49\":\"7#spring-mvc\",\"50\":\"7#spring-cloud\",\"51\":\"7#spring-boot-与-spring-mvc-的关系\",\"52\":\"7#controller-与-restcontroller-的区别\",\"53\":\"7#restcontroller\",\"54\":\"7#controller\",\"55\":\"7#responsebody\",\"56\":\"7#spring-boot-自动配置类\",\"57\":\"7#工作流程总结\",\"58\":\"7#spring-注解概览\",\"59\":\"7#component-与-bean\",\"60\":\"7#autowired-与-resource\",\"61\":\"7#bean-的生命周期\",\"62\":\"7#bean-的线程安全性\",\"63\":\"7#有状态-bean\",\"64\":\"7#无状态-bean\",\"65\":\"7#spring-mvc-工作原理\",\"66\":\"7#统一异常处理\",\"67\":\"7#controlleradvice\",\"68\":\"7#exceptionhandler\",\"69\":\"7#示例\",\"70\":\"7#循环依赖及其解决方案\",\"71\":\"7#使用-lazy注解\",\"72\":\"7#三级缓存机制\",\"73\":\"7#处理循环依赖\",\"74\":\"7#spring-bean-作用域\",\"75\":\"7#singleton\",\"76\":\"7#prototype\",\"77\":\"7#request\",\"78\":\"7#session\",\"79\":\"7#异常处理类\",\"80\":\"7#controlleradvice-1\",\"81\":\"7#exceptionhandler-1\",\"82\":\"7#jpa注解\",\"83\":\"7#entity\",\"84\":\"7#id\",\"85\":\"7#generatedvalue\",\"86\":\"7#transient\",\"87\":\"7#事务管理\",\"88\":\"7#transactional\",\"89\":\"7#spring事务传播行为\",\"90\":\"7#dao接口工作原理\",\"91\":\"8\",\"92\":\"8#数据类型分类\",\"93\":\"8#基本数据类型\",\"94\":\"8#number\",\"95\":\"8#string\",\"96\":\"8#字符串含义\",\"97\":\"8#字符串拼接\",\"98\":\"8#模板字符串\",\"99\":\"8#boolean\",\"100\":\"8#undefined\",\"101\":\"8#null\",\"102\":\"8#引用数据类型\",\"103\":\"8#object\",\"104\":\"8#function\",\"105\":\"8#array\",\"106\":\"8#检测数据类型\",\"107\":\"8#数据类型转换\",\"108\":\"8#隐式转换\",\"109\":\"8#显式转换\",\"110\":\"9\",\"111\":\"9#并发数据库操作中的读取问题\",\"112\":\"9#脏读-dirty-read\",\"113\":\"9#不可重复读-non-repeatable-read\",\"114\":\"9#幻读-phantom-read\",\"115\":\"9#隔离级别\",\"116\":\"9#聚簇索引\",\"117\":\"9#非聚簇索引-二级索引\",\"118\":\"9#索引覆盖-减少回表次数\",\"119\":\"9#myisam-与-innodb-存储引擎的区别\",\"120\":\"9#事务支持\",\"121\":\"9#锁定级别\",\"122\":\"9#外键支持\",\"123\":\"9#acid-支持\",\"124\":\"9#性能\",\"125\":\"9#索引失效\",\"126\":\"10\",\"127\":\"10#引用拷贝、深拷贝、浅拷贝\",\"128\":\"10#引用拷贝\",\"129\":\"10#深拷贝\",\"130\":\"10#浅拷贝\",\"131\":\"10#string、stringbuilder、stringbuffer\",\"132\":\"10#可变性\",\"133\":\"10#安全性\",\"134\":\"10#性能方面\",\"135\":\"10#自动拆装箱\",\"136\":\"10#装箱\",\"137\":\"10#拆箱\",\"138\":\"10#重载、重写\",\"139\":\"10#重载\",\"140\":\"10#重写\",\"141\":\"10#char、varchar\",\"142\":\"10#可变性-1\",\"143\":\"10#性能方面-1\",\"144\":\"10#使用\",\"145\":\"10#和-equals-的区别\",\"146\":\"10#equals\",\"147\":\"10#string-intern\",\"148\":\"10#static-关键字\",\"149\":\"10#静态导包\",\"150\":\"10#内部类\",\"151\":\"10#java-异常类型及原理\",\"152\":\"10#字节流与字符流的区别\",\"153\":\"10#java-访问权限\",\"154\":\"10#接口知识\",\"155\":\"10#jdk-8-新特性\",\"156\":\"10#匿名内部类\",\"157\":\"11\",\"158\":\"11#三大消息队列区别\",\"159\":\"11#mq-消息丢失问题及解决方案\",\"160\":\"11#信息到-mq\",\"161\":\"11#信息路由到队列\",\"162\":\"11#消息在队列正确存储\",\"163\":\"11#队列投递到消费者\",\"164\":\"12\",\"165\":\"12#算术运算符\",\"166\":\"12#赋值运算符\",\"167\":\"12#一元运算符\",\"168\":\"12#比较运算符\",\"169\":\"12#逻辑运算符\",\"170\":\"12#逻辑运算符短路\",\"171\":\"12#逻辑运算符中断\",\"172\":\"12#运算符优先级\",\"173\":\"14\",\"174\":\"14#redis有几种集群模式-高可用\",\"175\":\"14#分布式cap原理\",\"176\":\"14#redis存储结构\",\"177\":\"14#redis快的原因\",\"178\":\"14#bio、nio-和-i-o-多路复用的区别\",\"179\":\"14#bio-blocking-i-o\",\"180\":\"14#nio-non-blocking-i-o\",\"181\":\"14#i-o-多路复用\",\"182\":\"14#redis持久机制\",\"183\":\"14#redis过期策略\",\"184\":\"14#redis淘汰策略\",\"185\":\"15\",\"186\":\"15#表达式和语句\",\"187\":\"15#流程控制语句\",\"188\":\"15#顺序\",\"189\":\"15#分支\",\"190\":\"15#if分支语句\",\"191\":\"15#三元运算符\",\"192\":\"15#switch语句\",\"193\":\"15#循环\",\"194\":\"15#while\",\"195\":\"15#for\",\"196\":\"15#循环结束\",\"197\":\"16\",\"198\":\"16#电脑用户变量和系统变量那个优先级高\",\"199\":\"16#node跟npm指令有啥区别\",\"200\":\"17\",\"201\":\"17#声明变量\",\"202\":\"17#变量赋值\",\"203\":\"17#更新变量\",\"204\":\"17#变量初始化\",\"205\":\"17#变量命名规则与规范\",\"206\":\"17#命名规则\",\"207\":\"17#命名规范\",\"208\":\"17#声明变量规范\",\"209\":\"18\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[1,2],\"2\":[1,1],\"3\":[1,3],\"4\":[1,3],\"5\":[1],\"6\":[1],\"7\":[1,22],\"8\":[1,21],\"9\":[1,24],\"10\":[1,32],\"11\":[1,12],\"12\":[1],\"13\":[1,12],\"14\":[1,16],\"15\":[1,10],\"16\":[1,36],\"17\":[1,11],\"18\":[3,14],\"19\":[1,9],\"20\":[8,38],\"21\":[5,38],\"22\":[1,37],\"23\":[1,21],\"24\":[1,15],\"25\":[1],\"26\":[1],\"27\":[3,2],\"28\":[5,21],\"29\":[3,4],\"30\":[1,49],\"31\":[2,17],\"32\":[1,6],\"33\":[1,12],\"34\":[1,2],\"35\":[1,1],\"36\":[1,3],\"37\":[1,5],\"38\":[1],\"39\":[1],\"40\":[1,5],\"41\":[1,6],\"42\":[1,3],\"43\":[1],\"44\":[1,9],\"45\":[1,3],\"46\":[1],\"47\":[5,8],\"48\":[2,24],\"49\":[2,23],\"50\":[2,17],\"51\":[5,16],\"52\":[4,12],\"53\":[1,20],\"54\":[1,15],\"55\":[2,12],\"56\":[3,39],\"57\":[1,17],\"58\":[2,11],\"59\":[4,13],\"60\":[4,20],\"61\":[3,52],\"62\":[2,7],\"63\":[2,8],\"64\":[2,9],\"65\":[3,51],\"66\":[1,12],\"67\":[2,12],\"68\":[2,10],\"69\":[1,26],\"70\":[1,13],\"71\":[2,7],\"72\":[1,20],\"73\":[1,15],\"74\":[3,10],\"75\":[1,17],\"76\":[1,13],\"77\":[1,14],\"78\":[1,15],\"79\":[1,5],\"80\":[2,5],\"81\":[2,4],\"82\":[1,7],\"83\":[2,4],\"84\":[2,6],\"85\":[2,10],\"86\":[2,4],\"87\":[1],\"88\":[2,10],\"89\":[1,27],\"90\":[1,5],\"91\":[1],\"92\":[1],\"93\":[1],\"94\":[1,6],\"95\":[1],\"96\":[1,4],\"97\":[1,12],\"98\":[1,11],\"99\":[1,5],\"100\":[1,2],\"101\":[1,2],\"102\":[1],\"103\":[1],\"104\":[1],\"105\":[1],\"106\":[1,8],\"107\":[1],\"108\":[1,14],\"109\":[1],\"110\":[2],\"111\":[1,5],\"112\":[4,7],\"113\":[5,9],\"114\":[4,9],\"115\":[1,21],\"116\":[1,7],\"117\":[3,3],\"118\":[3,3],\"119\":[4,13],\"120\":[1,5],\"121\":[1,8],\"122\":[1,6],\"123\":[2,10],\"124\":[1,13],\"125\":[1,43],\"126\":[1],\"127\":[3],\"128\":[1,3],\"129\":[1,3],\"130\":[1,4],\"131\":[3],\"132\":[1,15],\"133\":[1,9],\"134\":[1,5],\"135\":[1],\"136\":[1,2],\"137\":[1,2],\"138\":[2],\"139\":[1,3],\"140\":[1,5],\"141\":[2],\"142\":[1,6],\"143\":[1,6],\"144\":[1,7],\"145\":[4,7],\"146\":[1,3],\"147\":[3,8],\"148\":[2,5],\"149\":[1,3],\"150\":[1,3],\"151\":[2,15],\"152\":[1,19],\"153\":[2,10],\"154\":[1],\"155\":[3,12],\"156\":[1,2],\"157\":[1],\"158\":[1,21],\"159\":[2,6],\"160\":[2,23],\"161\":[1,17],\"162\":[1,20],\"163\":[1,24],\"164\":[1],\"165\":[1,9],\"166\":[1,6],\"167\":[1,10],\"168\":[1,12],\"169\":[1,14],\"170\":[1,9],\"171\":[1,10],\"172\":[1,31],\"173\":[1],\"174\":[2,28],\"175\":[1,11],\"176\":[1,6],\"177\":[1,16],\"178\":[6,13],\"179\":[5,16],\"180\":[6,24],\"181\":[3,21],\"182\":[1,26],\"183\":[1,9],\"184\":[1,32],\"185\":[1],\"186\":[1,10],\"187\":[1],\"188\":[1,1],\"189\":[1],\"190\":[1],\"191\":[1,4],\"192\":[1,13],\"193\":[1,3],\"194\":[1,5],\"195\":[1,6],\"196\":[1,5],\"197\":[1],\"198\":[2,6],\"199\":[2,14],\"200\":[1,12],\"201\":[1,7],\"202\":[1,9],\"203\":[1,12],\"204\":[1,11],\"205\":[1,7],\"206\":[1,8],\"207\":[1,3],\"208\":[1,6],\"209\":[1,3]},\"averageFieldLength\":[1.5761904761904764,12.240018466155048],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"chengp\"]},\"1\":{\"h\":\"联系信息\",\"t\":[\"qqmail - 163邮箱\"]},\"2\":{\"h\":\"关于\",\"t\":[\"Passwordgloo\"]},\"3\":{\"h\":\"项目用途\",\"t\":[\"归档个人学习经验\",\"留下自己学习印迹\",\"启迪他人思想火花\"]},\"4\":{\"h\":\"联系信息\",\"t\":[\"Github\",\"qqmail\",\"163邮箱\"]},\"5\":{\"h\":\"多线程\"},\"6\":{\"h\":\"线程池种类\"},\"7\":{\"h\":\"创建固定线程数的线程池\",\"t\":[\"public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>()); } \",\"核心线程数与最大线程数一样：没有救急线程。\",\"阻塞队列是 LinkedBlockingQueue：最大容量为 Integer.MAX_VALUE。\"]},\"8\":{\"h\":\"单线程化的线程池\",\"t\":[\"public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService( new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())); } \",\"核心线程数和最大线程数都是 1。\",\"阻塞队列是 LinkedBlockingQueue，最大容量为 Integer.MAX_VALUE。\"]},\"9\":{\"h\":\"可缓存线程池\",\"t\":[\"public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()); } \",\"核心线程数为 0：线程池不会保留核心线程。\",\"最大线程数是 Integer.MAX_VALUE：理论上可以创建无限多的线程。\",\"阻塞队列为 SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。\"]},\"10\":{\"h\":\"定时线程池\",\"t\":[\"核心线程自己定，最大线程MAX\",\"不建议用 Executors 创建线程池\",\"FixedThreadPool 和 SingleThreadPool：\",\"允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\",\"CachedThreadPool：\",\"允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\",\"推荐的做法\",\"使用ThreadPoolExecutor直接创建线程池，明确线程池的各项参数，避免资源耗尽的风险\",\"CountDownLatch\",\"CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。\",\"CountDownLatch latch = new CountDownLatch(count);\",\"latch.countDown();\",\"latch.await();\"]},\"11\":{\"h\":\"核心线程数的确定\",\"t\":[\"IO密集型任务\",\"一般来说：文件读写、DB读写、网络请求等\",\"核心线程数大小设置为 2N+1\",\"CPU密集型任务\",\"一般来说：计算型代码、Bitmap转换、Gson转换等\",\"核心线程数大小设置为 N+1\"]},\"12\":{\"h\":\"阻塞队列\"},\"13\":{\"h\":\"ArrayBlockingQueue\",\"t\":[\"适用场景：适用于固定数量任务的排队处理，例如，当需要限制线程池中任务的数量时使用，防止生产速度大于消费速度。\",\"线程安全：使用 ReentrantLock在操作前后加锁来保证线程安全。\",\"公平性：初始化时，可以指定使用公平锁或者非公平锁。\"]},\"14\":{\"h\":\"LinkedBlockingQueue\",\"t\":[\"适用场景：适用于任务量较大的场景，例如一个大型电商平台的订单处理系统，每天会接收到大量的订单请求，这些请求需要被逐一处理和记录。\",\"线程安全：分别使用了读写两把锁，比 ArrayBlockingQueue性能更好。\",\"公平性：只支持非公平锁。\",\"使用示例：FixedThreadPool 和 SingleThreadExecutor。\"]},\"15\":{\"h\":\"SynchronousQueue\",\"t\":[\"特点：不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作。\",\"适用场景：适用于任务直接提交给线程而不进行排队的场景，可以指定使用公平策略还是非公平策略。\",\"优势：适用于生产者与消费者速度相匹配的场景，可减少任务执行的等待时间。\"]},\"16\":{\"h\":\"DelayedWorkQueue\",\"t\":[\"特点：ScheduledThreadPoolExecutor 常见的例子，例如使用一个 DelayedWorkQueue 来管理一个超时未响应的连接队列。\",\"线程安全：内部使用 ReentrantLock 加锁。\",\"::: wrong LinkedBlockingQueue 和 ArrayBlockingQueue 的区别 容量：\",\"LinkedBlockingQueue 默认无界，支持有界。\",\"ArrayBlockingQueue 强制有界。\",\"底层数据结构：\",\"LinkedBlockingQueue 底层是链表。\",\"ArrayBlockingQueue 底层是数组。\",\"内存管理：\",\"LinkedBlockingQueue 是懒惰的，创建节点的时候添加数据。\",\"ArrayBlockingQueue 需要提前初始化 Node 数组。\",\"入队操作：\",\"LinkedBlockingQueue 入队会生成新 Node。\",\"ArrayBlockingQueue Node 需要是提前创建好的。\",\"锁机制：\",\"LinkedBlockingQueue 使用两把锁（头尾）。\",\"ArrayBlockingQueue 使用一把锁。 :::\"]},\"17\":{\"h\":\"拒绝策略\",\"t\":[\"AbortPolicy：\",\"直接抛出异常，默认策略。\",\"CallerRunsPolicy：\",\"用调用者所在的线程来执行任务。\",\"DiscardOldestPolicy：\",\"丢弃阻塞队列中最靠前的任务，并执行当前任务。\",\"DiscardPolicy：\",\"直接丢弃任务。\"]},\"18\":{\"h\":\"Java 线程池怎么实现线程自动回收？\",\"t\":[\"线程池通过 worker 线程循环获取任务。\",\"超时判断在 getTask() 中完成，超时后触发线程回收。\",\"回收流程由 processWorkerExit() 方法完成，包括任务统计、移除线程和判断是否补充线程。\",\"线程回收和补充机制确保线程池的动态调整和资源优化。\"]},\"19\":{\"h\":\"ThreadLocalMap的引用类型\",\"t\":[\"answer\",\"ThreadLocalMap 的 key 是弱引用，而 value 是强引用。\"]},\"20\":{\"h\":\"为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？\",\"t\":[\"弱引用意味着，如果没有其他引用对象的强引用关系，那么这个仅被弱引用的对象在下次垃圾回收（GC）时就会被回收掉，这样在一定程度上降低了内存泄漏的风险。但同时也引入了新的问题，即键虽然被回收了，但是值对象还在，我们无法获取，也无法删除，这样也会存在内存泄漏的风险。虽然 ThreadLocalMap 中在进行 set 和 get 操作时会进行启发式清理和探测式清理，清理一部分键为 null 的 Entry 对象，但是这只是一种后备选择，最重要的还是开发人员在编写代码时记得在使用完数据后及时调用 remove() 方法手动清理。\",\"内存泄漏\",\"有些对象已经不再使用了，但是由于没有正确处理对象的引用关系，使得这个无用的对象还一直被 GC Root 直接或间接引用着，垃圾回收时就无法清理掉这些对象，如果这类对象存在很多，就会导致内存泄漏。\"]},\"21\":{\"h\":\"为什么 ThreadLocalMap的值（Value）是强引用？\",\"t\":[\"如果值是弱引用，那么在没有其他强引用指向这个值的情况下，值可能会在任何时候被垃圾回收器回收。这将导致 ThreadLocal 无法正确地存储和检索数据，因为它们可能会在不被期望的情况下突然消失。\",\"强引用保证数据完整性：使用强引用作为 ThreadLocalMap的值确保了只要ThreadLocal对象存在，其关联的数据值也会一直存在，直到显式地通过remove()方法或线程结束时清理。这样可以保证数据的完整性和一致性，避免因垃圾回收导致的潜在错误。\",\"::: threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了\",\"两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。\",\":::\",\"Java中的引用类型\",\"强引用（Strong Reference）：\",\"只要引用还存在就不会被回收。\",\"软引用（Soft Reference）：\",\"JVM内存不足时，才会回收软引用指向的对象。\",\"弱引用（Weak Reference）：\",\"被垃圾回收线程发现就会被回收。\",\"虚引用（Phantom Reference）：\",\"必须和引用队列一起使用，主要是跟踪垃圾回收。。\"]},\"22\":{\"h\":\"InheritableThreadLocal原理\",\"t\":[\"InheritableThreadLocal在子线程创建时从父线程拷贝值。具体来说，这个拷贝过程发生在 Java 线程创建时的初始化阶段。\",\"当一个线程（父线程）创建一个新的线程（子线程）时，JVM 会检查父线程中的 InheritableThreadLocal变量，并将这些变量的值复制到子线程中。这样，子线程就可以访问到父线程中 InheritableThreadLocal 变量的值。\",\"线程池中的线程在完成任务后不会立即销毁，而是会被放回池中重用。这意味着如果使用 InheritableThreadLocal存储上下文信息，那么这些信息可能会被重用的线程意外地继承，导致数据错乱。\",\"在使用InheritableThreadLocal 时，需要特别注意线程池的使用场景，确保不会因线程重用而导致数据不一致的问题。通常建议在任务执行完毕后清除InheritableThreadLocal的值，以避免潜在的数据泄露风险。\",\"::: wrong threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了\",\"两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。 :::\"]},\"23\":{\"h\":\"ThreadLocal改进的框架或者工具\",\"t\":[\"数据扩容机制\",\"FastThreadLocal： 扩容时将原数据拷贝到新数组。 扩容过程简单高效。 ThreadLocal： 使用哈希表存储数据。 扩容后需要重新哈希（rehash），效率较低。\",\"安全性 ThreadLocal： 使用不当可能导致内存泄漏。 在线程池场景下，只能通过主动检测来防止内存泄漏，增加了开销。 FastThreadLocal： 提供了 remove() 方法，允许主动清除对象。 在任务执行完成后会自动触发清除机制，减少了内存泄漏的风险。\"]},\"24\":{\"h\":\"死锁\",\"t\":[\"死锁是在并发条件下，两个线程互相等待对方资源而进入无尽等待中\",\"死锁发生的必要条件是1资源互斥2循环等待3抢占且等待4不可抢占\",\"因此为了避免死锁，我们可以破坏其中任一条件\",\"如何避免\",\"1：通过算法有序获取锁\",\"2：发生死锁时，让一个线程强制获取资源\",\"3：通过trylock,为不同线程设置不同的资源申请时间。\"]},\"25\":{\"h\":\"虚拟机\"},\"26\":{\"h\":\"类加载过程\"},\"27\":{\"h\":\"加载（Loading）\",\"t\":[\"将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。\"]},\"28\":{\"h\":\"连接（验证、准备、解析）\",\"t\":[\"验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求\",\"准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。\",\"解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。\"]},\"29\":{\"h\":\"初始化、使用、卸载\",\"t\":[\"初始化阶段简单来说就是执行类的构造器方法，不是开发者写的，而是编译器自动生成的。\"]},\"30\":{\"h\":\"垃圾收集器\",\"t\":[\"垃圾收集器\",\"类型\",\"作用域\",\"使用算法\",\"特点\",\"适用场景\",\"Serial\",\"串行回收\",\"新生代\",\"复制算法\",\"响应速度优先\",\"适用于单核 CPU 环境下的 Client 模式\",\"Serial Old\",\"串行回收\",\"老年代\",\"标记-压缩算法\",\"响应速度优先\",\"适用于单核 CPU 环境下的 Client 模式\",\"ParNew\",\"并行回收\",\"新生代\",\"复制算法\",\"响应速度优先\",\"多核 CPU 环境中 Server 模式下与 CMS 配合使用\",\"Parallel Scavenge\",\"并行回收\",\"新生代\",\"复制算法\",\"吞吐量优先\",\"适用于后台运算，而交互少的场景\",\"Parallel Old\",\"并行回收\",\"老年代\",\"标记-压缩算法\",\"吞吐量优先\",\"适用于后台运算，而交互少的场景\",\"CMS(Concurrent Mark-Sweep)\",\"并发回收\",\"老年代\",\"标记-清除算法\",\"响应速度优先\",\"适用于 B/S 业务，也就是交互多的场景\",\"G1(Garbage-First)\",\"并发, 并行回收\",\"新生代 & 老年代(整堆收集器)\",\"复制算法 & 标记-压缩算法\",\"响应速度优先\",\"面向服务端的应用\"]},\"31\":{\"h\":\"静态代理、动态代理\",\"t\":[\"类编译时产生，静态\",\"类运行时产生，动态\",\"静态代理：代理类与被代理类实现相同接口，相同方法，代理类需要有被代理类的成员变量，这样就可以在被代理对象时候做增强。\",\"动态代理，允许我们运行时生成代理对象，实现方案时GDK给我们提供的proxy类，CG lab提供的api,被代理有接口实现就实现响应接口，没有就继承，\"]},\"32\":{\"h\":\"双亲委派\",\"t\":[\"当我们进行类加载时，我们会先从appclassloader缓存查找，\",\"若没有会向extclassloader、bootstrapclassloader的缓存查找，\",\"如果还没有，他将向下在加载器对应路径查找\"]},\"33\":{\"h\":\"为什么使用双亲委派\",\"t\":[\"避免类的重复加载：确保一个类只被加载一次。\",\"保证 Java 核心 API 的安全性：防止核心 API 被随意篡改。\",\"提供类加载的层次结构：允许用户自定义类加载器以满足特定需求。\"]},\"34\":{\"h\":\"Js介绍\",\"t\":[\"注意区分\",\"Javascript和Java没有一点关系\"]},\"35\":{\"h\":\"Javascript是什么\",\"t\":[\"Javascript是一门运行在客户端的编程语言\"]},\"36\":{\"h\":\"Javascript作用\",\"t\":[\"网页特效\",\"表单验证\",\"数据交互\"]},\"37\":{\"h\":\"Javascript的组成\",\"t\":[\"ECMAScript，规定了js基础语法核心知识\",\"Web APIs，包括DOM和BOM\"]},\"38\":{\"h\":\"Javascript书写位置\"},\"39\":{\"h\":\"Javascript注释\"},\"40\":{\"h\":\"单行注释\",\"t\":[\"符号：//\",\"快捷键 ：Ctrl + /\"]},\"41\":{\"h\":\"块注释\",\"t\":[\"符号：/* */\",\"快捷键 ：Shift + Alt + A\"]},\"42\":{\"h\":\"Javascript结束符\",\"t\":[\"英文分号代表语句结束\",\"换行符回车会被识别为结束符，所以结束符可写可不写\"]},\"43\":{\"h\":\"输入和输出语法\"},\"44\":{\"h\":\"输出语法\",\"t\":[\"document.write('输出内容'); alert('警告内容'); console.log('控制台输出内容') \"]},\"45\":{\"h\":\"输入语法\",\"t\":[\"prompt('请输入你的姓名：') \"]},\"46\":{\"h\":\"springboot\"},\"47\":{\"h\":\"Spring Boot 与 Spring MVC 的区别\",\"t\":[\"Spring Boot 和 Spring MVC 都是 Spring 家族中的重要成员，但它们的定位和用途有所不同。\"]},\"48\":{\"h\":\"Spring Boot\",\"t\":[\"定义：Spring Boot 是基于 Spring 框架的快速开发框架。\",\"特点： \",\"提供了快速开发的便利性。\",\"简化了 Spring 应用的初始搭建和开发过程。\",\"内嵌了 Tomcat、Jetty 等服务器，无需部署 WAR 文件。\",\"提供了生产就绪的特性，如健康检查、外部化配置等。\",\"用途：适用于构建独立的、生产级别的 Spring 应用。\"]},\"49\":{\"h\":\"Spring MVC\",\"t\":[\"定义：Spring MVC 是 Spring 框架中的一个模块，专注于构建 Web 应用。\",\"特点： \",\"提供了模型-视图-控制器（MVC）架构的支持。\",\"支持 RESTful Web 服务。\",\"可以与 Spring 框架的其他模块无缝集成。\",\"用途：适用于构建 Web 应用，特别是需要与 Spring 框架集成的应用。\"]},\"50\":{\"h\":\"Spring Cloud\",\"t\":[\"定义：Spring Cloud 是一个完整的微服务框架。\",\"特点： \",\"提供了微服务架构下的各种解决方案，如服务发现、配置管理、断路器、智能路由等。\",\"依赖于 Spring Boot，利用 Spring Boot 的特性简化了微服务的开发。\",\"用途：适用于构建和管理微服务架构。\"]},\"51\":{\"h\":\"Spring Boot 与 Spring MVC 的关系\",\"t\":[\"Spring Boot 提供了集成 Spring MVC 的能力。当开发 Web 应用时，Spring Boot 默认使用 Spring MVC 作为 Web 层的框架。这意味着在 Spring Boot 应用中开发 Web 功能，本质上就是在使用 Spring MVC。\"]},\"52\":{\"h\":\"Controller 与 RestController 的区别\",\"t\":[\"在 Spring MVC 框架中，Controller 和 RestController 都用于处理 HTTP 请求，但它们在返回类型和用途上有所不同。\"]},\"53\":{\"h\":\"RestController\",\"t\":[\"特点\",\"@RestController 是@Controller 和@ResponseBody的组合注解。\",\"主要用于构建 RESTful Web 服务。\",\"返回类型\",\"默认返回 JSON 或 XML 格式的数据。\",\"适用于需要直接返回数据而不是视图的 API 接口。\"]},\"54\":{\"h\":\"Controller\",\"t\":[\"特点\",\"@Controller用于定义一个控制器，处理 HTTP 请求并返回响应。\",\"可以返回ModelAndView，即模型数据和视图的组合。\",\"返回类型\",\"可以返回视图（View），通常用于 Web 应用。\",\"需要通过视图解析器将模型数据渲染到页面上。\"]},\"55\":{\"h\":\"@ResponseBody\",\"t\":[\"作用\",\"-@ResponseBody注解用于将返回对象直接转换为 JSON 或 XML 格式，并写入 HTTP 响应体中。\",\"不经过视图解析器处理，直接返回数据。\"]},\"56\":{\"h\":\"Spring Boot 自动配置类\",\"t\":[\"Spring Boot 的自动配置机制是其核心特性之一，它简化了 Spring 应用的配置过程。以下是 Spring Boot 自动配置类的工作原理：\",\"引入@EnableConfigurationProperties\",\"通过@SpringBootConfiguration注解引入@EnableConfigurationProperties注解，它负责自动配置。\",\"引入@Import\",\"通过@EnableConfigurationProperties注解引入@Import注解。容器启动时，加载 IOC 容器会解析@Import注解。\",\"Deferred Import Selector\",\"@Import注解导入了一个 DeferredImportSelector，其目的是使自动配置类最后执行。\",\"读取META-INF/spring.factories\",\"Spring Boot 读取META-INF目录下的spring.factories文件，该文件中列出了所有自动配置类。\",\"使用@Conditional 注解\",\"最后，通过@Conditional注解排除无效配置类，确保只有符合条件的配置类被加载。\"]},\"57\":{\"h\":\"工作流程总结\",\"t\":[\"启动应用：Spring Boot 应用启动。\",\"加载配置：读取 spring.factories 文件中的自动配置类。\",\"条件判断：使用 @Conditional 注解进行条件判断。\",\"执行配置：符合条件的配置类被执行，完成自动配置。\"]},\"58\":{\"h\":\"Spring 注解概览\",\"t\":[\"在 Spring 框架中，注解（Annotations）是实现依赖注入（Dependency Injection）和配置类的重要手段。以下是一些常用的注解及其说明：\"]},\"59\":{\"h\":\"@Component 与 @Bean\",\"t\":[\"@Component\",\"注解作用于类。\",\"标识该类为一个 Spring 管理的组件（Bean）。\",\"@Bean\",\"注解作用于方法。\",\"用于显式地声明一个 Bean，自定义性更强。\",\"在某些情况下，只能通过@Bean注解注册 Bean。\"]},\"60\":{\"h\":\"@Autowired 与 @Resource\",\"t\":[\"@Autowired\",\"Spring 提供的注解。\",\"默认的注入方式为 byType（根据类型进行匹配）。\",\"可以通过@Qualifier注解来显式指定名称。\",\"支持在构造函数、方法、字段和参数上使用。\",\"@Resource\",\"JDK 提供的注解。\",\"默认注入方式为 byName（根据名称进行匹配）。\",\"可以通过name属性来显式指定名称。\",\"主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\"]},\"61\":{\"h\":\"@Bean 的生命周期\",\"t\":[\"在 Spring 框架中，@Bean 注解用于声明一个由 Spring 容器管理的 Bean。以下是 Bean 的完整生命周期流程：\",\"实例化（Instantiation）\",\"IOC 容器启动后，通过反射机制实例化 Bean。\",\"属性赋值（Populate properties）\",\"为 Bean 的属性赋值。\",\"Aware 接口检查\",\"检查实现了Aware接口的 Bean，并调用相应的方法，如setBeanFactory、setApplicationContext等。\",\"BeanPostProcessor 前置处理\",\"在初始化方法调用之前执行BeanPostProcessor接口的postProcessBeforeInitialization方法。\",\"InitializingBean 接口和 init-method\",\"检查实现了InitializingBean接口的 Bean，并调用其afterPropertiesSet方法。\",\"检查定义了init-method的 Bean，并调用指定的初始化方法。\",\"BeanPostProcessor 后置处理\",\"在初始化方法调用之后执行BeanPostProcessor接口的postProcessAfterInitialization方法。\",\"使用（Usage）\",\"Bean 准备就绪，可以被应用程序使用了。\",\"销毁前处理（Destruction）\",\"当容器关闭时，如果 Bean 实现了DisposableBean 接口，将调用其destroy方法。\",\"如果 Bean 定义了destroy-method，则调用该方法进行销毁。\"]},\"62\":{\"h\":\"Bean 的线程安全性\",\"t\":[\"在 Spring 框架中，Bean 的线程安全性是一个重要的考虑因素，特别是对于那些有状态的 Bean。\"]},\"63\":{\"h\":\"有状态 Bean\",\"t\":[\"定义：有状态 Bean 是指包含可变成员变量的对象。\",\"问题：如果多个线程同时访问和修改这些可变的成员变量，就可能引发线程安全问题。\"]},\"64\":{\"h\":\"无状态 Bean\",\"t\":[\"定义：无状态 Bean 是指不包含可变成员变量的对象，或者其成员变量不会影响其业务逻辑的对象。\",\"优势：无状态 Bean 更容易保证线程安全，因为它们不会受到并发访问的影响。\"]},\"65\":{\"h\":\"Spring MVC 工作原理\",\"t\":[\"Spring MVC 是基于模型-视图-控制器（Model-View-Controller，简称 MVC）设计模式的 Web 框架。其核心思想是通过将业务逻辑、数据、显示分离来组织代码。\",\"客户端请求\",\"客户端（通常是浏览器）发送 HTTP 请求。\",\"DispatcherServlet 拦截\",\"DispatcherServlet拦截请求并作为前端控制器。\",\"HandlerMapping 匹配\",\"DispatcherServlet调用HandlerMapping。\",\"HandlerMapping 根据 URL 匹配查找能处理请求的Handler（即Controller 控制器）。\",\"将请求涉及到的拦截器和Handler一起封装。\",\"HandlerAdapter 执行\",\"DispatcherServlet 调用HandlerAdapter适配器执行Handler。\",\"返回 ModelAndView\",\"Handler完成对用户请求的处理后，返回一个ModelAndView对象给DispatcherServlet。\",\"ModelAndView 包含了数据模型以及相应的视图信息。 \",\"Model：返回的数据对象。\",\"View：逻辑上的视图。\",\"ViewResolver 解析\",\"ViewResolver根据逻辑视图查找实际的视图。\",\"视图渲染\",\"DispatcherServlet把返回的Model传给视图（视图渲染）。\",\"返回响应\",\"将渲染后的视图返回给请求者（浏览器）。\"]},\"66\":{\"h\":\"统一异常处理\",\"t\":[\"在 Spring 应用中，统一异常处理是一种常见的需求，它有助于集中管理和响应应用程序中的各种异常。推荐使用注解的方式进行统一异常处理，具体会使用到 @ControllerAdvice 和 @ExceptionHandler 这两个注解。\"]},\"67\":{\"h\":\"@ControllerAdvice\",\"t\":[\"@ControllerAdvice 是一个类级别的注解，用于定义全局异常处理。\",\"它可以指定所要应用的组件（如 @Controller、@RestController 等）。\",\"通过定义一个或多个 @ControllerAdvice 类，可以集中处理特定类型的异常。\"]},\"68\":{\"h\":\"@ExceptionHandler\",\"t\":[\"@ExceptionHandler 是一个方法级别的注解，用于处理特定的异常类型。\",\"在 @ControllerAdvice 类中定义方法，并使用 @ExceptionHandler 注解指定该方法处理哪种异常。\",\"可以针对不同的异常类型定义不同的处理逻辑。\"]},\"69\":{\"h\":\"示例\",\"t\":[\"@ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) public ResponseEntity<String> handleException(Exception e) { return new ResponseEntity<>(\\\"Global exception handler: \\\" + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); } @ExceptionHandler(CustomException.class) public ResponseEntity<String> handleCustomException(CustomException e) { return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST); } } \"]},\"70\":{\"h\":\"循环依赖及其解决方案\",\"t\":[\"在 Spring 框架中，循环依赖（Circular Dependency）指的是两个或多个 Bean 相互引用，导致无法完成初始化。为了解决这个问题，Spring 框架通过使用三级缓存机制来处理循环依赖。\"]},\"71\":{\"h\":\"使用@Lazy注解\",\"t\":[\"通过在构造函数注入上添加@Lazy注解，可以延迟 Bean 的初始化，从而避免循环依赖。\"]},\"72\":{\"h\":\"三级缓存机制\",\"t\":[\"第一级缓存（Singleton Cache）\",\"保存已经经过完整生命周期的 Bean 实例。\",\"第二级缓存（Early Singleton Cache）\",\"保存尚未经过完整生命周期的 Bean 实例。\",\"第三级缓存（Singleton Factories Cache）\",\"可以生成原始 Bean 对象或代理对象（如果 Bean 被 AOP 切面代理）。\",\"仅对单例 Bean 生效。\"]},\"73\":{\"h\":\"处理循环依赖\",\"t\":[\"当发生循环依赖时：\",\"Spring 会从第三级缓存singletonFactories中获取ObjectFactory。\",\"调用ObjectFactory的 getObject()方法来获取循环依赖对象的前期暴露对象（虽然还没有初始化完成，但可以获取到该对象在堆中的存储地址）。\",\"将这个前期暴露对象放入第二级缓存中。\",\"通过这种方式，Spring 允许 Bean 在初始化过程中引用其他 Bean，从而解决了循环依赖的问题。\"]},\"74\":{\"h\":\"Spring Bean 作用域\",\"t\":[\"在 Spring 框架中，Bean 的作用域（Scope）定义了 Bean 实例的生命周期和可见性。以下是几种常见的作用域：\"]},\"75\":{\"h\":\"Singleton\",\"t\":[\"描述：唯一 Bean 实例。\",\"特点：在 Spring 应用的整个生命周期中，每个由 Spring 容器管理的 singleton 作用域的 Bean 只有一个实例。\",\"使用场景：当 Bean 可以被多个地方安全共享时。\"]},\"76\":{\"h\":\"Prototype\",\"t\":[\"描述：每次请求都会创建一个新的 Bean 实例。\",\"特点：每次请求该 Bean 时，Spring 容器都会创建一个新的实例。\",\"使用场景：当 Bean 的实例化需要特定的配置或状态时。\"]},\"77\":{\"h\":\"Request\",\"t\":[\"描述：每一次 HTTP 请求都会产生一个新的 Bean。\",\"特点：Bean 的生命周期与 HTTP 请求相同，请求结束后 Bean 被销毁。\",\"使用场景：处理每个 HTTP 请求所需的临时数据。\"]},\"78\":{\"h\":\"Session\",\"t\":[\"描述：每一个 HTTP Session 会产生一个新的 Bean。\",\"特点：Bean 的生命周期与 HTTP 会话相同，会话结束后 Bean 被销毁。\",\"使用场景：当需要在同一个会话中保持 Bean 状态时。\"]},\"79\":{\"h\":\"异常处理类\",\"t\":[\"在 Spring 框架中，异常处理类用于集中处理应用程序中的异常。\"]},\"80\":{\"h\":\"@ControllerAdvice\",\"t\":[\"@ControllerAdvice 注解用于定义全局异常处理类。\",\"它可以捕获控制器层抛出的异常，并进行统一处理。\"]},\"81\":{\"h\":\"@ExceptionHandler\",\"t\":[\"@ExceptionHandler 注解声明异常处理方法。\",\"用于指定哪些异常将由特定的处理方法来处理。\"]},\"82\":{\"h\":\"JPA注解\",\"t\":[\"JPA（Java Persistence API）提供了一系列的注解，用于实体映射和操作。\"]},\"83\":{\"h\":\"@Entity\",\"t\":[\"@Entity 注解声明一个类对应一个数据库实体。\",\"被注解的类将映射到数据库中的一个表。\"]},\"84\":{\"h\":\"@Id\",\"t\":[\"@Id 注解声明一个字段为主键。\",\"使用 @Id 注解后，需要定义主键的生成策略。\"]},\"85\":{\"h\":\"@GeneratedValue\",\"t\":[\"@GeneratedValue 注解指定主键生成策略。\",\"例如，可以使用 @GeneratedValue(strategy = GenerationType.IDENTITY) 来指定主键的生成策略。\"]},\"86\":{\"h\":\"@Transient\",\"t\":[\"@Transient 注解声明不需要与数据库映射的字段。\",\"被注解的字段在保存时不会被保存到数据库中。\"]},\"87\":{\"h\":\"事务管理\"},\"88\":{\"h\":\"@Transactional\",\"t\":[\"@Transactional 注解用于声明事务管理。\",\"可以指定在遇到特定异常时进行回滚。\",\"例如，@Transactional(rollbackFor = Exception.class) 让事务在遇到非运行时异常时也回滚。\"]},\"89\":{\"h\":\"spring事务传播行为\",\"t\":[\"事务传播是指一个事务调用另一个事务时，这个事务方法对另一个事务方法（调用者）的态度，a\\\\b方法开启事务，a方法中调用了B方法，b方法传播到a方法的事务中，产生传播行为，这时我们需要对b方法进行处理。 他分7种：\",\"第一种b在运行时需要事务，require,required-new，mandatory{抛异常}\",\"第二种b在运行时不需要事务，supports,{有融入}not supported{有挂起}，never{有抛异常}\",\"Nested支持嵌套事务，实现独立回滚\"]},\"90\":{\"h\":\"DAO接口工作原理\",\"t\":[\"其工作原理时JDK动态代理， mybatis运行时会为dao接口生成动态代理对象，\",\"对象会拦截方法，执行mappedstatement 的sql\"]},\"91\":{\"h\":\"数据类型\"},\"92\":{\"h\":\"数据类型分类\"},\"93\":{\"h\":\"基本数据类型\"},\"94\":{\"h\":\"number\",\"t\":[\"介绍\",\"Javascript是弱数据类型，赋值后才能判断\",\"整数\",\"小数\",\"负数\"]},\"95\":{\"h\":\"string\"},\"96\":{\"h\":\"字符串含义\",\"t\":[\"字符串使用英文状态下的\\\"\\\"或'' 单引号和双引号可以相互嵌套，但注意不能自己嵌套自己\"]},\"97\":{\"h\":\"字符串拼接\",\"t\":[\"document.write('忍者'+'神龟') let comic = '火影忍者' let author = '岸本齐史' document.write(comic + author) \"]},\"98\":{\"h\":\"模板字符串\",\"t\":[\"let comic = '火影忍者' let author = '岸本齐史' document.write(${comic}的作者是${author}) \"]},\"99\":{\"h\":\"Boolean\",\"t\":[\"let isDarkMode = true; \"]},\"100\":{\"h\":\"undefined\",\"t\":[\"只声明变量，未赋值\"]},\"101\":{\"h\":\"null\",\"t\":[\"声明并赋值，但为空\"]},\"102\":{\"h\":\"引用数据类型\"},\"103\":{\"h\":\"object\"},\"104\":{\"h\":\"function\"},\"105\":{\"h\":\"array\"},\"106\":{\"h\":\"检测数据类型\",\"t\":[\"let num = 12; console.log(typeof num); \"]},\"107\":{\"h\":\"数据类型转换\"},\"108\":{\"h\":\"隐式转换\",\"t\":[\"let num = 12; console.log(typeof num + 12); //输出number12 \",\"+两边只要有一个字符串，都会把另外一个转成字符串 除了+以外的算术运算符，比如-*/等都会把数据转成数字类型\"]},\"109\":{\"h\":\"显式转换\"},\"110\":{\"h\":\"date_base\"},\"111\":{\"h\":\"并发数据库操作中的读取问题\",\"t\":[\"在并发数据库操作中，可能会出现脏读、不可重复读和幻读等问题，这些问题都与事务的隔离级别有关。\"]},\"112\":{\"h\":\"脏读 (Dirty Read)\",\"t\":[\"定义：一个事务读取到了另一个事务未提交的数据。\",\"影响：如果未提交的事务最终被回滚，那么读取到的数据就是无效的，这可能导致错误的决策。\"]},\"113\":{\"h\":\"不可重复读 (Non-repeatable Read)\",\"t\":[\"定义：在一个事务中多次读取同一数据，如果在两次读取之间，其他事务对数据进行了修改，那么两次读取的数据可能不一致。\",\"影响：这可能导致事务在处理过程中得到不同的结果，影响数据的一致性。\"]},\"114\":{\"h\":\"幻读 (Phantom Read)\",\"t\":[\"定义：在一个事务中多次读取同一范围的数据，如果在两次读取之间，其他事务插入或删除了数据，那么两次读取的数据数量可能不一致。\",\"影响：这可能导致事务在处理过程中得到不一致的数据集，影响数据的完整性。\"]},\"115\":{\"h\":\"隔离级别\",\"t\":[\"为了解决这些问题，数据库系统提供了不同的事务隔离级别：\",\"读未提交 (Read Uncommitted)：最低的隔离级别，可能出现脏读、不可重复读和幻读。\",\"读已提交 (Read Committed)：避免了脏读，但可能出现不可重复读和幻读。\",\"可重复读 (Repeatable Read)：避免了脏读和不可重复读，但可能出现幻读。\",\"串行化 (Serializable)：最高的隔离级别，避免了脏读、不可重复读和幻读，但性能开销较大。\"]},\"116\":{\"h\":\"聚簇索引\",\"t\":[\"根据ID构建，且叶子节点保存所有行数据的索引，称之为聚簇索引，\",\"他是存储MYSQL里面数据的基本结构，所以跟据ID数据查询时可以走聚簇索引，但要是不是ID就不能走聚簇索引。\"]},\"117\":{\"h\":\"非聚簇索引（二级索引）\",\"t\":[\"叶子节点存储的是聚簇索引的字段，之后需要回表走聚簇索引，因为没有覆盖查询所需要的数据\"]},\"118\":{\"h\":\"索引覆盖（减少回表次数）\",\"t\":[\"查询结果可以在二级索引获取，而无需访问表的实际数据，即无需回表查\"]},\"119\":{\"h\":\"MyISAM 与 InnoDB 存储引擎的区别\",\"t\":[\"在 MySQL 数据库中，InnoDB 和 MyISAM 是两种常用的存储引擎，它们在事务支持、锁定级别、外键支持、ACID 支持以及性能方面各有特点。\"]},\"120\":{\"h\":\"事务支持\",\"t\":[\"MyISAM：不支持事务处理。\",\"InnoDB：支持事务处理。\"]},\"121\":{\"h\":\"锁定级别\",\"t\":[\"MyISAM：使用表级锁定，即当一个线程读取一个表时，其他线程不能同时写入该表。\",\"InnoDB：支持行级锁定，允许更高的并发性。\"]},\"122\":{\"h\":\"外键支持\",\"t\":[\"MyISAM：不支持外键约束。\",\"InnoDB：支持外键约束，可以维护数据的引用完整性。\"]},\"123\":{\"h\":\"ACID 支持\",\"t\":[\"MyISAM：不完全支持 ACID 特性。\",\"InnoDB：完全支持 ACID 特性，确保事务的原子性、一致性、隔离性和持久性。\"]},\"124\":{\"h\":\"性能\",\"t\":[\"MyISAM：在读操作多、写操作少的场景下性能较好，尤其是在处理大量数据时。\",\"InnoDB：在处理大量并发读写操作时性能较好。\",\"如果需要支持事务、外键约束或者需要更好的数据完整性和一致性，应选择 InnoDB。\",\"如果需要更好的读性能，且不需要事务处理，可以选择 MyISAM。\"]},\"125\":{\"h\":\"索引失效\",\"t\":[\"索引列参与计算：如 WHERE age * 2 = 40，索引无法使用\",\"对索引列进行函数操作：如 WHERE UPPER(name) = 'ZHANGSAN'，索引会失效\",\"查询中使用了 OR 两边有范围查询：如 WHERE age = 10 OR age > 20，可能导致索引失效\",\"LIKE操作：以 % 开头的 LIKE 查询，如 WHERE name LIKE '%zhangsan'，索引会失效\",\"不等于比较：使用 != 或 <> 比较可能导致索引失效\",\"IS NULL 或 IS NOT NULL：这些条件可能导致索引失效\",\"字符串不加单引号：如 WHERE name = 2000，可能导致索引失效。隐式类型转换\",\"使用 IN：当 IN 子句中的列表过大时，可能导致索引失效\",\"使用 NOT IN：这可能导致索引失效，特别是当子查询返回大量数据时\"]},\"126\":{\"h\":\"java基础\"},\"127\":{\"h\":\"引用拷贝、深拷贝、浅拷贝\"},\"128\":{\"h\":\"引用拷贝\",\"t\":[\"拷贝引用，两个不同的引用指向同一个对象。\"]},\"129\":{\"h\":\"深拷贝\",\"t\":[\"完全复制整个对象，包括这个对象所包含的内部对象。\"]},\"130\":{\"h\":\"浅拷贝\",\"t\":[\"在堆上创建一个新的对象。\",\"如果原对象内部的属性是引用类型，浅拷贝会直接复制内部对象的引用地址。\"]},\"131\":{\"h\":\"String、StringBuilder、StringBuffer\"},\"132\":{\"h\":\"可变性\",\"t\":[\"String：内部的 value 值是 char 数组，被 final 修饰，不可变。\",\"StringBuilder 和 StringBuffer：可变。\"]},\"133\":{\"h\":\"安全性\",\"t\":[\"String：由于不可变，所以是安全的。\",\"StringBuilder：不是线程安全的。\",\"StringBuffer：因为加了锁，所以是线程安全的。\"]},\"134\":{\"h\":\"性能方面\",\"t\":[\"使用String进行拼接时需要创建新对象，性能最差。\",\"StringBuffer因为加了锁影响性能，所以比StringBuilder性能差。\"]},\"135\":{\"h\":\"自动拆装箱\"},\"136\":{\"h\":\"装箱\",\"t\":[\"将基本类型用它们对应的引用类型包装起来。\"]},\"137\":{\"h\":\"拆箱\",\"t\":[\"将包装类型转换为基本数据类型。\"]},\"138\":{\"h\":\"重载、重写\"},\"139\":{\"h\":\"重载\",\"t\":[\"同样的一个方法能够根据输入数据的不同，做出不同的处理。\"]},\"140\":{\"h\":\"重写\",\"t\":[\"当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，覆盖父类方法。\"]},\"141\":{\"h\":\"Char、Varchar\"},\"142\":{\"h\":\"可变性\",\"t\":[\"Char：不可变长度，数据长度不足会空格补充。\",\"Varchar：可变长度。\"]},\"143\":{\"h\":\"性能方面\",\"t\":[\"Char：不可变长度，性能更佳。\",\"Varchar：更省空间。\"]},\"144\":{\"h\":\"使用\",\"t\":[\"Char：适用于记录固定表单数据，如身份证。\",\"Varchar：适用于记录不固定数据，如昵称。\"]},\"145\":{\"h\":\"== 和 equals 的区别\",\"t\":[\"==\",\"比较栈中的值。 \",\"基本数据类型：比较数值是否相等。\",\"引用数据类型：比较对象的内存地址是否相等。\"]},\"146\":{\"h\":\"equals\",\"t\":[\"重写前跟==一致。\",\"重写后比较对象的内容是否相同。\"]},\"147\":{\"h\":\"String.intern()\",\"t\":[\"将指定的字符串对象的引用保存在字符串常量池中，可以简单分为两种情况：\",\"如果字符串常量池中保存了对应的字符串对象的引用，就直接返回该引用。\",\"如果字符串常量池中没有保存对应的字符串对象的引用，那就在常量池中创建一个指向该字符串对象的引用，并返回该引用。\"]},\"148\":{\"h\":\"Static 关键字\",\"t\":[\"static关键字用于修饰成员变量、方法体、内部类、代码块和静态导包。\"]},\"149\":{\"h\":\"静态导包\",\"t\":[\"允许直接使用类的方法，就像它是类自己的方法一样。\"]},\"150\":{\"h\":\"内部类\",\"t\":[\"可以直接使用内部类，而不需要外部类。\"]},\"151\":{\"h\":\"Java 异常类型及原理\",\"t\":[\"Throwable有两个直接的子类：Error 和Exception。\",\"Error\",\"无法恢复的错误，程序员不需要处理。\",\"Exception\",\"可恢复的异常，分为 RuntimeException和其他 Exception。 \",\"RuntimeException：处理或不处理都可以。\",\"其他 Exception：Java 编译器要求程序必须捕获或抛出这种异常。\"]},\"152\":{\"h\":\"字节流与字符流的区别\",\"t\":[\"特性\",\"字节流\",\"字符流\",\"操作基本单元\",\"字节 (byte)\",\"字符 (char)\",\"是否使用缓冲\",\"否\",\"是\",\"存在位置\",\"可存在于文件、内存中\",\"只存在于内存中\",\"使用场景\",\"适合操作文本文件之外的文件\",\"适合操作文本文件时使用，自动处理字符编码和解码\"]},\"153\":{\"h\":\"Java 访问权限\",\"t\":[\"访问修饰符\",\"访问范围\",\"public\",\"内部成员、子类、同包其他类、其他包\",\"protected\",\"内部成员、子类、同包其他类\",\"default\",\"内部成员、同包其他类\",\"private\",\"内部成员\"]},\"154\":{\"h\":\"接口知识\"},\"155\":{\"h\":\"JDK 8 新特性\",\"t\":[\"default 方法：接口中可以包含方法体，修改接口时需要修改所有实现该接口的类。\",\"static 方法：static 修饰的方法可以放入接口中，可以直接用 <接口名.方法名()> 的形式调用。\"]},\"156\":{\"h\":\"匿名内部类\",\"t\":[\"用于创建没有名称的类的实例。\"]},\"157\":{\"h\":\"mq\"},\"158\":{\"h\":\"三大消息队列区别\",\"t\":[\"以下是Kafka、RocketMQ 和 RabbitMQ 三种常见消息队列的对比：\",\"特性\",\"Kafka\",\"RocketMQ\",\"RabbitMQ\",\"吞吐量\",\"高\",\"高\",\"中等\",\"死信队列\",\"×\",\"√\",\"√\",\"延迟队列\",\"×\",\"√\",\"√\",\"优先级队列\",\"×\",\"√\",\"√\",\"消息获取\",\"拉\",\"推/拉\",\"推/拉\",\"支持事务\",\"仅消息生产事务\",\"支持\",\"支持\"]},\"159\":{\"h\":\"MQ 消息丢失问题及解决方案\",\"t\":[\"在消息队列（MQ）的使用过程中，消息丢失是一个需要特别注意的问题。以下是消息在不同阶段可能丢失的原因以及相应的解决方案：\"]},\"160\":{\"h\":\"信息到 MQ\",\"t\":[\"在这个阶段，消息从生产者发送到消息队列的过程中可能会丢失。\",\"解决方案：\",\"发送方确认模式：确保消息被成功发送到消息队列。例如，在 RabbitMQ 中，可以通过设置 mandatory 标志来实现。如果消息无法被路由到任何队列，RabbitMQ 会发送一个 return 消息到指定的交换机。\",\"事务支持：使用事务来确保消息的发送和确认。例如，在 Kafka 中，可以通过 acks 参数来控制消息的确认机制。\"]},\"161\":{\"h\":\"信息路由到队列\",\"t\":[\"在这个阶段，消息在被路由到特定队列的过程中可能会丢失。\",\"解决方案：\",\"路由失败通知：在 RabbitMQ 中，可以在配置新的 RabbitTemplate 时开启路由失败通知。这样，如果消息无法被路由到任何队列，将会触发一个回调函数。\",\"监控和报警：设置监控和报警机制，以便在路由失败时及时得到通知。\"]},\"162\":{\"h\":\"消息在队列正确存储\",\"t\":[\"在这个阶段，消息已经到达队列，但在存储过程中可能会丢失。\",\"解决方案：\",\"持久化配置：确保交换机、队列和消息都被设置为持久化。例如，在 RabbitMQ 中，可以通过设置 durable 属性来实现队列的持久化，以及通过 deliveryMode 来设置消息的持久化。\",\"备份和复制：使用队列的备份和复制机制来提高数据的可靠性。\"]},\"163\":{\"h\":\"队列投递到消费者\",\"t\":[\"在这个阶段，消息从队列投递到消费者的过程中可能会丢失。\",\"解决方案：\",\"消费者确认：确保消费者在处理完消息后进行确认。例如，在 RabbitMQ 中，可以通过设置手动提交（manual 或 manualAckNow）来实现。\",\"监听容器：使用监听容器来异步接收消息，并在确认消息后进行处理。\",\"绑定队列：正确绑定队列和消费者，确保消息能够被正确投递。\",\"定义消费者确认方法：在消费者中定义确认方法，确保在消息处理成功后进行确认。\"]},\"164\":{\"h\":\"运算符\"},\"165\":{\"h\":\"算术运算符\",\"t\":[\"算术运算符优先级\",\"先乘除取模后加减，有括号先算括号内的\",\"+：求和\",\"-：求差\",\"*：求积\",\"/：求商\",\"%：取模\"]},\"166\":{\"h\":\"赋值运算符\",\"t\":[\"左值警告\",\"赋值运算符是把右边的值赋予左边，这就要求左边必须是一个容器\",\"简写\",\"+=\",\"-=\",\"*=\",\"/=\"]},\"167\":{\"h\":\"一元运算符\",\"t\":[\"++：变量值加1\",\"--：变量值减1\",\"前置：先自增后运算\",\"后置：先运算后自增\",\"前置自增与后置自增\",\"独立使用二者并无差别\",\"通常使用i++\"]},\"168\":{\"h\":\"比较运算符\",\"t\":[\">：左边是否大于右边\",\"<：左边是否小于右边\",\">=：左边是否大于或等于右边\",\">=：左边是否小于或等于右边\",\"==：左右两边是否相等\",\"===：左右两边是否类型和值都相等\",\"!==：左右两边是否不全等\"]},\"169\":{\"h\":\"逻辑运算符\",\"t\":[\"符号\",\"名称\",\"日常用法\",\"特点\",\"&&\",\"逻辑与\",\"并且\",\"一假即假\",\"||\",\"逻辑或\",\"或者\",\"一真即真\",\"!\",\"逻辑非\",\"取反\",\"真变假\"]},\"170\":{\"h\":\"逻辑运算符短路\",\"t\":[\"符号\",\"短路条件\",\"&&\",\"左边为false就短路\",\"||\",\"左边为true就短路\",\"false、0、' '、undefined、null当假的看\"]},\"171\":{\"h\":\"逻辑运算符中断\",\"t\":[\"let num = prompt('请输入一个属：') num = num || 0 //num逻辑运算符短路，赋值为0 \"]},\"172\":{\"h\":\"运算符优先级\",\"t\":[\"优先级\",\"运算符\",\"顺序\",\"1\",\"小括号\",\"()\",\"2\",\"一元运算符\",\"++-- ！\",\"3\",\"算数运算符\",\"先*/%后+-\",\"4\",\"关系运算符\",\"> >= < <=\",\"5\",\"相等运算符\",\"== ！= === ！==\",\"6\",\"逻辑运算符\",\"先&&后`\",\"7\",\"赋值运算符\",\"=\",\"8\",\"逗号运算符\",\",\"]},\"173\":{\"h\":\"redis\"},\"174\":{\"h\":\"Redis有几种集群模式/高可用\",\"t\":[\"1、主从模式：将一个redis中的数据复制到其他节点，来实现数据的冗余和备份，主节点实现写操作，从节点同步数据，\",\"客服端在从节点读取数据实现读写分离， 但当主节点故障时，整个redis功能都不能使用，可用性偏弱\",\"2、哨兵模式：主从模式基础上加入哨兵节点，当发生故障时，哨兵节点会在从节点中选出一个节点当主节点\",\"1：主从切换期间客户端出现访问瞬断\",\"2：单个master节点写、存储能力有限\",\"3、cluster模式：采用数据分片的技术将全部数据分散存储在不同节点，这样解决了上述问题，\",\"如何分片：使用hash槽对数据进行分片，每个主节点负责对应哈希槽，当存取某个key时，通过hash计算确定存取的位置。\"]},\"175\":{\"h\":\"分布式CAP原理\",\"t\":[\"分区容错性：系统某节点发生故障时，仍能提供服务\",\"一致性：所有节点同一时间看到的都是一样的，可以保证数据强一致性，加锁影响系统吞吐量（重找）\",\"可用性；保证服务一直可用，正常的响应时间\"]},\"176\":{\"h\":\"Redis存储结构\",\"t\":[\"|String | hash | list |set | zset |\"]},\"177\":{\"h\":\"Redis快的原因\",\"t\":[\"基于内存，数据存储在内存中，读写速度快，同时会定期持久化，同步到磁盘中防止数据丢失\",\"单线程减少上下文切换，同时由于单线程，使得处理复杂操作时，不需要惊醒加锁\",\"Io多路复用：单个线程处理多个并发连接，提高吞吐量\",\"精简的数据结构和算法：数据结构都是优化过的，同时还有跳跃表、布弄过率器等提高查询操作效率\"]},\"178\":{\"h\":\"BIO、NIO 和 I/O 多路复用的区别\",\"t\":[\"在网络编程中，I/O 模型决定了程序如何处理输入和输出操作。BIO、NIO 和 I/O 多路复用是 Java 中常见的三种 I/O 模型，它们在处理并发请求时有不同的行为和性能特点。\"]},\"179\":{\"h\":\"BIO（Blocking I/O）\",\"t\":[\"BIO 是一种同步阻塞 I/O 模型。\",\"特点：\",\"应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。\",\"每个连接都需要一个独立的线程来处理，这在连接数很多时会导致大量的线程消耗。\",\"线程在等待 I/O 操作完成时不能做其他事情。\"]},\"180\":{\"h\":\"NIO（Non-blocking I/O）\",\"t\":[\"NIO 是一种同步非阻塞 I/O 模型。\",\"特点：\",\"应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的。\",\"通过轮询操作，避免了一直阻塞。线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。\",\"read 调用的过程（数据从内核空间 -> 用户空间）还是阻塞的。\"]},\"181\":{\"h\":\"I/O 多路复用\",\"t\":[\"I/O 多路复用是一种 I/O 复用技术，它允许一个线程监视多个文件描述符，以确定哪些文件描述符已经准备好进行 I/O 操作。\",\"特点：\",\"通过使用 select、poll 或 epoll 系统调用，一个线程可以管理多个网络连接。\",\"当某个连接的数据准备好时，操作系统会通知程序，程序再进行相应的 I/O 操作。\",\"减少了线程之间的切换开销，提高了系统的并发处理能力。\"]},\"182\":{\"h\":\"redis持久机制\",\"t\":[\"RDB：一段时间将内存数据以快照形式保存在磁盘中,文件后缀一般为rdb,\",\"优点：备份文件小，加载速度慢 缺点：不安全，数据丢失，数据不是实时保存的\",\"AOF：将所有写操作追加到一个日志文件中，\",\"优点：安全，数据不易丢失\",\"缺点：备份文件大，加载速度快，适合小规模数据恢复\",\"混合持久化：重写写入AOF文件前一刻内存做RDB快照处理，RDB快照内容和增量AOF修改命令存在一起，\",\"写入新的AOF文件，重启时，先加载RDB内容，重放增量AOF日志，替代AOF全量文件重放。\"]},\"183\":{\"h\":\"redis过期策略\",\"t\":[\"定时删除：创建定时器，时间一道删除\",\"惰性删除：未使用时不会删除，等用到key的时候，再判断有没有过期\",\"定期删除：每过一段时间抽取设置了过期的key检测是否过期\"]},\"184\":{\"h\":\"Redis淘汰策略\",\"t\":[\"淘汰策略\",\"适用范围\",\"淘汰算法\",\"描述\",\"volatile-lru\",\"设置过期时间的键\",\"LRU（最近最少使用）\",\"优先淘汰最近最少使用的键，只针对设置了过期时间的键。\",\"allkeys-lru\",\"所有键\",\"LRU（最近最少使用）\",\"优先淘汰最近最少使用的键，适用于所有键。\",\"allkeys-lfu\",\"所有键\",\"LFU（最近最少使用频率）\",\"优先淘汰使用频率最低的键，适用于所有键。\",\"volatile-lfu\",\"设置过期时间的键\",\"LFU（最近最少使用频率）\",\"优先淘汰使用频率最低的键，只针对设置了过期时间的键。\",\"volatile-random\",\"设置过期时间的键\",\"随机淘汰\",\"随机选择键进行淘汰，只针对设置了过期时间的键。\",\"allkeys-random\",\"所有键\",\"随机淘汰\",\"随机选择键进行淘汰，适用于所有键。\",\"volatile-ttl\",\"设置过期时间的键\",\"TTL（剩余生存时间）\",\"优先淘汰剩余生存时间最短的键，只针对设置了过期时间的键。\",\"no-eviction\",\"所有键\",\"不淘汰\",\"不淘汰任何键，当内存不足时，写操作会报错。\"]},\"185\":{\"h\":\"语句\"},\"186\":{\"h\":\"表达式和语句\",\"t\":[\"名词解释\",\"表达式是一组代码的集合，Javascript解释器会将其计算出一个结果\",\"语句是js整句或命令，js语句是以分号结束\",\"表达式和语句区别\",\"表达式计算出一个值，但语句用来自行以使某件事发生（做什么事）\"]},\"187\":{\"h\":\"流程控制语句\"},\"188\":{\"h\":\"顺序\",\"t\":[\"流程按照线性顺序执行\"]},\"189\":{\"h\":\"分支\"},\"190\":{\"h\":\"if分支语句\"},\"191\":{\"h\":\"三元运算符\",\"t\":[\"条件?满足条件执行的代码:不满足条件执行的代码 \"]},\"192\":{\"h\":\"switch语句\",\"t\":[\"switch(条件){ case 值1: 代码1 break case 值2 代码2 break case 值3 代码3 break default 代码n break } \"]},\"193\":{\"h\":\"循环\",\"t\":[\"终止条件\",\"循环一定要有终止条件，否则会死循环\"]},\"194\":{\"h\":\"while\",\"t\":[\"while(循环条件){ 要重复执行的代码(循环体) } \"]},\"195\":{\"h\":\"for\",\"t\":[\"for(声明记录循环次数的变量;循环条件；变化值){ 循环体 } \"]},\"196\":{\"h\":\"循环结束\",\"t\":[\"continue: 结束本次循环，继续下次循环\",\"break:跳出循环\"]},\"197\":{\"h\":\"小提示\"},\"198\":{\"h\":\"电脑用户变量和系统变量那个优先级高?\",\"t\":[\"当涉及到环境变量的解析和使用时，通常用户变量的优先级高于系统变量。\",\"这意味着如果一个用户变量和一个系统变量具有相同的名称，那么在该用户的上下文中，用户变量的值将被优先使用。\"]},\"199\":{\"h\":\"node跟npm指令有啥区别?\",\"t\":[\"node：用于运行 JavaScript 代码，是 Node.js 的执行环境。\",\"npm：用于管理 Node.js 项目的依赖和包，是 Node.js 的包管理器。\",\"提示\",\"Hykari对sharingspares比druid更适配\"]},\"200\":{\"h\":\"变量\",\"t\":[\"变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆\",\"内存：计算机中存储数据的地方，相当于一个空间 变量：是程序在内存中申请的一块用来存放数据的小空间\",\"垃圾回收机制\",\"Javascript本身自带垃圾回收机制，不使用的变量会回收空间，避免内存漫溢\"]},\"201\":{\"h\":\"声明变量\",\"t\":[\"警告\",\"let不允许多次声名同一个变量\",\"let age; \",\"let是关键字, age是变量名/标识符\"]},\"202\":{\"h\":\"变量赋值\",\"t\":[\"变量名前跟上一个=\",\"let age; age = 6; //输出变量值 document.write(age); \"]},\"203\":{\"h\":\"更新变量\",\"t\":[\"变量赋值后，还可以通过简单地给它一个不同的值来更新它\",\"let age; age = 12; //更新变量 age = 24; //输出变量值 document.write(age); \"]},\"204\":{\"h\":\"变量初始化\",\"t\":[\"//声明并初始化变量值 let age = 24; //声明多个变量并初始化 let gender = 'male',userName = 'igloo'; \"]},\"205\":{\"h\":\"变量命名规则与规范\",\"t\":[\"规则：必须遵守，不遵守会报错 规范：建议，不遵守不会报错，但不符合业内通识\"]},\"206\":{\"h\":\"命名规则\",\"t\":[\"不能用关键字\",\"下划线、字母、数字、$组成，且数字不能开头\",\"字母严格区分大小写，如Age和age是不同变量\"]},\"207\":{\"h\":\"命名规范\",\"t\":[\"起名字要有意义\",\"遵守驼峰命名法，建议小驼峰命名\"]},\"208\":{\"h\":\"声明变量规范\",\"t\":[\"使用let而非var声明变量\",\"var声明有如下弊端\",\"可以先使用在声明（不合理）\",\"声明过的变量可重复声明（不合理）\",\"缺少块级作用域\"]},\"209\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"缺少块级作用域\",{\"1\":{\"208\":1}}],[\"缺点\",{\"1\":{\"182\":2}}],[\"遵守驼峰命名法\",{\"1\":{\"207\":1}}],[\"起名字要有意义\",{\"1\":{\"207\":1}}],[\"命名规范\",{\"0\":{\"207\":1}}],[\"命名规则\",{\"0\":{\"206\":1}}],[\"下划线\",{\"1\":{\"206\":1}}],[\"建议小驼峰命名\",{\"1\":{\"207\":1}}],[\"建议\",{\"1\":{\"205\":1}}],[\"必须遵守\",{\"1\":{\"205\":1}}],[\"必须和引用队列一起使用\",{\"1\":{\"21\":1}}],[\"规范\",{\"1\":{\"205\":1}}],[\"规则\",{\"1\":{\"205\":1}}],[\"规定了js基础语法核心知识\",{\"1\":{\"37\":1}}],[\"还可以通过简单地给它一个不同的值来更新它\",{\"1\":{\"203\":1}}],[\"还是阻塞的\",{\"1\":{\"180\":1}}],[\"警告\",{\"1\":{\"201\":1}}],[\"警告内容\",{\"1\":{\"44\":1}}],[\"计算机中存储数据的地方\",{\"1\":{\"200\":1}}],[\"计算型代码\",{\"1\":{\"11\":1}}],[\"项目的依赖和包\",{\"1\":{\"199\":1}}],[\"项目用途\",{\"0\":{\"3\":1}}],[\"电脑用户变量和系统变量那个优先级高\",{\"0\":{\"198\":1}}],[\"跳出循环\",{\"1\":{\"196\":1}}],[\"继续下次循环\",{\"1\":{\"196\":1}}],[\"结束本次循环\",{\"1\":{\"196\":1}}],[\"变化值\",{\"1\":{\"195\":1}}],[\"变量命名规则与规范\",{\"0\":{\"205\":1}}],[\"变量初始化\",{\"0\":{\"204\":1}}],[\"变量名前跟上一个=\",{\"1\":{\"202\":1}}],[\"变量赋值后\",{\"1\":{\"203\":1}}],[\"变量赋值\",{\"0\":{\"202\":1}}],[\"变量是计算机中用来存储数据的\",{\"1\":{\"200\":1}}],[\"变量\",{\"0\":{\"200\":1},\"1\":{\"200\":1}}],[\"变量值减1\",{\"1\":{\"167\":1}}],[\"变量值加1\",{\"1\":{\"167\":1}}],[\"变量的值\",{\"1\":{\"22\":1}}],[\"声明过的变量可重复声明\",{\"1\":{\"208\":1}}],[\"声明多个变量并初始化\",{\"1\":{\"204\":1}}],[\"声明并初始化变量值\",{\"1\":{\"204\":1}}],[\"声明并赋值\",{\"1\":{\"101\":1}}],[\"声明变量规范\",{\"0\":{\"208\":1}}],[\"声明变量\",{\"0\":{\"201\":1}}],[\"声明记录循环次数的变量\",{\"1\":{\"195\":1}}],[\"要重复执行的代码\",{\"1\":{\"194\":1}}],[\"终止条件\",{\"1\":{\"193\":1}}],[\"循环结束\",{\"0\":{\"196\":1}}],[\"循环体\",{\"1\":{\"194\":1,\"195\":1}}],[\"循环条件\",{\"1\":{\"194\":1,\"195\":1}}],[\"循环一定要有终止条件\",{\"1\":{\"193\":1}}],[\"循环\",{\"0\":{\"193\":1}}],[\"循环依赖\",{\"1\":{\"70\":1}}],[\"循环依赖及其解决方案\",{\"0\":{\"70\":1}}],[\"满足条件执行的代码\",{\"1\":{\"191\":1}}],[\"条件\",{\"1\":{\"191\":1,\"192\":1}}],[\"条件判断\",{\"1\":{\"57\":1}}],[\"流程按照线性顺序执行\",{\"1\":{\"188\":1}}],[\"流程控制语句\",{\"0\":{\"187\":1}}],[\"做什么事\",{\"1\":{\"186\":1}}],[\"做出不同的处理\",{\"1\":{\"139\":1}}],[\"名词解释\",{\"1\":{\"186\":1}}],[\"名称\",{\"1\":{\"169\":1}}],[\"表达式计算出一个值\",{\"1\":{\"186\":1}}],[\"表达式是一组代码的集合\",{\"1\":{\"186\":1}}],[\"表达式和语句区别\",{\"1\":{\"186\":1}}],[\"表达式和语句\",{\"0\":{\"186\":1}}],[\"表单验证\",{\"1\":{\"36\":1}}],[\"语句是js整句或命令\",{\"1\":{\"186\":1}}],[\"语句\",{\"0\":{\"185\":1}}],[\"剩余生存时间\",{\"1\":{\"184\":1}}],[\"随机选择键进行淘汰\",{\"1\":{\"184\":2}}],[\"随机淘汰\",{\"1\":{\"184\":2}}],[\"淘汰算法\",{\"1\":{\"184\":1}}],[\"淘汰策略\",{\"1\":{\"184\":1}}],[\"再判断有没有过期\",{\"1\":{\"183\":1}}],[\"再继续执行\",{\"1\":{\"10\":1}}],[\"未使用时不会删除\",{\"1\":{\"183\":1}}],[\"未赋值\",{\"1\":{\"100\":1}}],[\"惰性删除\",{\"1\":{\"183\":1}}],[\"替代aof全量文件重放\",{\"1\":{\"182\":1}}],[\"写操作会报错\",{\"1\":{\"184\":1}}],[\"写操作少的场景下性能较好\",{\"1\":{\"124\":1}}],[\"写入新的aof文件\",{\"1\":{\"182\":1}}],[\"混合持久化\",{\"1\":{\"182\":1}}],[\"安全\",{\"1\":{\"182\":1}}],[\"安全性\",{\"0\":{\"133\":1},\"1\":{\"23\":1}}],[\"备份文件大\",{\"1\":{\"182\":1}}],[\"备份文件小\",{\"1\":{\"182\":1}}],[\"备份和复制\",{\"1\":{\"162\":1}}],[\"程序再进行相应的\",{\"1\":{\"181\":1}}],[\"程序员不需要处理\",{\"1\":{\"151\":1}}],[\"系统调用\",{\"1\":{\"181\":1}}],[\"系统某节点发生故障时\",{\"1\":{\"175\":1}}],[\"复用技术\",{\"1\":{\"181\":1}}],[\"复制算法\",{\"1\":{\"30\":4}}],[\"询问内核数据是否准备就绪\",{\"1\":{\"180\":1}}],[\"布弄过率器等提高查询操作效率\",{\"1\":{\"177\":1}}],[\"精简的数据结构和算法\",{\"1\":{\"177\":1}}],[\"提示\",{\"1\":{\"199\":1}}],[\"提高了系统的并发处理能力\",{\"1\":{\"181\":1}}],[\"提高吞吐量\",{\"1\":{\"177\":1}}],[\"提供的注解\",{\"1\":{\"60\":2}}],[\"提供类加载的层次结构\",{\"1\":{\"33\":1}}],[\"提供了一系列的注解\",{\"1\":{\"82\":1}}],[\"提供了集成\",{\"1\":{\"51\":1}}],[\"提供了微服务架构下的各种解决方案\",{\"1\":{\"50\":1}}],[\"提供了模型\",{\"1\":{\"49\":1}}],[\"提供了生产就绪的特性\",{\"1\":{\"48\":1}}],[\"提供了快速开发的便利性\",{\"1\":{\"48\":1}}],[\"提供了\",{\"1\":{\"23\":1}}],[\"基于内存\",{\"1\":{\"177\":1}}],[\"基本数据类型\",{\"0\":{\"93\":1},\"1\":{\"145\":1}}],[\"zset\",{\"1\":{\"176\":1}}],[\"zhangsan\",{\"1\":{\"125\":2}}],[\"|set\",{\"1\":{\"176\":1}}],[\"|string\",{\"1\":{\"176\":1}}],[\"|\",{\"1\":{\"176\":4}}],[\"||\",{\"1\":{\"169\":1,\"170\":1,\"171\":1}}],[\"正常的响应时间\",{\"1\":{\"175\":1}}],[\"正确绑定队列和消费者\",{\"1\":{\"163\":1}}],[\"所有键\",{\"1\":{\"184\":4}}],[\"所有节点同一时间看到的都是一样的\",{\"1\":{\"175\":1}}],[\"所以比stringbuilder性能差\",{\"1\":{\"134\":1}}],[\"所以是线程安全的\",{\"1\":{\"133\":1}}],[\"所以是安全的\",{\"1\":{\"133\":1}}],[\"所以跟据id数据查询时可以走聚簇索引\",{\"1\":{\"116\":1}}],[\"所以结束符可写可不写\",{\"1\":{\"42\":1}}],[\"仍能提供服务\",{\"1\":{\"175\":1}}],[\"采用数据分片的技术将全部数据分散存储在不同节点\",{\"1\":{\"174\":1}}],[\"哨兵节点会在从节点中选出一个节点当主节点\",{\"1\":{\"174\":1}}],[\"哨兵模式\",{\"1\":{\"174\":1}}],[\"客服端在从节点读取数据实现读写分离\",{\"1\":{\"174\":1}}],[\"客户端\",{\"1\":{\"65\":1}}],[\"客户端请求\",{\"1\":{\"65\":1}}],[\"从节点同步数据\",{\"1\":{\"174\":1}}],[\"从而解决了循环依赖的问题\",{\"1\":{\"73\":1}}],[\"从而避免循环依赖\",{\"1\":{\"71\":1}}],[\"从而导致\",{\"1\":{\"10\":2}}],[\"主从切换期间客户端出现访问瞬断\",{\"1\":{\"174\":1}}],[\"主从模式基础上加入哨兵节点\",{\"1\":{\"174\":1}}],[\"主从模式\",{\"1\":{\"174\":1}}],[\"主节点实现写操作\",{\"1\":{\"174\":1}}],[\"主要用于字段和方法上的注入\",{\"1\":{\"60\":1}}],[\"主要用于构建\",{\"1\":{\"53\":1}}],[\"主要是跟踪垃圾回收\",{\"1\":{\"21\":1}}],[\"逗号运算符\",{\"1\":{\"172\":1}}],[\"7\",{\"1\":{\"172\":1}}],[\"6\",{\"1\":{\"172\":1,\"202\":1}}],[\"60l\",{\"1\":{\"9\":1}}],[\"5\",{\"1\":{\"172\":1}}],[\"4\",{\"1\":{\"172\":1}}],[\"404\",{\"1\":{\"209\":1}}],[\"40\",{\"1\":{\"125\":1}}],[\"算数运算符\",{\"1\":{\"172\":1}}],[\"算术运算符优先级\",{\"1\":{\"165\":1}}],[\"算术运算符\",{\"0\":{\"165\":1}}],[\"小提示\",{\"0\":{\"197\":1}}],[\"小括号\",{\"1\":{\"172\":1}}],[\"小数\",{\"1\":{\"94\":1}}],[\"顺序\",{\"0\":{\"188\":1},\"1\":{\"172\":1}}],[\"短路条件\",{\"1\":{\"170\":1}}],[\"真变假\",{\"1\":{\"169\":1}}],[\"取反\",{\"1\":{\"169\":1}}],[\"取模\",{\"1\":{\"165\":1}}],[\"日常用法\",{\"1\":{\"169\":1}}],[\"逻辑非\",{\"1\":{\"169\":1}}],[\"逻辑或\",{\"1\":{\"169\":1}}],[\"逻辑与\",{\"1\":{\"169\":1}}],[\"逻辑运算符中断\",{\"0\":{\"171\":1}}],[\"逻辑运算符短路\",{\"0\":{\"170\":1}}],[\"逻辑运算符\",{\"0\":{\"169\":1},\"1\":{\"172\":1}}],[\"逻辑上的视图\",{\"1\":{\"65\":1}}],[\"左边为true就短路\",{\"1\":{\"170\":1}}],[\"左边为false就短路\",{\"1\":{\"170\":1}}],[\"左边是否小于或等于右边\",{\"1\":{\"168\":1}}],[\"左边是否小于右边\",{\"1\":{\"168\":1}}],[\"左边是否大于或等于右边\",{\"1\":{\"168\":1}}],[\"左边是否大于右边\",{\"1\":{\"168\":1}}],[\"左右两边是否不全等\",{\"1\":{\"168\":1}}],[\"左右两边是否类型和值都相等\",{\"1\":{\"168\":1}}],[\"左右两边是否相等\",{\"1\":{\"168\":1}}],[\"左值警告\",{\"1\":{\"166\":1}}],[\"独立使用二者并无差别\",{\"1\":{\"167\":1}}],[\"先加载rdb内容\",{\"1\":{\"182\":1}}],[\"先\",{\"1\":{\"172\":2}}],[\"先运算后自增\",{\"1\":{\"167\":1}}],[\"先自增后运算\",{\"1\":{\"167\":1}}],[\"先乘除取模后加减\",{\"1\":{\"165\":1}}],[\"前置自增与后置自增\",{\"1\":{\"167\":1}}],[\"前置\",{\"1\":{\"167\":1}}],[\"前置处理\",{\"1\":{\"61\":1}}],[\"赋值为0\",{\"1\":{\"171\":1}}],[\"赋值运算符是把右边的值赋予左边\",{\"1\":{\"166\":1}}],[\"赋值运算符\",{\"0\":{\"166\":1},\"1\":{\"172\":1}}],[\"赋值后才能判断\",{\"1\":{\"94\":1}}],[\"求商\",{\"1\":{\"165\":1}}],[\"求积\",{\"1\":{\"165\":1}}],[\"求差\",{\"1\":{\"165\":1}}],[\"求和\",{\"1\":{\"165\":1}}],[\"运算符优先级\",{\"0\":{\"172\":1}}],[\"运算符\",{\"0\":{\"164\":1},\"1\":{\"172\":1}}],[\"绑定队列\",{\"1\":{\"163\":1}}],[\"监听容器\",{\"1\":{\"163\":1}}],[\"监控和报警\",{\"1\":{\"161\":1}}],[\"消费者确认\",{\"1\":{\"163\":1}}],[\"消息从队列投递到消费者的过程中可能会丢失\",{\"1\":{\"163\":1}}],[\"消息从生产者发送到消息队列的过程中可能会丢失\",{\"1\":{\"160\":1}}],[\"消息已经到达队列\",{\"1\":{\"162\":1}}],[\"消息在队列正确存储\",{\"0\":{\"162\":1}}],[\"消息在被路由到特定队列的过程中可能会丢失\",{\"1\":{\"161\":1}}],[\"消息到指定的交换机\",{\"1\":{\"160\":1}}],[\"消息丢失是一个需要特别注意的问题\",{\"1\":{\"159\":1}}],[\"消息丢失问题及解决方案\",{\"0\":{\"159\":1}}],[\"消息获取\",{\"1\":{\"158\":1}}],[\"队列投递到消费者\",{\"0\":{\"163\":1}}],[\"队列和消息都被设置为持久化\",{\"1\":{\"162\":1}}],[\"属性来实现队列的持久化\",{\"1\":{\"162\":1}}],[\"属性赋值\",{\"1\":{\"61\":1}}],[\"持久化配置\",{\"1\":{\"162\":1}}],[\"设置过期时间的键\",{\"1\":{\"184\":4}}],[\"设置监控和报警机制\",{\"1\":{\"161\":1}}],[\"设计模式的\",{\"1\":{\"65\":1}}],[\"路由失败通知\",{\"1\":{\"161\":1}}],[\"信息路由到队列\",{\"0\":{\"161\":1}}],[\"信息到\",{\"0\":{\"160\":1}}],[\"参数来控制消息的确认机制\",{\"1\":{\"160\":1}}],[\"解决方案\",{\"1\":{\"160\":1,\"161\":1,\"162\":1,\"163\":1}}],[\"解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程\",{\"1\":{\"28\":1}}],[\"解析\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"65\":1}}],[\"仅消息生产事务\",{\"1\":{\"158\":1}}],[\"仅对单例\",{\"1\":{\"72\":1}}],[\"推\",{\"1\":{\"158\":2}}],[\"推荐使用注解的方式进行统一异常处理\",{\"1\":{\"66\":1}}],[\"推荐的做法\",{\"1\":{\"10\":1}}],[\"拉\",{\"1\":{\"158\":3}}],[\"优先淘汰剩余生存时间最短的键\",{\"1\":{\"184\":1}}],[\"优先淘汰使用频率最低的键\",{\"1\":{\"184\":2}}],[\"优先淘汰最近最少使用的键\",{\"1\":{\"184\":2}}],[\"优先级\",{\"1\":{\"172\":1}}],[\"优先级队列\",{\"1\":{\"158\":1}}],[\"优点\",{\"1\":{\"182\":2}}],[\"优势\",{\"1\":{\"15\":1,\"64\":1}}],[\"延迟队列\",{\"1\":{\"158\":1}}],[\"√\",{\"1\":{\"158\":6}}],[\"×\",{\"1\":{\"158\":3}}],[\"死信队列\",{\"1\":{\"158\":1}}],[\"死锁发生的必要条件是1资源互斥2循环等待3抢占且等待4不可抢占\",{\"1\":{\"24\":1}}],[\"死锁是在并发条件下\",{\"1\":{\"24\":1}}],[\"死锁\",{\"0\":{\"24\":1}}],[\"高可用\",{\"0\":{\"174\":1}}],[\"高\",{\"1\":{\"158\":2}}],[\"吞吐量\",{\"1\":{\"158\":1}}],[\"吞吐量优先\",{\"1\":{\"30\":2}}],[\"kafka\",{\"1\":{\"158\":1,\"160\":1}}],[\"key\",{\"0\":{\"20\":1},\"1\":{\"19\":1}}],[\"三元运算符\",{\"0\":{\"191\":1}}],[\"三种常见消息队列的对比\",{\"1\":{\"158\":1}}],[\"三大消息队列区别\",{\"0\":{\"158\":1}}],[\"三级缓存机制\",{\"0\":{\"72\":1}}],[\"匿名内部类\",{\"0\":{\"156\":1}}],[\"<=\",{\"1\":{\"172\":1}}],[\"<\",{\"1\":{\"168\":1,\"172\":1}}],[\"<接口名\",{\"1\":{\"155\":1}}],[\"<>\",{\"1\":{\"125\":1}}],[\"修改接口时需要修改所有实现该接口的类\",{\"1\":{\"155\":1}}],[\"修饰\",{\"1\":{\"132\":1}}],[\"修饰的方法可以放入接口中\",{\"1\":{\"155\":1}}],[\"修饰的\",{\"1\":{\"28\":1}}],[\"新特性\",{\"0\":{\"155\":1}}],[\"新生代\",{\"1\":{\"30\":4}}],[\"8\",{\"0\":{\"155\":1},\"1\":{\"172\":1}}],[\"访问范围\",{\"1\":{\"153\":1}}],[\"访问修饰符\",{\"1\":{\"153\":1}}],[\"访问权限\",{\"0\":{\"153\":1}}],[\"适合小规模数据恢复\",{\"1\":{\"182\":1}}],[\"适合操作文本文件时使用\",{\"1\":{\"152\":1}}],[\"适合操作文本文件之外的文件\",{\"1\":{\"152\":1}}],[\"适用范围\",{\"1\":{\"184\":1}}],[\"适用于所有键\",{\"1\":{\"184\":3}}],[\"适用于记录不固定数据\",{\"1\":{\"144\":1}}],[\"适用于记录固定表单数据\",{\"1\":{\"144\":1}}],[\"适用于需要直接返回数据而不是视图的\",{\"1\":{\"53\":1}}],[\"适用于构建和管理微服务架构\",{\"1\":{\"50\":1}}],[\"适用于构建\",{\"1\":{\"49\":1}}],[\"适用于构建独立的\",{\"1\":{\"48\":1}}],[\"适用于\",{\"1\":{\"30\":1}}],[\"适用于后台运算\",{\"1\":{\"30\":2}}],[\"适用于单核\",{\"1\":{\"30\":2}}],[\"适用于生产者与消费者速度相匹配的场景\",{\"1\":{\"15\":1}}],[\"适用于任务直接提交给线程而不进行排队的场景\",{\"1\":{\"15\":1}}],[\"适用于任务量较大的场景\",{\"1\":{\"14\":1}}],[\"适用于固定数量任务的排队处理\",{\"1\":{\"13\":1}}],[\"适用场景\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"30\":1}}],[\"存储能力有限\",{\"1\":{\"174\":1}}],[\"存储引擎的区别\",{\"0\":{\"119\":1}}],[\"存在位置\",{\"1\":{\"152\":1}}],[\"否则会死循环\",{\"1\":{\"193\":1}}],[\"否\",{\"1\":{\"152\":1}}],[\"操作系统会通知程序\",{\"1\":{\"181\":1}}],[\"操作\",{\"1\":{\"181\":2}}],[\"操作完成时不能做其他事情\",{\"1\":{\"179\":1}}],[\"操作基本单元\",{\"1\":{\"152\":1}}],[\"操作时会进行启发式清理和探测式清理\",{\"1\":{\"20\":1}}],[\"编译器要求程序必须捕获或抛出这种异常\",{\"1\":{\"151\":1}}],[\"分支\",{\"0\":{\"189\":1}}],[\"分区容错性\",{\"1\":{\"175\":1}}],[\"分布式cap原理\",{\"0\":{\"175\":1}}],[\"分为\",{\"1\":{\"151\":1}}],[\"分别使用了读写两把锁\",{\"1\":{\"14\":1}}],[\"异常类型及原理\",{\"0\":{\"151\":1}}],[\"异常处理类用于集中处理应用程序中的异常\",{\"1\":{\"79\":1}}],[\"异常处理类\",{\"0\":{\"79\":1}}],[\"代码\",{\"1\":{\"199\":1}}],[\"代码n\",{\"1\":{\"192\":1}}],[\"代码3\",{\"1\":{\"192\":1}}],[\"代码2\",{\"1\":{\"192\":1}}],[\"代码1\",{\"1\":{\"192\":1}}],[\"代码块和静态导包\",{\"1\":{\"148\":1}}],[\"代理类需要有被代理类的成员变量\",{\"1\":{\"31\":1}}],[\"代理类与被代理类实现相同接口\",{\"1\":{\"31\":1}}],[\"关系运算符\",{\"1\":{\"172\":1}}],[\"关键字\",{\"0\":{\"148\":1}}],[\"关于\",{\"0\":{\"0\":1,\"2\":1}}],[\"那就在常量池中创建一个指向该字符串对象的引用\",{\"1\":{\"147\":1}}],[\"那么在该用户的上下文中\",{\"1\":{\"198\":1}}],[\"那么在没有其他强引用指向这个值的情况下\",{\"1\":{\"21\":1}}],[\"那么两次读取的数据数量可能不一致\",{\"1\":{\"114\":1}}],[\"那么两次读取的数据可能不一致\",{\"1\":{\"113\":1}}],[\"那么读取到的数据就是无效的\",{\"1\":{\"112\":1}}],[\"那么这些信息可能会被重用的线程意外地继承\",{\"1\":{\"22\":1}}],[\"那么这个仅被弱引用的对象在下次垃圾回收\",{\"1\":{\"20\":1}}],[\"更新变量\",{\"0\":{\"203\":1},\"1\":{\"203\":1}}],[\"更省空间\",{\"1\":{\"143\":1}}],[\"更容易保证线程安全\",{\"1\":{\"64\":1}}],[\"覆盖父类方法\",{\"1\":{\"140\":1}}],[\"同步到磁盘中防止数据丢失\",{\"1\":{\"177\":1}}],[\"同时还有跳跃表\",{\"1\":{\"177\":1}}],[\"同时由于单线程\",{\"1\":{\"177\":1}}],[\"同时会定期持久化\",{\"1\":{\"177\":1}}],[\"同时只能存在一个\",{\"1\":{\"21\":1,\"22\":1}}],[\"同包其他类\",{\"1\":{\"153\":3}}],[\"同样的一个方法能够根据输入数据的不同\",{\"1\":{\"139\":1}}],[\"重放增量aof日志\",{\"1\":{\"182\":1}}],[\"重启时\",{\"1\":{\"182\":1}}],[\"重找\",{\"1\":{\"175\":1}}],[\"重写写入aof文件前一刻内存做rdb快照处理\",{\"1\":{\"182\":1}}],[\"重写后比较对象的内容是否相同\",{\"1\":{\"146\":1}}],[\"重写前跟==一致\",{\"1\":{\"146\":1}}],[\"重写\",{\"0\":{\"138\":1,\"140\":1}}],[\"重载\",{\"0\":{\"138\":1,\"139\":1}}],[\"拆箱\",{\"0\":{\"137\":1}}],[\"装箱\",{\"0\":{\"136\":1}}],[\"由于不可变\",{\"1\":{\"133\":1}}],[\"值3\",{\"1\":{\"192\":1}}],[\"值2\",{\"1\":{\"192\":1}}],[\"值1\",{\"1\":{\"192\":1}}],[\"值是\",{\"1\":{\"132\":1}}],[\"值可能会在任何时候被垃圾回收器回收\",{\"1\":{\"21\":1}}],[\"拷贝引用\",{\"1\":{\"128\":1}}],[\"浅拷贝会直接复制内部对象的引用地址\",{\"1\":{\"130\":1}}],[\"浅拷贝\",{\"0\":{\"127\":1,\"130\":1}}],[\"深拷贝\",{\"0\":{\"127\":1,\"129\":1}}],[\"子类\",{\"1\":{\"153\":2}}],[\"子句中的列表过大时\",{\"1\":{\"125\":1}}],[\"子线程就可以访问到父线程中\",{\"1\":{\"22\":1}}],[\"子线程\",{\"1\":{\"22\":1}}],[\"隐式类型转换\",{\"1\":{\"125\":1}}],[\"隐式转换\",{\"0\":{\"108\":1}}],[\"开头的\",{\"1\":{\"125\":1}}],[\">=\",{\"1\":{\"168\":2,\"172\":1}}],[\">\",{\"1\":{\"125\":1,\"155\":1,\"168\":1,\"172\":1,\"180\":1}}],[\"两边有范围查询\",{\"1\":{\"125\":1}}],[\"两个不同的引用指向同一个对象\",{\"1\":{\"128\":1}}],[\"两个不同的threadlocal\",{\"1\":{\"21\":1,\"22\":1}}],[\"两个线程互相等待对方资源而进入无尽等待中\",{\"1\":{\"24\":1}}],[\"查询\",{\"1\":{\"125\":1}}],[\"查询中使用了\",{\"1\":{\"125\":1}}],[\"查询结果可以在二级索引获取\",{\"1\":{\"118\":1}}],[\"对索引列进行函数操作\",{\"1\":{\"125\":1}}],[\"对象会拦截方法\",{\"1\":{\"90\":1}}],[\"对象或代理对象\",{\"1\":{\"72\":1}}],[\"对象\",{\"1\":{\"20\":1}}],[\"索引会失效\",{\"1\":{\"125\":2}}],[\"索引无法使用\",{\"1\":{\"125\":1}}],[\"索引列参与计算\",{\"1\":{\"125\":1}}],[\"索引失效\",{\"0\":{\"125\":1}}],[\"索引覆盖\",{\"0\":{\"118\":1}}],[\"且数字不能开头\",{\"1\":{\"206\":1}}],[\"且不需要事务处理\",{\"1\":{\"124\":1}}],[\"且叶子节点保存所有行数据的索引\",{\"1\":{\"116\":1}}],[\"应选择\",{\"1\":{\"124\":1}}],[\"应用程序会一直发起\",{\"1\":{\"180\":1}}],[\"应用程序发起\",{\"1\":{\"179\":1}}],[\"应用中\",{\"1\":{\"66\":1}}],[\"应用中开发\",{\"1\":{\"51\":1}}],[\"应用启动\",{\"1\":{\"57\":1}}],[\"应用的整个生命周期中\",{\"1\":{\"75\":1}}],[\"应用的配置过程\",{\"1\":{\"56\":1}}],[\"应用的初始搭建和开发过程\",{\"1\":{\"48\":1}}],[\"应用时\",{\"1\":{\"51\":1}}],[\"应用\",{\"1\":{\"48\":1,\"49\":2,\"54\":1}}],[\"尤其是在处理大量数据时\",{\"1\":{\"124\":1}}],[\"性能更佳\",{\"1\":{\"143\":1}}],[\"性能最差\",{\"1\":{\"134\":1}}],[\"性能方面\",{\"0\":{\"134\":1,\"143\":1}}],[\"性能\",{\"0\":{\"124\":1}}],[\"隔离性和持久性\",{\"1\":{\"123\":1}}],[\"隔离级别\",{\"0\":{\"115\":1}}],[\"完全复制整个对象\",{\"1\":{\"129\":1}}],[\"完全支持\",{\"1\":{\"123\":1}}],[\"完成自动配置\",{\"1\":{\"57\":1}}],[\"外键约束或者需要更好的数据完整性和一致性\",{\"1\":{\"124\":1}}],[\"外键支持\",{\"0\":{\"122\":1},\"1\":{\"119\":1}}],[\"外部化配置等\",{\"1\":{\"48\":1}}],[\"锁定级别\",{\"0\":{\"121\":1},\"1\":{\"119\":1}}],[\"锁机制\",{\"1\":{\"16\":1}}],[\"减少了线程之间的切换开销\",{\"1\":{\"181\":1}}],[\"减少了内存泄漏的风险\",{\"1\":{\"23\":1}}],[\"减少回表次数\",{\"0\":{\"118\":1}}],[\"之后需要回表走聚簇索引\",{\"1\":{\"117\":1}}],[\"叶子节点存储的是聚簇索引的字段\",{\"1\":{\"117\":1}}],[\"二级索引\",{\"0\":{\"117\":1}}],[\"非聚簇索引\",{\"0\":{\"117\":1}}],[\"称之为聚簇索引\",{\"1\":{\"116\":1}}],[\"聚簇索引\",{\"0\":{\"116\":1}}],[\"串行化\",{\"1\":{\"115\":1}}],[\"串行回收\",{\"1\":{\"30\":2}}],[\"读写速度快\",{\"1\":{\"177\":1}}],[\"读已提交\",{\"1\":{\"115\":1}}],[\"读未提交\",{\"1\":{\"115\":1}}],[\"读取\",{\"1\":{\"57\":1}}],[\"读取meta\",{\"1\":{\"56\":2}}],[\"幻读\",{\"0\":{\"114\":1}}],[\"影响数据的完整性\",{\"1\":{\"114\":1}}],[\"影响数据的一致性\",{\"1\":{\"113\":1}}],[\"影响\",{\"1\":{\"112\":1,\"113\":1,\"114\":1}}],[\"一段时间将内存数据以快照形式保存在磁盘中\",{\"1\":{\"182\":1}}],[\"一个线程可以管理多个网络连接\",{\"1\":{\"181\":1}}],[\"一个事务读取到了另一个事务未提交的数据\",{\"1\":{\"112\":1}}],[\"一真即真\",{\"1\":{\"169\":1}}],[\"一假即假\",{\"1\":{\"169\":1}}],[\"一元运算符\",{\"0\":{\"167\":1},\"1\":{\"172\":1}}],[\"一致性\",{\"1\":{\"123\":1,\"175\":1}}],[\"一般来说\",{\"1\":{\"11\":2}}],[\"脏读\",{\"0\":{\"112\":1}}],[\"显式转换\",{\"0\":{\"109\":1}}],[\"显示分离来组织代码\",{\"1\":{\"65\":1}}],[\"除了+以外的算术运算符\",{\"1\":{\"108\":1}}],[\"检测数据类型\",{\"0\":{\"106\":1}}],[\"检查定义了init\",{\"1\":{\"61\":1}}],[\"检查实现了initializingbean接口的\",{\"1\":{\"61\":1}}],[\"检查实现了aware接口的\",{\"1\":{\"61\":1}}],[\"引用拷贝\",{\"0\":{\"127\":1,\"128\":1}}],[\"引用数据类型\",{\"0\":{\"102\":1},\"1\":{\"145\":1}}],[\"引入\",{\"1\":{\"56\":2}}],[\"$组成\",{\"1\":{\"206\":1}}],[\"$\",{\"1\":{\"98\":1}}],[\"模型\",{\"1\":{\"178\":1,\"179\":1,\"180\":1}}],[\"模型决定了程序如何处理输入和输出操作\",{\"1\":{\"178\":1}}],[\"模板字符串\",{\"0\":{\"98\":1}}],[\"模式下与\",{\"1\":{\"30\":1}}],[\"模式\",{\"1\":{\"30\":2}}],[\"岸本齐史\",{\"1\":{\"97\":1,\"98\":1}}],[\"火影忍者\",{\"1\":{\"97\":1,\"98\":1}}],[\"神龟\",{\"1\":{\"97\":1}}],[\"忍者\",{\"1\":{\"97\":1}}],[\"字母严格区分大小写\",{\"1\":{\"206\":1}}],[\"字母\",{\"1\":{\"206\":1}}],[\"字节\",{\"1\":{\"152\":1}}],[\"字节流\",{\"1\":{\"152\":1}}],[\"字节流与字符流的区别\",{\"0\":{\"152\":1}}],[\"字符\",{\"1\":{\"152\":1}}],[\"字符流\",{\"1\":{\"152\":1}}],[\"字符串不加单引号\",{\"1\":{\"125\":1}}],[\"字符串拼接\",{\"0\":{\"97\":1}}],[\"字符串使用英文状态下的\",{\"1\":{\"96\":1}}],[\"字符串含义\",{\"0\":{\"96\":1}}],[\"字段和参数上使用\",{\"1\":{\"60\":1}}],[\"字段不会设置\",{\"1\":{\"28\":1}}],[\"负数\",{\"1\":{\"94\":1}}],[\"整个redis功能都不能使用\",{\"1\":{\"174\":1}}],[\"整数\",{\"1\":{\"94\":1}}],[\"整堆收集器\",{\"1\":{\"30\":1}}],[\"介绍\",{\"1\":{\"94\":1}}],[\"抛异常\",{\"1\":{\"89\":1}}],[\"他是存储mysql里面数据的基本结构\",{\"1\":{\"116\":1}}],[\"他分7种\",{\"1\":{\"89\":1}}],[\"他将向下在加载器对应路径查找\",{\"1\":{\"32\":1}}],[\"产生传播行为\",{\"1\":{\"89\":1}}],[\"事务支持\",{\"0\":{\"120\":1},\"1\":{\"160\":1}}],[\"事务传播是指一个事务调用另一个事务时\",{\"1\":{\"89\":1}}],[\"事务管理\",{\"0\":{\"87\":1}}],[\"让事务在遇到非运行时异常时也回滚\",{\"1\":{\"88\":1}}],[\"让一个线程强制获取资源\",{\"1\":{\"24\":1}}],[\"来实现数据的冗余和备份\",{\"1\":{\"174\":1}}],[\"来实现\",{\"1\":{\"163\":1}}],[\"来设置消息的持久化\",{\"1\":{\"162\":1}}],[\"来指定主键的生成策略\",{\"1\":{\"85\":1}}],[\"来管理一个超时未响应的连接队列\",{\"1\":{\"16\":1}}],[\"状态时\",{\"1\":{\"78\":1}}],[\"唯一\",{\"1\":{\"75\":1}}],[\"描述\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"184\":1}}],[\"调用的过程\",{\"1\":{\"180\":1}}],[\"调用\",{\"1\":{\"180\":3}}],[\"调用后\",{\"1\":{\"179\":1}}],[\"调用者\",{\"1\":{\"89\":1}}],[\"调用objectfactory的\",{\"1\":{\"73\":1}}],[\"调用handleradapter适配器执行handler\",{\"1\":{\"65\":1}}],[\"生效\",{\"1\":{\"72\":1}}],[\"生产级别的\",{\"1\":{\"48\":1}}],[\"切面代理\",{\"1\":{\"72\":1}}],[\"第二种b在运行时不需要事务\",{\"1\":{\"89\":1}}],[\"第二级缓存\",{\"1\":{\"72\":1}}],[\"第一种b在运行时需要事务\",{\"1\":{\"89\":1}}],[\"第一级缓存\",{\"1\":{\"72\":1}}],[\"第三级缓存\",{\"1\":{\"72\":1}}],[\"保存尚未经过完整生命周期的\",{\"1\":{\"72\":1}}],[\"保存已经经过完整生命周期的\",{\"1\":{\"72\":1}}],[\"保证服务一直可用\",{\"1\":{\"175\":1}}],[\"保证\",{\"1\":{\"33\":1}}],[\"导致无法完成初始化\",{\"1\":{\"70\":1}}],[\"导致数据错乱\",{\"1\":{\"22\":1}}],[\"相当于一个空间\",{\"1\":{\"200\":1}}],[\"相等运算符\",{\"1\":{\"172\":1}}],[\"相互引用\",{\"1\":{\"70\":1}}],[\"相同方法\",{\"1\":{\"31\":1}}],[\"指的是两个或多个\",{\"1\":{\"70\":1}}],[\"示例\",{\"0\":{\"69\":1}}],[\"等用到key的时候\",{\"1\":{\"183\":1}}],[\"等内核把数据准备好了\",{\"1\":{\"180\":1}}],[\"等待数据从内核空间拷贝到用户空间的这段时间里\",{\"1\":{\"180\":1}}],[\"等都会把数据转成数字类型\",{\"1\":{\"108\":1}}],[\"等\",{\"1\":{\"67\":1}}],[\"等服务器\",{\"1\":{\"48\":1}}],[\"具体会使用到\",{\"1\":{\"66\":1}}],[\"具体来说\",{\"1\":{\"22\":1}}],[\"统一异常处理是一种常见的需求\",{\"1\":{\"66\":1}}],[\"统一异常处理\",{\"0\":{\"66\":1}}],[\"浏览器\",{\"1\":{\"65\":1}}],[\"包含了数据模型以及相应的视图信息\",{\"1\":{\"65\":1}}],[\"包括这个对象所包含的内部对象\",{\"1\":{\"129\":1}}],[\"包括dom和bom\",{\"1\":{\"37\":1}}],[\"包括任务统计\",{\"1\":{\"18\":1}}],[\"返回响应\",{\"1\":{\"65\":1}}],[\"返回的数据对象\",{\"1\":{\"65\":1}}],[\"返回一个modelandview对象给dispatcherservlet\",{\"1\":{\"65\":1}}],[\"返回\",{\"1\":{\"65\":1}}],[\"返回类型\",{\"1\":{\"53\":1,\"54\":1}}],[\"执行mappedstatement\",{\"1\":{\"90\":1}}],[\"执行\",{\"1\":{\"65\":1}}],[\"执行配置\",{\"1\":{\"57\":1}}],[\"username\",{\"1\":{\"204\":1}}],[\"usage\",{\"1\":{\"61\":1}}],[\"upper\",{\"1\":{\"125\":1}}],[\"uncommitted\",{\"1\":{\"115\":1}}],[\"undefined\",{\"0\":{\"100\":1},\"1\":{\"170\":1}}],[\"url\",{\"1\":{\"65\":1}}],[\"匹配查找能处理请求的handler\",{\"1\":{\"65\":1}}],[\"匹配\",{\"1\":{\"65\":1}}],[\"hykari对sharingspares比druid更适配\",{\"1\":{\"199\":1}}],[\"hash\",{\"1\":{\"176\":1}}],[\"handlecustomexception\",{\"1\":{\"69\":1}}],[\"handleexception\",{\"1\":{\"69\":1}}],[\"handler\",{\"1\":{\"69\":1}}],[\"handler完成对用户请求的处理后\",{\"1\":{\"65\":1}}],[\"handleradapter\",{\"1\":{\"65\":1}}],[\"handlermapping\",{\"1\":{\"65\":2}}],[\"httpstatus\",{\"1\":{\"69\":2}}],[\"http\",{\"1\":{\"52\":1,\"54\":1,\"55\":1,\"65\":1,\"77\":3,\"78\":2}}],[\"拦截\",{\"1\":{\"65\":1}}],[\"发送方确认模式\",{\"1\":{\"160\":1}}],[\"发送\",{\"1\":{\"65\":1}}],[\"发生死锁时\",{\"1\":{\"24\":1}}],[\"简写\",{\"1\":{\"166\":1}}],[\"简称\",{\"1\":{\"65\":1}}],[\"简化了\",{\"1\":{\"48\":1}}],[\"工作原理\",{\"0\":{\"65\":1}}],[\"工作流程总结\",{\"0\":{\"57\":1}}],[\"就像它是类自己的方法一样\",{\"1\":{\"149\":1}}],[\"就直接返回该引用\",{\"1\":{\"147\":1}}],[\"就可能引发线程安全问题\",{\"1\":{\"63\":1}}],[\"就会导致内存泄漏\",{\"1\":{\"20\":1}}],[\"问题\",{\"1\":{\"63\":1}}],[\"有括号先算括号内的\",{\"1\":{\"165\":1}}],[\"有抛异常\",{\"1\":{\"89\":1}}],[\"有挂起\",{\"1\":{\"89\":1}}],[\"有融入\",{\"1\":{\"89\":1}}],[\"有状态\",{\"0\":{\"63\":1},\"1\":{\"63\":1}}],[\"有些对象已经不再使用了\",{\"1\":{\"20\":1}}],[\"则调用该方法进行销毁\",{\"1\":{\"61\":1}}],[\"将所有写操作追加到一个日志文件中\",{\"1\":{\"182\":1}}],[\"将一个redis中的数据复制到其他节点\",{\"1\":{\"174\":1}}],[\"将会触发一个回调函数\",{\"1\":{\"161\":1}}],[\"将指定的字符串对象的引用保存在字符串常量池中\",{\"1\":{\"147\":1}}],[\"将包装类型转换为基本数据类型\",{\"1\":{\"137\":1}}],[\"将基本类型用它们对应的引用类型包装起来\",{\"1\":{\"136\":1}}],[\"将这个前期暴露对象放入第二级缓存中\",{\"1\":{\"73\":1}}],[\"将渲染后的视图返回给请求者\",{\"1\":{\"65\":1}}],[\"将请求涉及到的拦截器和handler一起封装\",{\"1\":{\"65\":1}}],[\"将调用其destroy方法\",{\"1\":{\"61\":1}}],[\"将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构\",{\"1\":{\"27\":1}}],[\"销毁前处理\",{\"1\":{\"61\":1}}],[\"后`\",{\"1\":{\"172\":1}}],[\"后+\",{\"1\":{\"172\":1}}],[\"后置\",{\"1\":{\"167\":1}}],[\"后置处理\",{\"1\":{\"61\":1}}],[\"后面set的值\",{\"1\":{\"21\":1,\"22\":1}}],[\"实例的生命周期和可见性\",{\"1\":{\"74\":1}}],[\"实例\",{\"1\":{\"72\":2,\"75\":1,\"76\":1}}],[\"实例化\",{\"1\":{\"61\":1}}],[\"实现独立回滚\",{\"1\":{\"89\":1}}],[\"实现了disposablebean\",{\"1\":{\"61\":1}}],[\"实现方案时gdk给我们提供的proxy类\",{\"1\":{\"31\":1}}],[\"根据id构建\",{\"1\":{\"116\":1}}],[\"根据\",{\"1\":{\"65\":1}}],[\"根据名称进行匹配\",{\"1\":{\"60\":1}}],[\"根据类型进行匹配\",{\"1\":{\"60\":1}}],[\"qualifier注解来显式指定名称\",{\"1\":{\"60\":1}}],[\"qqmail\",{\"1\":{\"1\":1,\"4\":1}}],[\"自动处理字符编码和解码\",{\"1\":{\"152\":1}}],[\"自动拆装箱\",{\"0\":{\"135\":1}}],[\"自动配置类的工作原理\",{\"1\":{\"56\":1}}],[\"自动配置类\",{\"0\":{\"56\":1}}],[\"自定义性更强\",{\"1\":{\"59\":1}}],[\"管理的组件\",{\"1\":{\"59\":1}}],[\"标识符\",{\"1\":{\"201\":1}}],[\"标识该类为一个\",{\"1\":{\"59\":1}}],[\"标志来实现\",{\"1\":{\"160\":1}}],[\"标记\",{\"1\":{\"30\":4}}],[\"符合条件的配置类被执行\",{\"1\":{\"57\":1}}],[\"符号\",{\"1\":{\"40\":1,\"41\":1,\"169\":1,\"170\":1}}],[\"启动应用\",{\"1\":{\"57\":1}}],[\"启迪他人思想火花\",{\"1\":{\"3\":1}}],[\"注解指定主键生成策略\",{\"1\":{\"85\":1}}],[\"注解指定该方法处理哪种异常\",{\"1\":{\"68\":1}}],[\"注解后\",{\"1\":{\"84\":1}}],[\"注解声明不需要与数据库映射的字段\",{\"1\":{\"86\":1}}],[\"注解声明一个字段为主键\",{\"1\":{\"84\":1}}],[\"注解声明一个类对应一个数据库实体\",{\"1\":{\"83\":1}}],[\"注解声明异常处理方法\",{\"1\":{\"81\":1}}],[\"注解用于声明事务管理\",{\"1\":{\"88\":1}}],[\"注解用于声明一个由\",{\"1\":{\"61\":1}}],[\"注解用于定义全局异常处理类\",{\"1\":{\"80\":1}}],[\"注解作用于方法\",{\"1\":{\"59\":1}}],[\"注解作用于类\",{\"1\":{\"59\":1}}],[\"注解概览\",{\"0\":{\"58\":1}}],[\"注解进行条件判断\",{\"1\":{\"57\":1}}],[\"注解\",{\"1\":{\"56\":1,\"58\":1}}],[\"注意区分\",{\"1\":{\"34\":1}}],[\"该文件中列出了所有自动配置类\",{\"1\":{\"56\":1}}],[\"其他包\",{\"1\":{\"153\":1}}],[\"其他\",{\"1\":{\"151\":1}}],[\"其他线程不能同时写入该表\",{\"1\":{\"121\":1}}],[\"其他事务插入或删除了数据\",{\"1\":{\"114\":1}}],[\"其他事务对数据进行了修改\",{\"1\":{\"113\":1}}],[\"其工作原理时jdk动态代理\",{\"1\":{\"90\":1}}],[\"其核心思想是通过将业务逻辑\",{\"1\":{\"65\":1}}],[\"其目的是使自动配置类最后执行\",{\"1\":{\"56\":1}}],[\"其关联的数据值也会一直存在\",{\"1\":{\"21\":1}}],[\"容器\",{\"1\":{\"200\":1}}],[\"容器都会创建一个新的实例\",{\"1\":{\"76\":1}}],[\"容器启动后\",{\"1\":{\"61\":1}}],[\"容器启动时\",{\"1\":{\"56\":1}}],[\"容器管理的\",{\"1\":{\"61\":1,\"75\":1}}],[\"容器会解析\",{\"1\":{\"56\":1}}],[\"容量\",{\"1\":{\"16\":1}}],[\"它允许一个线程监视多个文件描述符\",{\"1\":{\"181\":1}}],[\"它们在处理并发请求时有不同的行为和性能特点\",{\"1\":{\"178\":1}}],[\"它们在事务支持\",{\"1\":{\"119\":1}}],[\"它可以让计算机变得有记忆\",{\"1\":{\"200\":1}}],[\"它可以捕获控制器层抛出的异常\",{\"1\":{\"80\":1}}],[\"它可以指定所要应用的组件\",{\"1\":{\"67\":1}}],[\"它有助于集中管理和响应应用程序中的各种异常\",{\"1\":{\"66\":1}}],[\"它负责自动配置\",{\"1\":{\"56\":1}}],[\"它简化了\",{\"1\":{\"56\":1}}],[\"以确定哪些文件描述符已经准备好进行\",{\"1\":{\"181\":1}}],[\"以及通过\",{\"1\":{\"162\":1}}],[\"以便在路由失败时及时得到通知\",{\"1\":{\"161\":1}}],[\"以\",{\"1\":{\"125\":1}}],[\"以下是消息在不同阶段可能丢失的原因以及相应的解决方案\",{\"1\":{\"159\":1}}],[\"以下是kafka\",{\"1\":{\"158\":1}}],[\"以下是几种常见的作用域\",{\"1\":{\"74\":1}}],[\"以下是一些常用的注解及其说明\",{\"1\":{\"58\":1}}],[\"以下是\",{\"1\":{\"56\":1,\"61\":1}}],[\"以避免潜在的数据泄露风险\",{\"1\":{\"22\":1}}],[\"响应体中\",{\"1\":{\"55\":1}}],[\"响应速度优先\",{\"1\":{\"30\":5}}],[\"格式\",{\"1\":{\"55\":1}}],[\"格式的数据\",{\"1\":{\"53\":1}}],[\"volatile\",{\"1\":{\"184\":4}}],[\"var声明有如下弊端\",{\"1\":{\"208\":1}}],[\"varchar\",{\"0\":{\"141\":1},\"1\":{\"142\":1,\"143\":1,\"144\":1}}],[\"value\",{\"0\":{\"21\":1},\"1\":{\"7\":1,\"8\":1,\"9\":2,\"10\":2,\"19\":1,\"132\":1}}],[\"viewresolver根据逻辑视图查找实际的视图\",{\"1\":{\"65\":1}}],[\"viewresolver\",{\"1\":{\"65\":1}}],[\"view\",{\"1\":{\"54\":1,\"65\":2}}],[\"即当一个线程读取一个表时\",{\"1\":{\"121\":1}}],[\"即无需回表查\",{\"1\":{\"118\":1}}],[\"即controller\",{\"1\":{\"65\":1}}],[\"即模型数据和视图的组合\",{\"1\":{\"54\":1}}],[\"即键虽然被回收了\",{\"1\":{\"20\":1}}],[\"处理或不处理都可以\",{\"1\":{\"151\":1}}],[\"处理每个\",{\"1\":{\"77\":1}}],[\"处理循环依赖\",{\"0\":{\"73\":1}}],[\"处理\",{\"1\":{\"54\":1}}],[\"接口中可以包含方法体\",{\"1\":{\"155\":1}}],[\"接口知识\",{\"0\":{\"154\":1}}],[\"接口和\",{\"1\":{\"61\":1}}],[\"接口检查\",{\"1\":{\"61\":1}}],[\"接口\",{\"1\":{\"53\":1,\"61\":1}}],[\"xml\",{\"1\":{\"53\":1,\"55\":1}}],[\"或者\",{\"1\":{\"169\":1}}],[\"或者其成员变量不会影响其业务逻辑的对象\",{\"1\":{\"64\":1}}],[\"或\",{\"1\":{\"53\":1,\"55\":1,\"96\":1,\"125\":2,\"163\":1,\"181\":1}}],[\"请输入一个属\",{\"1\":{\"171\":1}}],[\"请输入你的姓名\",{\"1\":{\"45\":1}}],[\"请求所需的临时数据\",{\"1\":{\"77\":1}}],[\"请求结束后\",{\"1\":{\"77\":1}}],[\"请求相同\",{\"1\":{\"77\":1}}],[\"请求都会产生一个新的\",{\"1\":{\"77\":1}}],[\"请求并返回响应\",{\"1\":{\"54\":1}}],[\"请求\",{\"1\":{\"52\":1,\"65\":1}}],[\"都会把另外一个转成字符串\",{\"1\":{\"108\":1}}],[\"都用于处理\",{\"1\":{\"52\":1}}],[\"都是\",{\"1\":{\"47\":1}}],[\"本质上就是在使用\",{\"1\":{\"51\":1}}],[\"功能\",{\"1\":{\"51\":1}}],[\"层的框架\",{\"1\":{\"51\":1}}],[\"作用\",{\"1\":{\"55\":1}}],[\"作用域的\",{\"1\":{\"75\":1}}],[\"作用域\",{\"0\":{\"74\":1},\"1\":{\"30\":1}}],[\"作为\",{\"1\":{\"51\":1}}],[\"利用\",{\"1\":{\"50\":1}}],[\"依赖于\",{\"1\":{\"50\":1}}],[\"智能路由等\",{\"1\":{\"50\":1}}],[\"断路器\",{\"1\":{\"50\":1}}],[\"配置管理\",{\"1\":{\"50\":1}}],[\"配合使用\",{\"1\":{\"30\":1}}],[\"特性\",{\"1\":{\"123\":2,\"152\":1,\"158\":1}}],[\"特别是当子查询返回大量数据时\",{\"1\":{\"125\":1}}],[\"特别是对于那些有状态的\",{\"1\":{\"62\":1}}],[\"特别是需要与\",{\"1\":{\"49\":1}}],[\"特点\",{\"1\":{\"15\":1,\"16\":1,\"30\":1,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"169\":1,\"179\":1,\"180\":1,\"181\":1}}],[\"服务\",{\"1\":{\"49\":1,\"53\":1}}],[\"支持事务\",{\"1\":{\"158\":1}}],[\"支持事务处理\",{\"1\":{\"120\":1}}],[\"支持外键约束\",{\"1\":{\"122\":1}}],[\"支持行级锁定\",{\"1\":{\"121\":1}}],[\"支持以及性能方面各有特点\",{\"1\":{\"119\":1}}],[\"支持在构造函数\",{\"1\":{\"60\":1}}],[\"支持\",{\"0\":{\"123\":1},\"1\":{\"49\":1,\"158\":2}}],[\"支持有界\",{\"1\":{\"16\":1}}],[\"架构的支持\",{\"1\":{\"49\":1}}],[\"控制器\",{\"1\":{\"49\":1,\"65\":2}}],[\"控制台输出内容\",{\"1\":{\"44\":1}}],[\"视图渲染\",{\"1\":{\"65\":2}}],[\"视图\",{\"1\":{\"49\":1,\"65\":1}}],[\"专注于构建\",{\"1\":{\"49\":1}}],[\"框架通过使用三级缓存机制来处理循环依赖\",{\"1\":{\"70\":1}}],[\"框架\",{\"1\":{\"65\":1}}],[\"框架中\",{\"1\":{\"52\":1,\"58\":1,\"61\":1,\"62\":1,\"70\":1,\"74\":1,\"79\":1}}],[\"框架中的一个模块\",{\"1\":{\"49\":1}}],[\"框架集成的应用\",{\"1\":{\"49\":1}}],[\"框架的其他模块无缝集成\",{\"1\":{\"49\":1}}],[\"框架的快速开发框架\",{\"1\":{\"48\":1}}],[\"用户变量的值将被优先使用\",{\"1\":{\"198\":1}}],[\"用户空间\",{\"1\":{\"180\":1}}],[\"用户线程再发起\",{\"1\":{\"180\":1}}],[\"用于管理\",{\"1\":{\"199\":1}}],[\"用于运行\",{\"1\":{\"199\":1}}],[\"用于创建没有名称的类的实例\",{\"1\":{\"156\":1}}],[\"用于实体映射和操作\",{\"1\":{\"82\":1}}],[\"用于指定哪些异常将由特定的处理方法来处理\",{\"1\":{\"81\":1}}],[\"用于处理特定的异常类型\",{\"1\":{\"68\":1}}],[\"用于定义全局异常处理\",{\"1\":{\"67\":1}}],[\"用于显式地声明一个\",{\"1\":{\"59\":1}}],[\"用途\",{\"1\":{\"48\":1,\"49\":1,\"50\":1}}],[\"用调用者所在的线程来执行任务\",{\"1\":{\"17\":1}}],[\"无法恢复的错误\",{\"1\":{\"151\":1}}],[\"无法正确地存储和检索数据\",{\"1\":{\"21\":1}}],[\"无状态\",{\"0\":{\"64\":1},\"1\":{\"64\":2}}],[\"无需部署\",{\"1\":{\"48\":1}}],[\"定期删除\",{\"1\":{\"183\":1}}],[\"定时删除\",{\"1\":{\"183\":1}}],[\"定时线程池\",{\"0\":{\"10\":1}}],[\"定义消费者确认方法\",{\"1\":{\"163\":1}}],[\"定义了\",{\"1\":{\"74\":1}}],[\"定义了destroy\",{\"1\":{\"61\":1}}],[\"定义\",{\"1\":{\"48\":1,\"49\":1,\"50\":1,\"63\":1,\"64\":1,\"112\":1,\"113\":1,\"114\":1}}],[\"家族中的重要成员\",{\"1\":{\"47\":1}}],[\"与\",{\"0\":{\"47\":1,\"51\":1,\"52\":1,\"59\":1,\"60\":1,\"119\":1}}],[\"输入数据一样\",{\"1\":{\"140\":1}}],[\"输入语法\",{\"0\":{\"45\":1}}],[\"输入和输出语法\",{\"0\":{\"43\":1}}],[\"输出变量值\",{\"1\":{\"202\":1,\"203\":1}}],[\"输出number12\",{\"1\":{\"108\":1}}],[\"输出内容\",{\"1\":{\"44\":1}}],[\"输出语法\",{\"0\":{\"44\":1}}],[\"换行符回车会被识别为结束符\",{\"1\":{\"42\":1}}],[\"英文分号代表语句结束\",{\"1\":{\"42\":1}}],[\"块注释\",{\"0\":{\"41\":1}}],[\"++\",{\"1\":{\"167\":1,\"172\":1}}],[\"+=\",{\"1\":{\"166\":1}}],[\"+两边只要有一个字符串\",{\"1\":{\"108\":1}}],[\"+\",{\"1\":{\"40\":1,\"41\":2,\"69\":1,\"97\":2,\"108\":1,\"165\":1}}],[\"快捷键\",{\"1\":{\"40\":1,\"41\":1}}],[\"单个线程处理多个并发连接\",{\"1\":{\"177\":1}}],[\"单个master节点写\",{\"1\":{\"174\":1}}],[\"单线程减少上下文切换\",{\"1\":{\"177\":1}}],[\"单线程化的线程池\",{\"0\":{\"8\":1}}],[\"单引号和双引号可以相互嵌套\",{\"1\":{\"96\":1}}],[\"单行注释\",{\"0\":{\"40\":1}}],[\"网页特效\",{\"1\":{\"36\":1}}],[\"网络请求等\",{\"1\":{\"11\":1}}],[\"防止核心\",{\"1\":{\"33\":1}}],[\"防止生产速度大于消费速度\",{\"1\":{\"13\":1}}],[\"核心\",{\"1\":{\"33\":1}}],[\"核心线程自己定\",{\"1\":{\"10\":1}}],[\"核心线程数大小设置为\",{\"1\":{\"11\":2}}],[\"核心线程数的确定\",{\"0\":{\"11\":1}}],[\"核心线程数为\",{\"1\":{\"9\":1}}],[\"核心线程数和最大线程数都是\",{\"1\":{\"8\":1}}],[\"核心线程数与最大线程数一样\",{\"1\":{\"7\":1}}],[\"若没有会向extclassloader\",{\"1\":{\"32\":1}}],[\"双亲委派\",{\"0\":{\"32\":1}}],[\"没有就继承\",{\"1\":{\"31\":1}}],[\"没有救急线程\",{\"1\":{\"7\":1}}],[\"动态\",{\"1\":{\"31\":1}}],[\"动态代理\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"静态导包\",{\"0\":{\"149\":1}}],[\"静态\",{\"1\":{\"31\":1}}],[\"静态代理\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"面向服务端的应用\",{\"1\":{\"30\":1}}],[\"也就是交互多的场景\",{\"1\":{\"30\":1}}],[\"也无法删除\",{\"1\":{\"20\":1}}],[\"业务\",{\"1\":{\"30\":1}}],[\"break\",{\"1\":{\"192\":4,\"196\":1}}],[\"blocking\",{\"0\":{\"179\":1,\"180\":1}}],[\"bio\",{\"0\":{\"178\":1,\"179\":1},\"1\":{\"178\":1,\"179\":1}}],[\"bitmap转换\",{\"1\":{\"11\":1}}],[\"base\",{\"0\":{\"110\":1}}],[\"bad\",{\"1\":{\"69\":1}}],[\"boolean\",{\"0\":{\"99\":1}}],[\"boot\",{\"0\":{\"47\":1,\"48\":1,\"51\":1,\"56\":1},\"1\":{\"47\":1,\"48\":1,\"50\":2,\"51\":3,\"56\":3,\"57\":1}}],[\"bootstrapclassloader的缓存查找\",{\"1\":{\"32\":1}}],[\"b方法传播到a方法的事务中\",{\"1\":{\"89\":1}}],[\"b方法开启事务\",{\"1\":{\"89\":1}}],[\"byte\",{\"1\":{\"152\":1}}],[\"bytype\",{\"1\":{\"60\":1}}],[\"byname\",{\"1\":{\"60\":1}}],[\"beanpostprocessor\",{\"1\":{\"61\":2}}],[\"bean注解注册\",{\"1\":{\"59\":1}}],[\"bean\",{\"0\":{\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"74\":1},\"1\":{\"59\":4,\"61\":11,\"62\":2,\"63\":1,\"64\":2,\"70\":1,\"71\":1,\"72\":5,\"73\":2,\"74\":2,\"75\":3,\"76\":3,\"77\":3,\"78\":4}}],[\"b\",{\"1\":{\"30\":1}}],[\"清除算法\",{\"1\":{\"30\":1}}],[\"清理一部分键为\",{\"1\":{\"20\":1}}],[\"环境中\",{\"1\":{\"30\":1}}],[\"环境下的\",{\"1\":{\"30\":2}}],[\"多路复用\",{\"0\":{\"181\":1}}],[\"多路复用是一种\",{\"1\":{\"181\":1}}],[\"多路复用是\",{\"1\":{\"178\":1}}],[\"多路复用的区别\",{\"0\":{\"178\":1}}],[\"多核\",{\"1\":{\"30\":1}}],[\"多线程\",{\"0\":{\"5\":1}}],[\"压缩算法\",{\"1\":{\"30\":3}}],[\"老年代\",{\"1\":{\"30\":4}}],[\"o\",{\"0\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1},\"1\":{\"178\":3,\"179\":2,\"180\":1,\"181\":4}}],[\"or\",{\"1\":{\"125\":2}}],[\"object\",{\"0\":{\"103\":1}}],[\"old\",{\"1\":{\"30\":2}}],[\"oom\",{\"1\":{\"10\":2}}],[\"垃圾回收机制\",{\"1\":{\"200\":1}}],[\"垃圾回收时就无法清理掉这些对象\",{\"1\":{\"20\":1}}],[\"垃圾收集器\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"卸载\",{\"0\":{\"29\":1}}],[\"初始化阶段简单来说就是执行类的构造器方法\",{\"1\":{\"29\":1}}],[\"初始化\",{\"0\":{\"29\":1}}],[\"初始化时\",{\"1\":{\"13\":1}}],[\"被注解的字段在保存时不会被保存到数据库中\",{\"1\":{\"86\":1}}],[\"被注解的类将映射到数据库中的一个表\",{\"1\":{\"83\":1}}],[\"被销毁\",{\"1\":{\"77\":1,\"78\":1}}],[\"被随意篡改\",{\"1\":{\"33\":1}}],[\"被代理有接口实现就实现响应接口\",{\"1\":{\"31\":1}}],[\"被\",{\"1\":{\"28\":1,\"72\":1,\"132\":1}}],[\"被垃圾回收线程发现就会被回收\",{\"1\":{\"21\":1}}],[\"类中定义方法\",{\"1\":{\"68\":1}}],[\"类\",{\"1\":{\"67\":1}}],[\"类运行时产生\",{\"1\":{\"31\":1}}],[\"类编译时产生\",{\"1\":{\"31\":1}}],[\"类型\",{\"1\":{\"30\":1}}],[\"类型初始值是\",{\"1\":{\"28\":1}}],[\"类加载过程\",{\"0\":{\"26\":1}}],[\"文件后缀一般为rdb\",{\"1\":{\"182\":1}}],[\"文件中的自动配置类\",{\"1\":{\"57\":1}}],[\"文件中的字节流包含的信息符合当前虚拟机的要求\",{\"1\":{\"28\":1}}],[\"文件\",{\"1\":{\"48\":1}}],[\"文件读写\",{\"1\":{\"11\":1}}],[\"确保在消息处理成功后进行确认\",{\"1\":{\"163\":1}}],[\"确保消息能够被正确投递\",{\"1\":{\"163\":1}}],[\"确保消息被成功发送到消息队列\",{\"1\":{\"160\":1}}],[\"确保消费者在处理完消息后进行确认\",{\"1\":{\"163\":1}}],[\"确保交换机\",{\"1\":{\"162\":1}}],[\"确保事务的原子性\",{\"1\":{\"123\":1}}],[\"确保只有符合条件的配置类被加载\",{\"1\":{\"56\":1}}],[\"确保一个类只被加载一次\",{\"1\":{\"33\":1}}],[\"确保\",{\"1\":{\"28\":1}}],[\"确保不会因线程重用而导致数据不一致的问题\",{\"1\":{\"22\":1}}],[\"准备就绪\",{\"1\":{\"61\":1}}],[\"准备\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"验证\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"连接\",{\"0\":{\"28\":1}}],[\"加载速度快\",{\"1\":{\"182\":1}}],[\"加载速度慢\",{\"1\":{\"182\":1}}],[\"加载配置\",{\"1\":{\"57\":1}}],[\"加载\",{\"0\":{\"27\":1},\"1\":{\"56\":1}}],[\"加锁影响系统吞吐量\",{\"1\":{\"175\":1}}],[\"加锁\",{\"1\":{\"16\":1}}],[\"虚拟机\",{\"0\":{\"25\":1}}],[\"虚引用\",{\"1\":{\"21\":1}}],[\"为了解决这些问题\",{\"1\":{\"115\":1}}],[\"为了解决这个问题\",{\"1\":{\"70\":1}}],[\"为\",{\"1\":{\"61\":1}}],[\"为类中的静态字段分配内存\",{\"1\":{\"28\":1}}],[\"为不同线程设置不同的资源申请时间\",{\"1\":{\"24\":1}}],[\"为什么使用双亲委派\",{\"0\":{\"33\":1}}],[\"为什么\",{\"0\":{\"20\":1,\"21\":1}}],[\"3\",{\"1\":{\"24\":1,\"172\":1,\"174\":1}}],[\"24\",{\"1\":{\"203\":1,\"204\":1}}],[\"2000\",{\"1\":{\"125\":1}}],[\"20\",{\"1\":{\"125\":1}}],[\"2\",{\"1\":{\"24\":1,\"125\":1,\"172\":1,\"174\":2}}],[\"2n+1\",{\"1\":{\"11\":1}}],[\"通常用户变量的优先级高于系统变量\",{\"1\":{\"198\":1}}],[\"通常用于\",{\"1\":{\"54\":1}}],[\"通常使用i++\",{\"1\":{\"167\":1}}],[\"通常是浏览器\",{\"1\":{\"65\":1}}],[\"通常建议在任务执行完毕后清除inheritablethreadlocal的值\",{\"1\":{\"22\":1}}],[\"通过使用\",{\"1\":{\"181\":1}}],[\"通过轮询操作\",{\"1\":{\"180\":1}}],[\"通过hash计算确定存取的位置\",{\"1\":{\"174\":1}}],[\"通过这种方式\",{\"1\":{\"73\":1}}],[\"通过在构造函数注入上添加\",{\"1\":{\"71\":1}}],[\"通过定义一个或多个\",{\"1\":{\"67\":1}}],[\"通过反射机制实例化\",{\"1\":{\"61\":1}}],[\"通过\",{\"1\":{\"56\":3}}],[\"通过trylock\",{\"1\":{\"24\":1}}],[\"通过算法有序获取锁\",{\"1\":{\"24\":1}}],[\"如age和age是不同变量\",{\"1\":{\"206\":1}}],[\"如何分片\",{\"1\":{\"174\":1}}],[\"如何避免\",{\"1\":{\"24\":1}}],[\"如昵称\",{\"1\":{\"144\":1}}],[\"如身份证\",{\"1\":{\"144\":1}}],[\"如setbeanfactory\",{\"1\":{\"61\":1}}],[\"如服务发现\",{\"1\":{\"50\":1}}],[\"如健康检查\",{\"1\":{\"48\":1}}],[\"如\",{\"1\":{\"28\":1,\"67\":1,\"125\":5}}],[\"如果消息无法被路由到任何队列\",{\"1\":{\"160\":1,\"161\":1}}],[\"如果字符串常量池中没有保存对应的字符串对象的引用\",{\"1\":{\"147\":1}}],[\"如果字符串常量池中保存了对应的字符串对象的引用\",{\"1\":{\"147\":1}}],[\"如果原对象内部的属性是引用类型\",{\"1\":{\"130\":1}}],[\"如果需要更好的读性能\",{\"1\":{\"124\":1}}],[\"如果需要支持事务\",{\"1\":{\"124\":1}}],[\"如果在两次读取之间\",{\"1\":{\"113\":1,\"114\":1}}],[\"如果未提交的事务最终被回滚\",{\"1\":{\"112\":1}}],[\"如果多个线程同时访问和修改这些可变的成员变量\",{\"1\":{\"63\":1}}],[\"如果\",{\"1\":{\"61\":2,\"72\":1}}],[\"如果还没有\",{\"1\":{\"32\":1}}],[\"如果值是弱引用\",{\"1\":{\"21\":1}}],[\"如果这类对象存在很多\",{\"1\":{\"20\":1}}],[\"如果没有其他引用对象的强引用关系\",{\"1\":{\"20\":1}}],[\"我们会先从appclassloader缓存查找\",{\"1\":{\"32\":1}}],[\"我们可以破坏其中任一条件\",{\"1\":{\"24\":1}}],[\"我们无法获取\",{\"1\":{\"20\":1}}],[\"因为加了锁\",{\"1\":{\"133\":1}}],[\"因为没有覆盖查询所需要的数据\",{\"1\":{\"117\":1}}],[\"因为它们不会受到并发访问的影响\",{\"1\":{\"64\":1}}],[\"因为它们可能会在不被期望的情况下突然消失\",{\"1\":{\"21\":1}}],[\"因为\",{\"1\":{\"28\":1}}],[\"因此为了避免死锁\",{\"1\":{\"24\":1}}],[\"允许直接使用类的方法\",{\"1\":{\"149\":1}}],[\"允许更高的并发性\",{\"1\":{\"121\":1}}],[\"允许\",{\"1\":{\"73\":1}}],[\"允许用户自定义类加载器以满足特定需求\",{\"1\":{\"33\":1}}],[\"允许我们运行时生成代理对象\",{\"1\":{\"31\":1}}],[\"允许主动清除对象\",{\"1\":{\"23\":1}}],[\"允许的创建线程数量为\",{\"1\":{\"10\":1}}],[\"允许的请求队列长度为integer\",{\"1\":{\"10\":1}}],[\"增加了开销\",{\"1\":{\"23\":1}}],[\"效率较低\",{\"1\":{\"23\":1}}],[\"扩容后需要重新哈希\",{\"1\":{\"23\":1}}],[\"扩容过程简单高效\",{\"1\":{\"23\":1}}],[\"扩容时将原数据拷贝到新数组\",{\"1\":{\"23\":1}}],[\"found\",{\"1\":{\"209\":1}}],[\"for\",{\"0\":{\"195\":1},\"1\":{\"195\":1}}],[\"function\",{\"0\":{\"104\":1}}],[\"false\",{\"1\":{\"170\":1}}],[\"factories文件\",{\"1\":{\"56\":1}}],[\"factories\",{\"1\":{\"56\":1,\"57\":1,\"72\":1}}],[\"fastthreadlocal\",{\"1\":{\"23\":2}}],[\"first\",{\"1\":{\"30\":1}}],[\"final\",{\"1\":{\"28\":2,\"132\":1}}],[\"finalizabledelegatedexecutorservice\",{\"1\":{\"8\":1}}],[\"fixedthreadpool\",{\"1\":{\"10\":1,\"14\":1}}],[\"数字\",{\"1\":{\"206\":1}}],[\"数据不易丢失\",{\"1\":{\"182\":1}}],[\"数据不是实时保存的\",{\"1\":{\"182\":1}}],[\"数据丢失\",{\"1\":{\"182\":1}}],[\"数据从内核空间\",{\"1\":{\"180\":1}}],[\"数据结构都是优化过的\",{\"1\":{\"177\":1}}],[\"数据存储在内存中\",{\"1\":{\"177\":1}}],[\"数据长度不足会空格补充\",{\"1\":{\"142\":1}}],[\"数据库中\",{\"1\":{\"119\":1}}],[\"数据库系统提供了不同的事务隔离级别\",{\"1\":{\"115\":1}}],[\"数据类型转换\",{\"0\":{\"107\":1}}],[\"数据类型分类\",{\"0\":{\"92\":1}}],[\"数据类型\",{\"0\":{\"91\":1}}],[\"数据\",{\"1\":{\"65\":1}}],[\"数据交互\",{\"1\":{\"36\":1}}],[\"数据扩容机制\",{\"1\":{\"23\":1}}],[\"数组\",{\"1\":{\"16\":1,\"132\":1}}],[\"在网络编程中\",{\"1\":{\"178\":1}}],[\"在消费者中定义确认方法\",{\"1\":{\"163\":1}}],[\"在消息队列\",{\"1\":{\"159\":1}}],[\"在这个阶段\",{\"1\":{\"160\":1,\"161\":1,\"162\":1,\"163\":1}}],[\"在堆上创建一个新的对象\",{\"1\":{\"130\":1}}],[\"在处理大量并发读写操作时性能较好\",{\"1\":{\"124\":1}}],[\"在读操作多\",{\"1\":{\"124\":1}}],[\"在一个事务中多次读取同一范围的数据\",{\"1\":{\"114\":1}}],[\"在一个事务中多次读取同一数据\",{\"1\":{\"113\":1}}],[\"在并发数据库操作中\",{\"1\":{\"111\":1}}],[\"在初始化过程中引用其他\",{\"1\":{\"73\":1}}],[\"在初始化方法调用之后执行beanpostprocessor接口的postprocessafterinitialization方法\",{\"1\":{\"61\":1}}],[\"在初始化方法调用之前执行beanpostprocessor接口的postprocessbeforeinitialization方法\",{\"1\":{\"61\":1}}],[\"在某些情况下\",{\"1\":{\"59\":1}}],[\"在\",{\"1\":{\"52\":1,\"58\":1,\"61\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"74\":1,\"75\":1,\"79\":1,\"119\":1,\"160\":2,\"161\":1,\"162\":1,\"163\":1}}],[\"在编译的时候就分配了\",{\"1\":{\"28\":1}}],[\"在任务执行完成后会自动触发清除机制\",{\"1\":{\"23\":1}}],[\"在线程池场景下\",{\"1\":{\"23\":1}}],[\"在使用inheritablethreadlocal\",{\"1\":{\"22\":1}}],[\"在map中位置发生冲突会使用开放寻址法\",{\"1\":{\"21\":1,\"22\":1}}],[\"并且\",{\"1\":{\"169\":1}}],[\"并在确认消息后进行处理\",{\"1\":{\"163\":1}}],[\"并返回该引用\",{\"1\":{\"147\":1}}],[\"并进行统一处理\",{\"1\":{\"80\":1}}],[\"并使用\",{\"1\":{\"68\":1}}],[\"并调用指定的初始化方法\",{\"1\":{\"61\":1}}],[\"并调用其afterpropertiesset方法\",{\"1\":{\"61\":1}}],[\"并调用相应的方法\",{\"1\":{\"61\":1}}],[\"并写入\",{\"1\":{\"55\":1}}],[\"并发数据库操作中的读取问题\",{\"0\":{\"111\":1}}],[\"并发\",{\"1\":{\"30\":1}}],[\"并发回收\",{\"1\":{\"30\":1}}],[\"并行回收\",{\"1\":{\"30\":4}}],[\"并设置默认的初始值\",{\"1\":{\"28\":1}}],[\"并将这些变量的值复制到子线程中\",{\"1\":{\"22\":1}}],[\"并执行当前任务\",{\"1\":{\"17\":1}}],[\"会一直阻塞\",{\"1\":{\"179\":1}}],[\"会发送一个\",{\"1\":{\"160\":1}}],[\"会话结束后\",{\"1\":{\"78\":1}}],[\"会话相同\",{\"1\":{\"78\":1}}],[\"会产生一个新的\",{\"1\":{\"78\":1}}],[\"会从第三级缓存singletonfactories中获取objectfactory\",{\"1\":{\"73\":1}}],[\"会检查父线程中的\",{\"1\":{\"22\":1}}],[\"会把前面的给覆盖了\",{\"1\":{\"21\":1,\"22\":1}}],[\"时间一道删除\",{\"1\":{\"183\":1}}],[\"时开启路由失败通知\",{\"1\":{\"161\":1}}],[\"时\",{\"1\":{\"22\":2,\"76\":1}}],[\"时就会被回收掉\",{\"1\":{\"20\":1}}],[\"父线程\",{\"1\":{\"22\":1}}],[\"当涉及到环境变量的解析和使用时\",{\"1\":{\"198\":1}}],[\"当内存不足时\",{\"1\":{\"184\":1}}],[\"当某个连接的数据准备好时\",{\"1\":{\"181\":1}}],[\"当存取某个key时\",{\"1\":{\"174\":1}}],[\"当发生故障时\",{\"1\":{\"174\":1}}],[\"当发生循环依赖时\",{\"1\":{\"73\":1}}],[\"当子类继承自父类的相同方法\",{\"1\":{\"140\":1}}],[\"当需要在同一个会话中保持\",{\"1\":{\"78\":1}}],[\"当需要限制线程池中任务的数量时使用\",{\"1\":{\"13\":1}}],[\"当\",{\"1\":{\"75\":1,\"76\":1,\"125\":1}}],[\"当容器关闭时\",{\"1\":{\"61\":1}}],[\"当开发\",{\"1\":{\"51\":1}}],[\"当我们进行类加载时\",{\"1\":{\"32\":1}}],[\"当一个线程\",{\"1\":{\"22\":1}}],[\"弱引用\",{\"1\":{\"21\":1}}],[\"弱引用意味着\",{\"1\":{\"20\":1}}],[\"才会回收软引用指向的对象\",{\"1\":{\"21\":1}}],[\"jpa\",{\"1\":{\"82\":1}}],[\"jpa注解\",{\"0\":{\"82\":1}}],[\"jdk\",{\"0\":{\"155\":1},\"1\":{\"60\":1}}],[\"js\",{\"1\":{\"199\":3}}],[\"js语句是以分号结束\",{\"1\":{\"186\":1}}],[\"json\",{\"1\":{\"53\":1,\"55\":1}}],[\"js介绍\",{\"0\":{\"34\":1}}],[\"jetty\",{\"1\":{\"48\":1}}],[\"jvm\",{\"1\":{\"22\":1}}],[\"jvm内存不足时\",{\"1\":{\"21\":1}}],[\"java基础\",{\"0\":{\"126\":1}}],[\"javascript本身自带垃圾回收机制\",{\"1\":{\"200\":1}}],[\"javascript\",{\"1\":{\"199\":1}}],[\"javascript解释器会将其计算出一个结果\",{\"1\":{\"186\":1}}],[\"javascript结束符\",{\"0\":{\"42\":1}}],[\"javascript注释\",{\"0\":{\"39\":1}}],[\"javascript书写位置\",{\"0\":{\"38\":1}}],[\"javascript的组成\",{\"0\":{\"37\":1}}],[\"javascript作用\",{\"0\":{\"36\":1}}],[\"javascript是弱数据类型\",{\"1\":{\"94\":1}}],[\"javascript是一门运行在客户端的编程语言\",{\"1\":{\"35\":1}}],[\"javascript是什么\",{\"0\":{\"35\":1}}],[\"javascript和java没有一点关系\",{\"1\":{\"34\":1}}],[\"java中的引用类型\",{\"1\":{\"21\":1}}],[\"java\",{\"0\":{\"18\":1,\"151\":1,\"153\":1},\"1\":{\"22\":1,\"33\":1,\"82\":1,\"151\":1,\"178\":1}}],[\"软引用\",{\"1\":{\"21\":1}}],[\"只针对设置了过期时间的键\",{\"1\":{\"184\":4}}],[\"只存在于内存中\",{\"1\":{\"152\":1}}],[\"只声明变量\",{\"1\":{\"100\":1}}],[\"只有一个实例\",{\"1\":{\"75\":1}}],[\"只能通过\",{\"1\":{\"59\":1}}],[\"只能通过主动检测来防止内存泄漏\",{\"1\":{\"23\":1}}],[\"只要引用还存在就不会被回收\",{\"1\":{\"21\":1}}],[\"只支持非公平锁\",{\"1\":{\"14\":1}}],[\"避免内存漫溢\",{\"1\":{\"200\":1}}],[\"避免了一直阻塞\",{\"1\":{\"180\":1}}],[\"避免了脏读和不可重复读\",{\"1\":{\"115\":1}}],[\"避免了脏读\",{\"1\":{\"115\":2}}],[\"避免类的重复加载\",{\"1\":{\"33\":1}}],[\"避免因垃圾回收导致的潜在错误\",{\"1\":{\"21\":1}}],[\"避免资源耗尽的风险\",{\"1\":{\"10\":1}}],[\"直到内核把数据拷贝到用户空间\",{\"1\":{\"179\":1}}],[\"直到显式地通过remove\",{\"1\":{\"21\":1}}],[\"直接返回数据\",{\"1\":{\"55\":1}}],[\"直接或间接引用着\",{\"1\":{\"20\":1}}],[\"直接丢弃任务\",{\"1\":{\"17\":1}}],[\"直接抛出异常\",{\"1\":{\"17\":1}}],[\"强引用\",{\"1\":{\"21\":1}}],[\"强引用保证数据完整性\",{\"1\":{\"21\":1}}],[\"强制有界\",{\"1\":{\"16\":1}}],[\"random\",{\"1\":{\"184\":2}}],[\"rabbittemplate\",{\"1\":{\"161\":1}}],[\"rabbitmq\",{\"1\":{\"158\":2,\"160\":2,\"161\":1,\"162\":1,\"163\":1}}],[\"rdb快照内容和增量aof修改命令存在一起\",{\"1\":{\"182\":1}}],[\"rdb\",{\"1\":{\"182\":1}}],[\"runtimeexception\",{\"1\":{\"151\":1}}],[\"runtimeexception和其他\",{\"1\":{\"151\":1}}],[\"rocketmq\",{\"1\":{\"158\":2}}],[\"rollbackfor\",{\"1\":{\"88\":1}}],[\"root\",{\"1\":{\"20\":1}}],[\"redis淘汰策略\",{\"0\":{\"184\":1}}],[\"redis过期策略\",{\"0\":{\"183\":1}}],[\"redis持久机制\",{\"0\":{\"182\":1}}],[\"redis快的原因\",{\"0\":{\"177\":1}}],[\"redis存储结构\",{\"0\":{\"176\":1}}],[\"redis有几种集群模式\",{\"0\":{\"174\":1}}],[\"redis\",{\"0\":{\"173\":1}}],[\"repeatable\",{\"0\":{\"113\":1},\"1\":{\"115\":1}}],[\"read\",{\"0\":{\"112\":1,\"113\":1,\"114\":1},\"1\":{\"115\":3,\"179\":1,\"180\":3}}],[\"required\",{\"1\":{\"89\":1}}],[\"require\",{\"1\":{\"89\":1}}],[\"request\",{\"0\":{\"77\":1},\"1\":{\"69\":1}}],[\"responseentity<>\",{\"1\":{\"69\":2}}],[\"responseentity<string>\",{\"1\":{\"69\":2}}],[\"responsebody注解用于将返回对象直接转换为\",{\"1\":{\"55\":1}}],[\"responsebody\",{\"0\":{\"55\":1}}],[\"responsebody的组合注解\",{\"1\":{\"53\":1}}],[\"resource\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"restcontroller\",{\"0\":{\"52\":1,\"53\":1},\"1\":{\"52\":1,\"53\":1,\"67\":1}}],[\"restful\",{\"1\":{\"49\":1,\"53\":1}}],[\"rehash\",{\"1\":{\"23\":1}}],[\"remove\",{\"1\":{\"20\":1,\"23\":1}}],[\"reference\",{\"0\":{\"20\":1},\"1\":{\"21\":4}}],[\"reentrantlock\",{\"1\":{\"16\":1}}],[\"reentrantlock在操作前后加锁来保证线程安全\",{\"1\":{\"13\":1}}],[\"return\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"69\":2,\"160\":1}}],[\"使得处理复杂操作时\",{\"1\":{\"177\":1}}],[\"使得这个无用的对象还一直被\",{\"1\":{\"20\":1}}],[\"使用let而非var声明变量\",{\"1\":{\"208\":1}}],[\"使用hash槽对数据进行分片\",{\"1\":{\"174\":1}}],[\"使用监听容器来异步接收消息\",{\"1\":{\"163\":1}}],[\"使用队列的备份和复制机制来提高数据的可靠性\",{\"1\":{\"162\":1}}],[\"使用事务来确保消息的发送和确认\",{\"1\":{\"160\":1}}],[\"使用string进行拼接时需要创建新对象\",{\"1\":{\"134\":1}}],[\"使用表级锁定\",{\"1\":{\"121\":1}}],[\"使用场景\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"152\":1}}],[\"使用算法\",{\"1\":{\"30\":1}}],[\"使用不当可能导致内存泄漏\",{\"1\":{\"23\":1}}],[\"使用哈希表存储数据\",{\"1\":{\"23\":1}}],[\"使用强引用作为\",{\"1\":{\"21\":1}}],[\"使用一把锁\",{\"1\":{\"16\":1}}],[\"使用两把锁\",{\"1\":{\"16\":1}}],[\"使用示例\",{\"1\":{\"14\":1}}],[\"使用\",{\"0\":{\"29\":1,\"71\":1,\"144\":1},\"1\":{\"13\":1,\"56\":1,\"57\":1,\"61\":1,\"84\":1,\"125\":3}}],[\"使用threadpoolexecutor直接创建线程池\",{\"1\":{\"10\":1}}],[\"方法名\",{\"1\":{\"155\":1}}],[\"方法体\",{\"1\":{\"148\":1}}],[\"方法来获取循环依赖对象的前期暴露对象\",{\"1\":{\"73\":1}}],[\"方法\",{\"1\":{\"23\":1,\"60\":1,\"155\":2}}],[\"方法或线程结束时清理\",{\"1\":{\"21\":1}}],[\"方法手动清理\",{\"1\":{\"20\":1}}],[\"方法完成\",{\"1\":{\"18\":1}}],[\"最近最少使用频率\",{\"1\":{\"184\":2}}],[\"最近最少使用\",{\"1\":{\"184\":2}}],[\"最高的隔离级别\",{\"1\":{\"115\":1}}],[\"最低的隔离级别\",{\"1\":{\"115\":1}}],[\"最后\",{\"1\":{\"56\":1}}],[\"最重要的还是开发人员在编写代码时记得在使用完数据后及时调用\",{\"1\":{\"20\":1}}],[\"最大线程max\",{\"1\":{\"10\":1}}],[\"最大线程数是\",{\"1\":{\"9\":1}}],[\"最大容量为\",{\"1\":{\"7\":1,\"8\":1}}],[\"eviction\",{\"1\":{\"184\":1}}],[\"epoll\",{\"1\":{\"181\":1}}],[\"equals\",{\"0\":{\"145\":1,\"146\":1}}],[\"early\",{\"1\":{\"72\":1}}],[\"error\",{\"1\":{\"69\":1,\"151\":2}}],[\"e\",{\"1\":{\"69\":4}}],[\"exception\",{\"1\":{\"69\":3,\"88\":1,\"151\":3}}],[\"exceptionhandler\",{\"0\":{\"68\":1,\"81\":1},\"1\":{\"66\":1,\"68\":2,\"69\":2,\"81\":1}}],[\"executors\",{\"1\":{\"10\":1}}],[\"executorservice\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"entity\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"entry\",{\"1\":{\"20\":1}}],[\"enableconfigurationproperties注解引入\",{\"1\":{\"56\":1}}],[\"enableconfigurationproperties注解\",{\"1\":{\"56\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"56\":1}}],[\"ecmascript\",{\"1\":{\"37\":1}}],[\"中常见的三种\",{\"1\":{\"178\":1}}],[\"中\",{\"1\":{\"160\":2,\"161\":1,\"162\":1,\"163\":1}}],[\"中等\",{\"1\":{\"158\":1}}],[\"中在进行\",{\"1\":{\"20\":1}}],[\"中完成\",{\"1\":{\"18\":1}}],[\"虽然还没有初始化完成\",{\"1\":{\"73\":1}}],[\"虽然\",{\"1\":{\"20\":1}}],[\"但不符合业内通识\",{\"1\":{\"205\":1}}],[\"但语句用来自行以使某件事发生\",{\"1\":{\"186\":1}}],[\"但当主节点故障时\",{\"1\":{\"174\":1}}],[\"但在存储过程中可能会丢失\",{\"1\":{\"162\":1}}],[\"但要做出有别于父类的响应时\",{\"1\":{\"140\":1}}],[\"但要是不是id就不能走聚簇索引\",{\"1\":{\"116\":1}}],[\"但性能开销较大\",{\"1\":{\"115\":1}}],[\"但可能出现幻读\",{\"1\":{\"115\":1}}],[\"但可能出现不可重复读和幻读\",{\"1\":{\"115\":1}}],[\"但可以获取到该对象在堆中的存储地址\",{\"1\":{\"73\":1}}],[\"但为空\",{\"1\":{\"101\":1}}],[\"但注意不能自己嵌套自己\",{\"1\":{\"96\":1}}],[\"但它们在返回类型和用途上有所不同\",{\"1\":{\"52\":1}}],[\"但它们的定位和用途有所不同\",{\"1\":{\"47\":1}}],[\"但是由于没有正确处理对象的引用关系\",{\"1\":{\"20\":1}}],[\"但是这只是一种后备选择\",{\"1\":{\"20\":1}}],[\"但是值对象还在\",{\"1\":{\"20\":1}}],[\"但同时也引入了新的问题\",{\"1\":{\"20\":1}}],[\"这在连接数很多时会导致大量的线程消耗\",{\"1\":{\"179\":1}}],[\"这就要求左边必须是一个容器\",{\"1\":{\"166\":1}}],[\"这可能导致索引失效\",{\"1\":{\"125\":1}}],[\"这可能导致事务在处理过程中得到不一致的数据集\",{\"1\":{\"114\":1}}],[\"这可能导致事务在处理过程中得到不同的结果\",{\"1\":{\"113\":1}}],[\"这可能导致错误的决策\",{\"1\":{\"112\":1}}],[\"这些条件可能导致索引失效\",{\"1\":{\"125\":1}}],[\"这些问题都与事务的隔离级别有关\",{\"1\":{\"111\":1}}],[\"这些请求需要被逐一处理和记录\",{\"1\":{\"14\":1}}],[\"这时我们需要对b方法进行处理\",{\"1\":{\"89\":1}}],[\"这个事务方法对另一个事务方法\",{\"1\":{\"89\":1}}],[\"这个拷贝过程发生在\",{\"1\":{\"22\":1}}],[\"这两个注解\",{\"1\":{\"66\":1}}],[\"这意味着如果一个用户变量和一个系统变量具有相同的名称\",{\"1\":{\"198\":1}}],[\"这意味着如果使用\",{\"1\":{\"22\":1}}],[\"这意味着在\",{\"1\":{\"51\":1}}],[\"这将导致\",{\"1\":{\"21\":1}}],[\"这样解决了上述问题\",{\"1\":{\"174\":1}}],[\"这样就可以在被代理对象时候做增强\",{\"1\":{\"31\":1}}],[\"这样\",{\"1\":{\"22\":1,\"161\":1}}],[\"这样可以保证数据的完整性和一致性\",{\"1\":{\"21\":1}}],[\"这样也会存在内存泄漏的风险\",{\"1\":{\"20\":1}}],[\"这样在一定程度上降低了内存泄漏的风险\",{\"1\":{\"20\":1}}],[\"而不需要外部类\",{\"1\":{\"150\":1}}],[\"而无需访问表的实际数据\",{\"1\":{\"118\":1}}],[\"而交互少的场景\",{\"1\":{\"30\":2}}],[\"而是编译器自动生成的\",{\"1\":{\"29\":1}}],[\"而是会被放回池中重用\",{\"1\":{\"22\":1}}],[\"而\",{\"1\":{\"19\":1}}],[\"是程序在内存中申请的一块用来存放数据的小空间\",{\"1\":{\"200\":1}}],[\"是一种同步非阻塞\",{\"1\":{\"180\":1}}],[\"是一种同步阻塞\",{\"1\":{\"179\":1}}],[\"是一个方法级别的注解\",{\"1\":{\"68\":1}}],[\"是一个类级别的注解\",{\"1\":{\"67\":1}}],[\"是一个完整的微服务框架\",{\"1\":{\"50\":1}}],[\"是否使用缓冲\",{\"1\":{\"152\":1}}],[\"是两种常用的存储引擎\",{\"1\":{\"119\":1}}],[\"是指不包含可变成员变量的对象\",{\"1\":{\"64\":1}}],[\"是指包含可变成员变量的对象\",{\"1\":{\"63\":1}}],[\"是实现依赖注入\",{\"1\":{\"58\":1}}],[\"是\",{\"1\":{\"49\":1,\"53\":1,\"152\":1,\"199\":2}}],[\"是基于模型\",{\"1\":{\"65\":1}}],[\"是基于\",{\"1\":{\"48\":1}}],[\"是强引用\",{\"0\":{\"21\":1},\"1\":{\"19\":1}}],[\"是弱引用\",{\"0\":{\"20\":1},\"1\":{\"19\":1}}],[\"是懒惰的\",{\"1\":{\"16\":1}}],[\"的包管理器\",{\"1\":{\"199\":1}}],[\"的执行环境\",{\"1\":{\"199\":1}}],[\"的使用过程中\",{\"1\":{\"159\":1}}],[\"的形式调用\",{\"1\":{\"155\":1}}],[\"的作者是$\",{\"1\":{\"98\":1}}],[\"的作用域\",{\"1\":{\"74\":1}}],[\"的sql\",{\"1\":{\"90\":1}}],[\"的态度\",{\"1\":{\"89\":1}}],[\"的实例化需要特定的配置或状态时\",{\"1\":{\"76\":1}}],[\"的初始化\",{\"1\":{\"71\":1}}],[\"的线程安全性是一个重要的考虑因素\",{\"1\":{\"62\":1}}],[\"的线程安全性\",{\"0\":{\"62\":1}}],[\"的属性赋值\",{\"1\":{\"61\":1}}],[\"的完整生命周期流程\",{\"1\":{\"61\":1}}],[\"的生命周期与\",{\"1\":{\"77\":1,\"78\":1}}],[\"的生命周期\",{\"0\":{\"61\":1}}],[\"的自动配置机制是其核心特性之一\",{\"1\":{\"56\":1}}],[\"的能力\",{\"1\":{\"51\":1}}],[\"的关系\",{\"0\":{\"51\":1}}],[\"的特性简化了微服务的开发\",{\"1\":{\"50\":1}}],[\"的安全性\",{\"1\":{\"33\":1}}],[\"的键\",{\"0\":{\"20\":1}}],[\"的\",{\"1\":{\"19\":1,\"20\":1}}],[\"的区别\",{\"0\":{\"47\":1,\"52\":1,\"145\":1},\"1\":{\"16\":1}}],[\"移除线程和判断是否补充线程\",{\"1\":{\"18\":1}}],[\"回收流程由\",{\"1\":{\"18\":1}}],[\"超时后触发线程回收\",{\"1\":{\"18\":1}}],[\"超时判断在\",{\"1\":{\"18\":1}}],[\"while\",{\"0\":{\"194\":1},\"1\":{\"194\":1}}],[\"where\",{\"1\":{\"125\":5}}],[\"war\",{\"1\":{\"48\":1}}],[\"write\",{\"1\":{\"44\":1,\"97\":2,\"98\":1,\"202\":1,\"203\":1}}],[\"wrong\",{\"1\":{\"16\":1,\"22\":1}}],[\"web\",{\"1\":{\"37\":1,\"49\":3,\"51\":3,\"53\":1,\"54\":1,\"65\":1}}],[\"weak\",{\"0\":{\"20\":1},\"1\":{\"21\":1}}],[\"worker\",{\"1\":{\"18\":1}}],[\"丢弃阻塞队列中最靠前的任务\",{\"1\":{\"17\":1}}],[\"默认注入方式为\",{\"1\":{\"60\":1}}],[\"默认的注入方式为\",{\"1\":{\"60\":1}}],[\"默认返回\",{\"1\":{\"53\":1}}],[\"默认使用\",{\"1\":{\"51\":1}}],[\"默认策略\",{\"1\":{\"17\":1}}],[\"默认无界\",{\"1\":{\"16\":1}}],[\"拒绝策略\",{\"0\":{\"17\":1}}],[\"头尾\",{\"1\":{\"16\":1}}],[\"需要定义主键的生成策略\",{\"1\":{\"84\":1}}],[\"需要通过视图解析器将模型数据渲染到页面上\",{\"1\":{\"54\":1}}],[\"需要特别注意线程池的使用场景\",{\"1\":{\"22\":1}}],[\"需要是提前创建好的\",{\"1\":{\"16\":1}}],[\"需要提前初始化\",{\"1\":{\"16\":1}}],[\"入队会生成新\",{\"1\":{\"16\":1}}],[\"入队操作\",{\"1\":{\"16\":1}}],[\"内部成员\",{\"1\":{\"153\":4}}],[\"内部类\",{\"0\":{\"150\":1},\"1\":{\"148\":1}}],[\"内部的\",{\"1\":{\"132\":1}}],[\"内部使用\",{\"1\":{\"16\":1}}],[\"内嵌了\",{\"1\":{\"48\":1}}],[\"内存\",{\"1\":{\"200\":1}}],[\"内存中\",{\"1\":{\"152\":1}}],[\"内存泄漏\",{\"1\":{\"20\":1}}],[\"内存管理\",{\"1\":{\"16\":1}}],[\"底层是数组\",{\"1\":{\"16\":1}}],[\"底层是链表\",{\"1\":{\"16\":1}}],[\"底层数据结构\",{\"1\":{\"16\":1}}],[\"常见的例子\",{\"1\":{\"16\":1}}],[\"durable\",{\"1\":{\"162\":1}}],[\"dirty\",{\"0\":{\"112\":1}}],[\"dispatcherservlet把返回的model传给视图\",{\"1\":{\"65\":1}}],[\"dispatcherservlet调用handlermapping\",{\"1\":{\"65\":1}}],[\"dispatcherservlet拦截请求并作为前端控制器\",{\"1\":{\"65\":1}}],[\"dispatcherservlet\",{\"1\":{\"65\":2}}],[\"discardpolicy\",{\"1\":{\"17\":1}}],[\"discardoldestpolicy\",{\"1\":{\"17\":1}}],[\"date\",{\"0\":{\"110\":1}}],[\"dao接口工作原理\",{\"0\":{\"90\":1}}],[\"deliverymode\",{\"1\":{\"162\":1}}],[\"delayedworkqueue\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"default\",{\"1\":{\"153\":1,\"155\":1,\"192\":1}}],[\"deferredimportselector\",{\"1\":{\"56\":1}}],[\"deferred\",{\"1\":{\"56\":1}}],[\"destruction\",{\"1\":{\"61\":1}}],[\"dependency\",{\"1\":{\"58\":1,\"70\":1}}],[\"document\",{\"1\":{\"44\":1,\"97\":2,\"98\":1,\"202\":1,\"203\":1}}],[\"db读写\",{\"1\":{\"11\":1}}],[\"比较运算符\",{\"0\":{\"168\":1}}],[\"比较对象的内存地址是否相等\",{\"1\":{\"145\":1}}],[\"比较数值是否相等\",{\"1\":{\"145\":1}}],[\"比较栈中的值\",{\"1\":{\"145\":1}}],[\"比较可能导致索引失效\",{\"1\":{\"125\":1}}],[\"比如\",{\"1\":{\"108\":1}}],[\"比\",{\"1\":{\"14\":1}}],[\"每过一段时间抽取设置了过期的key检测是否过期\",{\"1\":{\"183\":1}}],[\"每一个\",{\"1\":{\"78\":1}}],[\"每一次\",{\"1\":{\"77\":1}}],[\"每次请求该\",{\"1\":{\"76\":1}}],[\"每次请求都会创建一个新的\",{\"1\":{\"76\":1}}],[\"每个连接都需要一个独立的线程来处理\",{\"1\":{\"179\":1}}],[\"每个主节点负责对应哈希槽\",{\"1\":{\"174\":1}}],[\"每个由\",{\"1\":{\"75\":1}}],[\"每个插入操作必须等到另一个线程调用移除操作\",{\"1\":{\"15\":1}}],[\"每个插入操作都必须等待一个移出操作\",{\"1\":{\"9\":1}}],[\"每天会接收到大量的订单请求\",{\"1\":{\"14\":1}}],[\"公平性\",{\"1\":{\"13\":1,\"14\":1}}],[\"线程首先发起\",{\"1\":{\"180\":1}}],[\"线程依然是阻塞的\",{\"1\":{\"180\":1}}],[\"线程在等待\",{\"1\":{\"179\":1}}],[\"线程创建时的初始化阶段\",{\"1\":{\"22\":1}}],[\"线程回收和补充机制确保线程池的动态调整和资源优化\",{\"1\":{\"18\":1}}],[\"线程循环获取任务\",{\"1\":{\"18\":1}}],[\"线程安全\",{\"1\":{\"13\":1,\"14\":1,\"16\":1}}],[\"线程池中的线程在完成任务后不会立即销毁\",{\"1\":{\"22\":1}}],[\"线程池通过\",{\"1\":{\"18\":1}}],[\"线程池怎么实现线程自动回收\",{\"0\":{\"18\":1}}],[\"线程池不会保留核心线程\",{\"1\":{\"9\":1}}],[\"线程池种类\",{\"0\":{\"6\":1}}],[\"例如使用一个\",{\"1\":{\"16\":1}}],[\"例如一个大型电商平台的订单处理系统\",{\"1\":{\"14\":1}}],[\"例如\",{\"1\":{\"13\":1,\"85\":1,\"88\":1,\"160\":2,\"162\":1,\"163\":1}}],[\"aof\",{\"1\":{\"182\":1}}],[\"aop\",{\"1\":{\"72\":1}}],[\"acks\",{\"1\":{\"160\":1}}],[\"acid\",{\"0\":{\"123\":1},\"1\":{\"119\":1,\"123\":2}}],[\"age是变量名\",{\"1\":{\"201\":1}}],[\"age\",{\"1\":{\"125\":3,\"201\":1,\"202\":3,\"203\":4,\"204\":1}}],[\"array\",{\"0\":{\"105\":1}}],[\"arrayblockingqueue性能更好\",{\"1\":{\"14\":1}}],[\"arrayblockingqueue\",{\"0\":{\"13\":1},\"1\":{\"16\":6}}],[\"author\",{\"1\":{\"97\":2,\"98\":2}}],[\"autowired\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"a方法中调用了b方法\",{\"1\":{\"89\":1}}],[\"aware\",{\"1\":{\"61\":1}}],[\"await\",{\"1\":{\"10\":1}}],[\"annotations\",{\"1\":{\"58\":1}}],[\"answer\",{\"1\":{\"19\":1}}],[\"allkeys\",{\"1\":{\"184\":3}}],[\"alert\",{\"1\":{\"44\":1}}],[\"alt\",{\"1\":{\"41\":1}}],[\"a\",{\"1\":{\"41\":1,\"89\":1}}],[\"apis\",{\"1\":{\"37\":1}}],[\"api\",{\"1\":{\"33\":2,\"53\":1,\"82\":1}}],[\"abortpolicy\",{\"1\":{\"17\":1}}],[\"gender\",{\"1\":{\"204\":1}}],[\"generationtype\",{\"1\":{\"85\":1}}],[\"generatedvalue\",{\"0\":{\"85\":1},\"1\":{\"85\":2}}],[\"getobject\",{\"1\":{\"73\":1}}],[\"getmessage\",{\"1\":{\"69\":2}}],[\"get\",{\"1\":{\"20\":1}}],[\"gettask\",{\"1\":{\"18\":1}}],[\"global\",{\"1\":{\"69\":1}}],[\"globalexceptionhandler\",{\"1\":{\"69\":1}}],[\"garbage\",{\"1\":{\"30\":1}}],[\"g1\",{\"1\":{\"30\":1}}],[\"gc\",{\"1\":{\"20\":2}}],[\"gson转换等\",{\"1\":{\"11\":1}}],[\"github\",{\"1\":{\"4\":1}}],[\"igloo\",{\"1\":{\"204\":1}}],[\"if分支语句\",{\"0\":{\"190\":1}}],[\"i\",{\"0\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1},\"1\":{\"178\":3,\"179\":2,\"180\":1,\"181\":4}}],[\"is\",{\"1\":{\"125\":2}}],[\"isdarkmode\",{\"1\":{\"99\":1}}],[\"identity\",{\"1\":{\"85\":1}}],[\"id\",{\"0\":{\"84\":1},\"1\":{\"84\":2}}],[\"io多路复用\",{\"1\":{\"177\":1}}],[\"ioc\",{\"1\":{\"56\":1,\"61\":1}}],[\"io密集型任务\",{\"1\":{\"11\":1}}],[\"import注解导入了一个\",{\"1\":{\"56\":1}}],[\"import注解\",{\"1\":{\"56\":2}}],[\"import\",{\"1\":{\"56\":2}}],[\"in\",{\"1\":{\"125\":3}}],[\"innodb\",{\"0\":{\"119\":1},\"1\":{\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":2}}],[\"init\",{\"1\":{\"61\":1}}],[\"initializingbean\",{\"1\":{\"61\":1}}],[\"instantiation\",{\"1\":{\"61\":1}}],[\"injection\",{\"1\":{\"58\":1}}],[\"inf目录下的spring\",{\"1\":{\"56\":1}}],[\"inf\",{\"1\":{\"56\":1}}],[\"inheritablethreadlocal存储上下文信息\",{\"1\":{\"22\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"22\":1}}],[\"inheritablethreadlocal变量\",{\"1\":{\"22\":1}}],[\"inheritablethreadlocal在子线程创建时从父线程拷贝值\",{\"1\":{\"22\":1}}],[\"inheritablethreadlocal原理\",{\"0\":{\"22\":1}}],[\"intern\",{\"0\":{\"147\":1}}],[\"internal\",{\"1\":{\"69\":1}}],[\"integer\",{\"1\":{\"7\":1,\"8\":1,\"9\":2,\"10\":1}}],[\"int\",{\"1\":{\"7\":1,\"28\":1}}],[\"===\",{\"1\":{\"168\":1,\"172\":1}}],[\"==\",{\"0\":{\"145\":1},\"1\":{\"145\":1,\"168\":2,\"172\":2}}],[\"=\",{\"1\":{\"10\":1,\"85\":1,\"88\":1,\"97\":2,\"98\":2,\"99\":1,\"106\":1,\"108\":1,\"125\":5,\"166\":3,\"171\":2,\"172\":2,\"202\":1,\"203\":2,\"204\":3}}],[\"lfu\",{\"1\":{\"184\":4}}],[\"lru\",{\"1\":{\"184\":4}}],[\"list\",{\"1\":{\"176\":1}}],[\"like\",{\"1\":{\"125\":2}}],[\"like操作\",{\"1\":{\"125\":1}}],[\"linkedblockingqueue\",{\"0\":{\"14\":1},\"1\":{\"7\":1,\"8\":1,\"16\":6}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"7\":1,\"8\":1}}],[\"let是关键字\",{\"1\":{\"201\":1}}],[\"let不允许多次声名同一个变量\",{\"1\":{\"201\":1}}],[\"let\",{\"1\":{\"97\":2,\"98\":2,\"99\":1,\"106\":1,\"108\":1,\"171\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":2}}],[\"log\",{\"1\":{\"44\":1,\"106\":1,\"108\":1}}],[\"loading\",{\"0\":{\"27\":1}}],[\"lazy注解\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"lab提供的api\",{\"1\":{\"31\":1}}],[\"latch\",{\"1\":{\"10\":3}}],[\"明确线程池的各项参数\",{\"1\":{\"10\":1}}],[\"char\",{\"0\":{\"141\":1},\"1\":{\"132\":1,\"142\":1,\"143\":1,\"144\":1,\"152\":1}}],[\"chengp\",{\"1\":{\"0\":1}}],[\"circular\",{\"1\":{\"70\":1}}],[\"customexception\",{\"1\":{\"69\":2}}],[\"ctrl\",{\"1\":{\"40\":1}}],[\"cg\",{\"1\":{\"31\":1}}],[\"committed\",{\"1\":{\"115\":1}}],[\"comic\",{\"1\":{\"97\":2,\"98\":2}}],[\"component\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"continue\",{\"1\":{\"196\":1}}],[\"controlleradvice\",{\"0\":{\"67\":1,\"80\":1},\"1\":{\"66\":1,\"67\":2,\"68\":1,\"69\":1,\"80\":1}}],[\"controller用于定义一个控制器\",{\"1\":{\"54\":1}}],[\"controller\",{\"0\":{\"52\":1,\"54\":1},\"1\":{\"52\":1,\"53\":1,\"65\":1,\"67\":1}}],[\"conditional注解排除无效配置类\",{\"1\":{\"56\":1}}],[\"conditional\",{\"1\":{\"56\":1,\"57\":1}}],[\"console\",{\"1\":{\"44\":1,\"106\":1,\"108\":1}}],[\"concurrent\",{\"1\":{\"30\":1}}],[\"countdown\",{\"1\":{\"10\":1}}],[\"countdownlatch能够使一个线程在等待另外一些线程完成各自工作之后\",{\"1\":{\"10\":1}}],[\"countdownlatch\",{\"1\":{\"10\":3}}],[\"count\",{\"1\":{\"10\":1}}],[\"cms\",{\"1\":{\"30\":2}}],[\"cluster模式\",{\"1\":{\"174\":1}}],[\"cloud\",{\"0\":{\"50\":1},\"1\":{\"50\":1}}],[\"client\",{\"1\":{\"30\":2}}],[\"class\",{\"1\":{\"28\":1,\"69\":3,\"88\":1}}],[\"cpu\",{\"1\":{\"30\":3}}],[\"cpu密集型任务\",{\"1\":{\"11\":1}}],[\"case\",{\"1\":{\"192\":3}}],[\"cache\",{\"1\":{\"72\":3}}],[\"cachedthreadpool\",{\"1\":{\"10\":1}}],[\"callerrunspolicy\",{\"1\":{\"17\":1}}],[\"可用性\",{\"1\":{\"175\":1}}],[\"可用性偏弱\",{\"1\":{\"174\":1}}],[\"可存在于文件\",{\"1\":{\"152\":1}}],[\"可恢复的异常\",{\"1\":{\"151\":1}}],[\"可变长度\",{\"1\":{\"142\":1}}],[\"可变\",{\"1\":{\"132\":1}}],[\"可变性\",{\"0\":{\"132\":1,\"142\":1}}],[\"可重复读\",{\"1\":{\"115\":1}}],[\"可能导致索引失效\",{\"1\":{\"125\":3}}],[\"可能出现脏读\",{\"1\":{\"115\":1}}],[\"可能会出现脏读\",{\"1\":{\"111\":1}}],[\"可能会创建大量的线程\",{\"1\":{\"10\":1}}],[\"可能会堆积大量的请求\",{\"1\":{\"10\":1}}],[\"可以先使用在声明\",{\"1\":{\"208\":1}}],[\"可以保证数据强一致性\",{\"1\":{\"175\":1}}],[\"可以在配置新的\",{\"1\":{\"161\":1}}],[\"可以直接用\",{\"1\":{\"155\":1}}],[\"可以直接使用内部类\",{\"1\":{\"150\":1}}],[\"可以简单分为两种情况\",{\"1\":{\"147\":1}}],[\"可以选择\",{\"1\":{\"124\":1}}],[\"可以维护数据的引用完整性\",{\"1\":{\"122\":1}}],[\"可以指定在遇到特定异常时进行回滚\",{\"1\":{\"88\":1}}],[\"可以指定使用公平策略还是非公平策略\",{\"1\":{\"15\":1}}],[\"可以指定使用公平锁或者非公平锁\",{\"1\":{\"13\":1}}],[\"可以使用\",{\"1\":{\"85\":1}}],[\"可以被多个地方安全共享时\",{\"1\":{\"75\":1}}],[\"可以被应用程序使用了\",{\"1\":{\"61\":1}}],[\"可以生成原始\",{\"1\":{\"72\":1}}],[\"可以延迟\",{\"1\":{\"71\":1}}],[\"可以针对不同的异常类型定义不同的处理逻辑\",{\"1\":{\"68\":1}}],[\"可以集中处理特定类型的异常\",{\"1\":{\"67\":1}}],[\"可以通过设置手动提交\",{\"1\":{\"163\":1}}],[\"可以通过设置\",{\"1\":{\"160\":1,\"162\":1}}],[\"可以通过name属性来显式指定名称\",{\"1\":{\"60\":1}}],[\"可以通过\",{\"1\":{\"60\":1,\"160\":1}}],[\"可以返回视图\",{\"1\":{\"54\":1}}],[\"可以返回modelandview\",{\"1\":{\"54\":1}}],[\"可以与\",{\"1\":{\"49\":1}}],[\"可减少任务执行的等待时间\",{\"1\":{\"15\":1}}],[\"可缓存线程池\",{\"0\":{\"9\":1}}],[\"和exception\",{\"1\":{\"151\":1}}],[\"和配置类的重要手段\",{\"1\":{\"58\":1}}],[\"和\",{\"0\":{\"145\":1,\"178\":1},\"1\":{\"10\":1,\"14\":1,\"16\":1,\"20\":1,\"47\":1,\"52\":1,\"53\":1,\"66\":1,\"119\":1,\"132\":1,\"158\":1,\"178\":1}}],[\"创建定时器\",{\"1\":{\"183\":1}}],[\"创建一个新的线程\",{\"1\":{\"22\":1}}],[\"创建节点的时候添加数据\",{\"1\":{\"16\":1}}],[\"创建线程池\",{\"1\":{\"10\":1}}],[\"创建固定线程数的线程池\",{\"0\":{\"7\":1}}],[\"不合理\",{\"1\":{\"208\":2}}],[\"不能用关键字\",{\"1\":{\"206\":1}}],[\"不遵守不会报错\",{\"1\":{\"205\":1}}],[\"不遵守会报错\",{\"1\":{\"205\":1}}],[\"不使用的变量会回收空间\",{\"1\":{\"200\":1}}],[\"不满足条件执行的代码\",{\"1\":{\"191\":1}}],[\"不淘汰任何键\",{\"1\":{\"184\":1}}],[\"不淘汰\",{\"1\":{\"184\":1}}],[\"不安全\",{\"1\":{\"182\":1}}],[\"不需要惊醒加锁\",{\"1\":{\"177\":1}}],[\"不是线程安全的\",{\"1\":{\"133\":1}}],[\"不是开发者写的\",{\"1\":{\"29\":1}}],[\"不可变长度\",{\"1\":{\"142\":1,\"143\":1}}],[\"不可变\",{\"1\":{\"132\":1}}],[\"不可重复读和幻读\",{\"1\":{\"115\":2}}],[\"不可重复读和幻读等问题\",{\"1\":{\"111\":1}}],[\"不可重复读\",{\"0\":{\"113\":1}}],[\"不等于比较\",{\"1\":{\"125\":1}}],[\"不完全支持\",{\"1\":{\"123\":1}}],[\"不支持外键约束\",{\"1\":{\"122\":1}}],[\"不支持事务处理\",{\"1\":{\"120\":1}}],[\"不支持在构造函数或参数上使用\",{\"1\":{\"60\":1}}],[\"不经过视图解析器处理\",{\"1\":{\"55\":1}}],[\"不建议用\",{\"1\":{\"10\":1}}],[\"不存储元素的阻塞队列\",{\"1\":{\"9\":1,\"15\":1}}],[\"阻塞队列\",{\"0\":{\"12\":1}}],[\"阻塞队列为\",{\"1\":{\"9\":1}}],[\"阻塞队列是\",{\"1\":{\"7\":1,\"8\":1}}],[\"理论上可以创建无限多的线程\",{\"1\":{\"9\":1}}],[\"switch\",{\"1\":{\"192\":1}}],[\"switch语句\",{\"0\":{\"192\":1}}],[\"sweep\",{\"1\":{\"30\":1}}],[\"supported\",{\"1\":{\"89\":1}}],[\"supports\",{\"1\":{\"89\":1}}],[\"singleton\",{\"0\":{\"75\":1},\"1\":{\"72\":3,\"75\":1}}],[\"singlethreadexecutor\",{\"1\":{\"14\":1}}],[\"singlethreadpool\",{\"1\":{\"10\":1}}],[\"spring事务传播行为\",{\"0\":{\"89\":1}}],[\"spring\",{\"0\":{\"47\":2,\"48\":1,\"49\":1,\"50\":1,\"51\":2,\"56\":1,\"58\":1,\"65\":1,\"74\":1},\"1\":{\"47\":3,\"48\":4,\"49\":4,\"50\":3,\"51\":6,\"52\":1,\"56\":5,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"61\":2,\"62\":1,\"65\":1,\"66\":1,\"70\":2,\"73\":2,\"74\":1,\"75\":2,\"76\":1,\"79\":1}}],[\"springbootconfiguration注解引入\",{\"1\":{\"56\":1}}],[\"springboot\",{\"0\":{\"46\":1}}],[\"shift\",{\"1\":{\"41\":1}}],[\"s\",{\"1\":{\"30\":1}}],[\"scope\",{\"1\":{\"74\":1}}],[\"scavenge\",{\"1\":{\"30\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"16\":1}}],[\"soft\",{\"1\":{\"21\":1}}],[\"stringbuffer因为加了锁影响性能\",{\"1\":{\"134\":1}}],[\"stringbuffer\",{\"0\":{\"131\":1},\"1\":{\"132\":1,\"133\":1}}],[\"stringbuilder\",{\"0\":{\"131\":1},\"1\":{\"132\":1,\"133\":1}}],[\"string\",{\"0\":{\"95\":1,\"131\":1,\"147\":1},\"1\":{\"132\":1,\"133\":1}}],[\"strategy\",{\"1\":{\"85\":1}}],[\"strong\",{\"1\":{\"21\":1}}],[\"static关键字用于修饰成员变量\",{\"1\":{\"148\":1}}],[\"static\",{\"0\":{\"148\":1},\"1\":{\"7\":1,\"8\":1,\"9\":1,\"28\":1,\"155\":2}}],[\"select\",{\"1\":{\"180\":1,\"181\":1}}],[\"selector\",{\"1\":{\"56\":1}}],[\"session\",{\"0\":{\"78\":1},\"1\":{\"78\":1}}],[\"server\",{\"1\":{\"30\":1,\"69\":1}}],[\"serializable\",{\"1\":{\"115\":1}}],[\"serial\",{\"1\":{\"30\":2}}],[\"setapplicationcontext等\",{\"1\":{\"61\":1}}],[\"set\",{\"1\":{\"20\":1}}],[\"seconds\",{\"1\":{\"9\":1}}],[\"synchronousqueue\",{\"0\":{\"15\":1},\"1\":{\"9\":1}}],[\"synchronousqueue<runnable>\",{\"1\":{\"9\":1}}],[\"0\",{\"1\":{\"9\":2,\"28\":1,\"170\":1,\"171\":1}}],[\"0l\",{\"1\":{\"7\":1,\"8\":1}}],[\"10\",{\"1\":{\"125\":1}}],[\"12\",{\"1\":{\"106\":1,\"108\":2,\"203\":1}}],[\"1\",{\"1\":{\"8\":3,\"24\":1,\"172\":1,\"174\":2}}],[\"163邮箱\",{\"1\":{\"1\":1,\"4\":1}}],[\"mq\",{\"0\":{\"157\":1,\"159\":1,\"160\":1},\"1\":{\"159\":1}}],[\"mysql\",{\"1\":{\"119\":1}}],[\"myisam\",{\"0\":{\"119\":1},\"1\":{\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":2}}],[\"mybatis运行时会为dao接口生成动态代理对象\",{\"1\":{\"90\":1}}],[\"modelandview\",{\"1\":{\"65\":2}}],[\"model\",{\"1\":{\"65\":2}}],[\"method的\",{\"1\":{\"61\":1}}],[\"method\",{\"1\":{\"61\":2}}],[\"mvc\",{\"0\":{\"47\":1,\"49\":1,\"51\":1,\"65\":1},\"1\":{\"47\":1,\"49\":2,\"51\":3,\"52\":1,\"65\":2}}],[\"male\",{\"1\":{\"204\":1}}],[\"manualacknow\",{\"1\":{\"163\":1}}],[\"manual\",{\"1\":{\"163\":1}}],[\"mandatory\",{\"1\":{\"89\":1,\"160\":1}}],[\"mark\",{\"1\":{\"30\":1}}],[\"max\",{\"1\":{\"7\":1,\"8\":1,\"9\":2,\"10\":2}}],[\"milliseconds\",{\"1\":{\"7\":1,\"8\":1}}],[\"ttl\",{\"1\":{\"184\":2}}],[\"throwable有两个直接的子类\",{\"1\":{\"151\":1}}],[\"threadlocal改进的框架或者工具\",{\"0\":{\"23\":1}}],[\"threadlocal中set的值\",{\"1\":{\"21\":1,\"22\":1}}],[\"threadlocal\",{\"1\":{\"21\":1,\"23\":2}}],[\"threadlocalmap的值确保了只要threadlocal对象存在\",{\"1\":{\"21\":1}}],[\"threadlocalmap的值\",{\"0\":{\"21\":1}}],[\"threadlocalmap的引用类型\",{\"0\":{\"19\":1}}],[\"threadlocalmap\",{\"0\":{\"20\":1},\"1\":{\"19\":1,\"20\":1}}],[\"threadpoolexecutor\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"typeof\",{\"1\":{\"106\":1,\"108\":1}}],[\"true\",{\"1\":{\"99\":1}}],[\"transactional\",{\"0\":{\"88\":1},\"1\":{\"88\":2}}],[\"transient\",{\"0\":{\"86\":1},\"1\":{\"86\":1}}],[\"tomcat\",{\"1\":{\"48\":1}}],[\"timeunit\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"npm\",{\"1\":{\"199\":1}}],[\"nio\",{\"0\":{\"178\":1,\"180\":1},\"1\":{\"178\":1,\"180\":1}}],[\"name\",{\"1\":{\"125\":3}}],[\"num逻辑运算符短路\",{\"1\":{\"171\":1}}],[\"num\",{\"1\":{\"106\":2,\"108\":2,\"171\":3}}],[\"number\",{\"0\":{\"94\":1}}],[\"null当假的看\",{\"1\":{\"170\":1}}],[\"null\",{\"0\":{\"101\":1},\"1\":{\"20\":1,\"125\":2}}],[\"nested支持嵌套事务\",{\"1\":{\"89\":1}}],[\"never\",{\"1\":{\"89\":1}}],[\"newcachedthreadpool\",{\"1\":{\"9\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"8\":1}}],[\"new\",{\"1\":{\"7\":2,\"8\":3,\"9\":2,\"10\":1,\"69\":2,\"89\":1}}],[\"newfixedthreadpool\",{\"1\":{\"7\":1}}],[\"no\",{\"1\":{\"184\":1}}],[\"non\",{\"0\":{\"113\":1,\"180\":1}}],[\"not\",{\"1\":{\"89\":1,\"125\":2,\"209\":1}}],[\"node跟npm指令有啥区别\",{\"0\":{\"199\":1}}],[\"node\",{\"1\":{\"16\":3,\"199\":4}}],[\"n+1\",{\"1\":{\"11\":1}}],[\"nthreads\",{\"1\":{\"7\":3}}],[\"poll\",{\"1\":{\"181\":1}}],[\"populate\",{\"1\":{\"61\":1}}],[\"private\",{\"1\":{\"153\":1}}],[\"protected\",{\"1\":{\"153\":1}}],[\"prototype\",{\"0\":{\"76\":1}}],[\"properties\",{\"1\":{\"61\":1}}],[\"prompt\",{\"1\":{\"45\":1,\"171\":1}}],[\"processworkerexit\",{\"1\":{\"18\":1}}],[\"persistence\",{\"1\":{\"82\":1}}],[\"parallel\",{\"1\":{\"30\":2}}],[\"parnew\",{\"1\":{\"30\":1}}],[\"passwordgloo\",{\"1\":{\"2\":1}}],[\"phantom\",{\"0\":{\"114\":1},\"1\":{\"21\":1}}],[\"public\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"69\":3,\"153\":1}}],[\"留下自己学习印迹\",{\"1\":{\"3\":1}}],[\"归档个人学习经验\",{\"1\":{\"3\":1}}],[\"联系信息\",{\"0\":{\"1\":1,\"4\":1}}]],\"version\":2}}")).map(([e,t])=>[e,mt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=bt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ee(t,r,o)]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ee(t,r,o)]})};
//# sourceMappingURL=index.js.map
