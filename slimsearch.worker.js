/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ze={},Ie=()=>{},Ce=Object.assign,Oe=Array.isArray,D=e=>typeof e=="function",Se=e=>typeof e=="string",Me=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Me));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Ne(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function xt(e){v.push(e)}function kt(){v.pop()}let W=!1;function Et(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Te();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...Fe(s)),console.warn(...r)}W=!1}function Te(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function Fe(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...$e(n))}),t}function $e({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Ve(e.props),r]:[s+r]}function Ve(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Se(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Ne(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):D(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||ze;if(t){let c=t.parent;const a=t.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const u=c.ec;if(u){for(let h=0;h<u.length;h++)if(u[h](e,a,l)===!1)return}c=c.parent}if(r){A(r,null,10,[e,a,l]);return}}Re(e,n,s,o,i)}function Re(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const I=[];let k=null,C=0;const je=Promise.resolve();let q=null;const De=100;function Le(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function Pe(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Le(t),0,e),e.flags|=1,te()}}function te(){q||(q=je.then(ne))}function We(e){Oe(e)?I.push(...e):k&&e.id===-1?k.splice(C+1,0,e):e.flags&1||(I.push(e),e.flags|=1),te()}function Ae(e){if(I.length){const t=[...new Set(I)].sort((n,o)=>M(n)-M(o));if(I.length=0,k){k.push(...t);return}for(k=t,C=0;C<k.length;C++){const n=k[C];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,C=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=Ie;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,Ae(e),q=null,(b.length||I.length)&&ne(e)}}function zt(e,t){const n=e.get(t)||0;if(n>De){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,T=new Map;function It(e,t){return T.has(e)?!1:(T.set(e,{initialDef:F(t),instances:new Set}),!0)}function F(e){return Ue(e)?e.__vccOpts:e}function Ct(e,t){const n=T.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,F(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=T.get(e);if(!n)return;t=F(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=F(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?Pe(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}We(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function St(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Mt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const qe=/(?:^|[-_])(\w)/g,He=e=>e.replace(qe,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return D(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?He(o):n?"App":"Anonymous"}function Ue(e){return D(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Je}=Object,{fromEntries:Ge}=Object,Be="ENTRIES",ie="KEYS",ce="VALUES",_="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=O(this._path);if(O(n)===_)return{done:!1,value:this.result()};const o=t.get(O(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=O(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>O(t)).filter(t=>t!==_).join("")}value(){return O(this._path).node.get(_)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const O=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const a=r*i;e:for(const l of e.keys())if(l===_){const u=s[a-1];u<=n&&o.set(c,[e.get(l),u])}else{let u=r;for(let h=0;h<l.length;++h,++u){const p=l[h],g=i*u,y=g-i;let f=s[g];const d=Math.max(0,u-n-1),w=Math.min(i-1,u+n);for(let m=d;m<w;++m){const R=p!==t[m],j=s[y+m]+ +R,N=s[y+m+1]+1,E=s[g+m]+1,S=s[g+m+1]=Math.min(j,N,E);S<f&&(f=S)}if(f>n)continue e}le(e.get(l),t,n,o,s,u,i,c+l)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=$(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new z(c,t)}}return new z(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Ye(this._tree,t)}entries(){return new U(this,Be)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(_):void 0}has(t){return J(this._tree,t)?.has(_)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(_,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(_,n(o.get(_))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(_);return s===void 0&&o.set(_,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new z;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return z.from(Object.entries(t))}}const $=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==_&&t.startsWith(o))return n.push([e,o]),$(e.get(o),t.slice(o.length),n);return n.push([e,t]),$(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==_&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==_&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const a=e.get(r);if(c===r.length)e=a;else{const l=new Map;l.set(r.slice(c),a),e.set(t.slice(o,o+c),l),e.delete(r),e=l}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Ye=(e,t)=>{const[n,o]=$(e,t);if(n!==void 0){if(n.delete(_),n.size===0)ue(o);else if(n.size===1){const[s,r]=n.entries().next().value;ae(o,s,r)}}},ue=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ue(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==_&&ae(e.slice(0,-1),o,s)}},ae=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Qe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Xe=/[\n\r\p{Z}\p{P}]+/u,K="or",fe="and",Ze="and_not",et=(e,t)=>{e.includes(t)||e.push(t)},de=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},he=({score:e},{score:t})=>t-e,tt=()=>new Map,V=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},pe=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ge={[K]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),de(o.terms,r)}}return e},[fe]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);de(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[Ze]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},nt=(e,t,n,o,s,r)=>{const{k:i,b:c,d:a}=r;return Math.log(1+(n-t+.5)/(t+.5))*(a+e*(i+1)/(e+i*(1-c+c*o/s)))},ot=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),me=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},st=(e,t,n,o)=>{if(!e._index.has(o)){me(e,n,t,o);return}const s=e._index.fetch(o,tt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?me(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},rt={k:1.2,b:.7,d:.5},it={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Xe),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},_e={combineWith:K,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:rt},ct={combineWith:fe,prefix:(e,t,n)=>t===n.length-1},lt={batchSize:1e3,batchWait:10},ye={minDirtFactor:.1,minDirtCount:20},ut={...lt,...ye},we=Symbol("*"),at=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},be=(e,t=K)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in ge))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(ge[n])},Y=(e,t,n,o,s,r,i,c,a,l=new Map)=>{if(r==null)return l;for(const u of Object.keys(i)){const h=i[u],p=e._fieldIds[u],g=r.get(p);if(g==null)continue;let y=g.size;const f=e._avgFieldLength[p];for(const d of g.keys()){if(!e._documentIds.has(d)){st(e,p,d,n),y-=1;continue}const w=c?c(e._documentIds.get(d),n,e._storedFields.get(d)):1;if(!w)continue;const m=g.get(d),R=e._fieldLength.get(d)[p],j=nt(m,y,e._documentCount,R,f,a),N=o*s*h*w*j,E=l.get(d);if(E){E.score+=N,et(E.terms,t);const S=pe(E.match,n);S?S.push(u):E.match[n]=[u]}else l.set(d,{score:N,terms:[t],match:{[n]:[u]}})}}return l},ft=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((f,d)=>({...f,[d]:pe(o.boost,d)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:a}=o,{fuzzy:l,prefix:u}={..._e.weights,...i},h=e._index.get(t.term),p=Y(e,t.term,t.term,1,t.termBoost,h,s,r,a);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const f=t.fuzzy===!0?.2:t.fuzzy,d=f<1?Math.min(c,Math.round(t.term.length*f)):f;d&&(y=e._index.fuzzyGet(t.term,d))}if(g)for(const[f,d]of g){const w=f.length-t.term.length;if(!w)continue;y?.delete(f);const m=u*f.length/(f.length+.3*w);Y(e,t.term,f,m,t.termBoost,d,s,r,a,p)}if(y)for(const f of y.keys()){const[d,w]=y.get(f);if(!w)continue;const m=l*f.length/(f.length+w);Y(e,t.term,f,m,t.termBoost,d,s,r,a,p)}return p},xe=(e,t,n={})=>{if(t===we)return at(e,n);if(typeof t!="string"){const u={...n,...t,queries:void 0},h=t.queries.map(p=>xe(e,p,u));return be(h,u.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:a}=i,l=c(t).flatMap(u=>a(u)).filter(u=>!!u).map(ot(i)).map(u=>ft(e,u,i));return be(l,i.combineWith)},ke=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=xe(e,t,n),i=[];for(const[c,{score:a,terms:l,match:u}]of r){const h=l.length||1,p={id:e._documentIds.get(c),score:a*h,terms:Object.keys(u),queryTerms:l,match:u};Object.assign(p,e._storedFields.get(c)),(s.filter==null||s.filter(p))&&i.push(p)}return t===we&&s.boostDocument==null||i.sort(he),i},dt=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of ke(e,t,n)){const c=i.join(" "),a=o.get(c);a!=null?(a.score+=r,a.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:a}]of o)s.push({suggestion:r,terms:c,score:i/a});return s.sort(he),s};class ht{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?ut:t.autoVacuum;this._options={...it,...t,autoVacuum:n,searchOptions:{..._e,...t.searchOptions},autoSuggestOptions:{...ct,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=ye,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const pt=e=>new ht(e),gt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=pt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new z,c},mt=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=gt(e,t);i._documentIds=V(o),i._fieldLength=V(s),i._storedFields=V(r);for(const[c,a]of i._documentIds)i._idToShortId.set(a,c);for(const[c,a]of n){const l=new Map;for(const u of Object.keys(a))l.set(parseInt(u,10),V(a[u]));i._index.set(c,l)}return i},{entries:_t}=Object,Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(l,u=!1)=>{let h;i===0?h=l.length>20?`… ${l.slice(-20)}`:l:u?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&s.push(h),i+=h.length,u||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let a=n.indexOf(o,r);if(a===-1)return null;for(;a>=0;){const l=a+o.length;if(c(e.slice(r,a)),r=l,i>100)break;a=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},yt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),wt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ee=(e,t,n={})=>{const o={};return ke(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(s=>{const{id:r,terms:i,score:c}=s,a=r.includes("@"),l=r.includes("#"),[u,h]=r.split(/[#@]/),p=Number(u),g=i.sort((f,d)=>f.length-d.length).filter((f,d)=>i.slice(d+1).every(w=>!w.includes(f))),{contents:y}=o[p]??={title:"",contents:[]};if(a)y.push([{type:"customField",id:p,index:h,display:g.map(f=>s.c.map(d=>Q(d,f))).flat().filter(f=>f!==null)},c]);else{const f=g.map(d=>Q(s.h,d)).filter(d=>d!==null);if(f.length&&y.push([{type:l?"heading":"title",id:p,...l&&{anchor:h},display:f},c]),"t"in s&&s.t)for(const d of s.t){const w=g.map(m=>Q(d,m)).filter(m=>m!==null);w.length&&y.push([{type:"text",id:p,...l&&{anchor:h},display:w},c])}}}),_t(o).sort(([,s],[,r])=>"max"==="total"?yt(s,r):wt(s,r)).map(([s,{title:r,contents:i}])=>{if(!r){const c=Qe(t,s);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},ve=(e,t,n={})=>{const o=dt(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},bt=Ge(Je(JSON.parse("{\"/en/\":{\"documentCount\":4,\"nextId\":4,\"documentIds\":{\"0\":\"3\",\"1\":\"3#tutorial-usage\",\"2\":\"3#project-purpose\",\"3\":\"3#contact-information\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[2,6],\"2\":[2,14],\"3\":[2,4]},\"averageFieldLength\":[1.75,6.25],\"storedFields\":{\"0\":{\"h\":\"About\",\"t\":[\"Passwordgloo\"]},\"1\":{\"h\":\"Tutorial Usage\",\"t\":[\"Access lanzou cloud, password is 666\"]},\"2\":{\"h\":\"Project purpose\",\"t\":[\"File personal learning experiences\",\"Leave a trace of your own learning\",\"Inspire others' intellectual sparks\"]},\"3\":{\"h\":\"Contact information\",\"t\":[\"Github\",\"Gmail\",\"163 Mail\"]}},\"dirtCount\":0,\"index\":[[\"mail\",{\"1\":{\"3\":1}}],[\"163\",{\"1\":{\"3\":1}}],[\"gmail\",{\"1\":{\"3\":1}}],[\"github\",{\"1\":{\"3\":1}}],[\"contact\",{\"0\":{\"3\":1}}],[\"cloud\",{\"1\":{\"1\":1}}],[\"sparks\",{\"1\":{\"2\":1}}],[\"information\",{\"0\":{\"3\":1}}],[\"intellectual\",{\"1\":{\"2\":1}}],[\"inspire\",{\"1\":{\"2\":1}}],[\"is\",{\"1\":{\"1\":1}}],[\"others\",{\"1\":{\"2\":1}}],[\"own\",{\"1\":{\"2\":1}}],[\"of\",{\"1\":{\"2\":1}}],[\"your\",{\"1\":{\"2\":1}}],[\"trace\",{\"1\":{\"2\":1}}],[\"tutorial\",{\"0\":{\"1\":1}}],[\"experiences\",{\"1\":{\"2\":1}}],[\"leave\",{\"1\":{\"2\":1}}],[\"learning\",{\"1\":{\"2\":2}}],[\"lanzou\",{\"1\":{\"1\":1}}],[\"file\",{\"1\":{\"2\":1}}],[\"personal\",{\"1\":{\"2\":1}}],[\"purpose\",{\"0\":{\"2\":1}}],[\"project\",{\"0\":{\"2\":1}}],[\"password\",{\"1\":{\"1\":1}}],[\"passwordgloo\",{\"1\":{\"0\":1}}],[\"666\",{\"1\":{\"1\":1}}],[\"a\",{\"1\":{\"2\":1}}],[\"access\",{\"1\":{\"1\":1}}],[\"about\",{\"0\":{\"0\":1}}],[\"usage\",{\"0\":{\"1\":1}}]],\"version\":2},\"/\":{\"documentCount\":292,\"nextId\":292,\"documentIds\":{\"0\":\"0\",\"1\":\"0#联系信息\",\"2\":\"1\",\"3\":\"1#项目用途\",\"4\":\"1#联系信息\",\"5\":\"4\",\"6\":\"5\",\"7\":\"6\",\"8\":\"6#线程池种类\",\"9\":\"6#创建固定线程数的线程池\",\"10\":\"6#单线程化的线程池\",\"11\":\"6#可缓存线程池\",\"12\":\"6#定时线程池\",\"13\":\"6#核心线程数的确定\",\"14\":\"6#阻塞队列\",\"15\":\"6#arrayblockingqueue\",\"16\":\"6#linkedblockingqueue\",\"17\":\"6#synchronousqueue\",\"18\":\"6#delayedworkqueue\",\"19\":\"6#拒绝策略\",\"20\":\"6#java-线程池怎么实现线程自动回收\",\"21\":\"6#threadlocalmap的引用类型\",\"22\":\"6#为什么-threadlocalmap-的键-key-是弱引用-weak-reference\",\"23\":\"6#为什么-threadlocalmap的值-value-是强引用\",\"24\":\"6#线程池任务提交及执行流程\",\"25\":\"6#inheritablethreadlocal原理\",\"26\":\"6#threadlocal改进的框架或者工具\",\"27\":\"6#死锁\",\"28\":\"6#手撕sychronized死锁\",\"29\":\"7\",\"30\":\"7#类加载过程\",\"31\":\"7#加载-loading\",\"32\":\"7#连接-验证、准备、解析\",\"33\":\"7#初始化、使用、卸载\",\"34\":\"7#垃圾收集器\",\"35\":\"7#静态代理、动态代理\",\"36\":\"7#双亲委派\",\"37\":\"7#为什么使用双亲委派\",\"38\":\"7#类加载时成员变量和静态成员变量的初始化时机\",\"39\":\"7#未使用-static-修饰的成员变量和成员对象\",\"40\":\"7#使用-static-修饰的成员变量\",\"41\":\"7#初始化时机的比较\",\"42\":\"8\",\"43\":\"8#javascript是什么\",\"44\":\"8#javascript作用\",\"45\":\"8#javascript的组成\",\"46\":\"8#javascript书写位置\",\"47\":\"8#javascript注释\",\"48\":\"8#单行注释\",\"49\":\"8#块注释\",\"50\":\"8#javascript结束符\",\"51\":\"8#输入和输出语法\",\"52\":\"8#输出语法\",\"53\":\"8#输入语法\",\"54\":\"9\",\"55\":\"9#spring-ioc-容器构建\",\"56\":\"9#spring-boot-与-spring-mvc-的区别\",\"57\":\"9#spring-boot\",\"58\":\"9#spring-mvc\",\"59\":\"9#spring-cloud\",\"60\":\"9#spring-boot-与-spring-mvc-的关系\",\"61\":\"9#controller-与-restcontroller-的区别\",\"62\":\"9#restcontroller\",\"63\":\"9#controller\",\"64\":\"9#responsebody\",\"65\":\"9#spring-boot-自动配置类\",\"66\":\"9#工作流程总结\",\"67\":\"9#spring-注解概览\",\"68\":\"9#component-与-bean\",\"69\":\"9#autowired-与-resource\",\"70\":\"9#bean-的生命周期\",\"71\":\"9#bean-的线程安全性\",\"72\":\"9#有状态-bean\",\"73\":\"9#无状态-bean\",\"74\":\"9#spring-mvc-工作原理\",\"75\":\"9#统一异常处理\",\"76\":\"9#controlleradvice\",\"77\":\"9#exceptionhandler\",\"78\":\"9#示例\",\"79\":\"9#循环依赖及其解决方案\",\"80\":\"9#使用-lazy注解\",\"81\":\"9#三级缓存机制\",\"82\":\"9#处理循环依赖\",\"83\":\"9#spring-bean-作用域\",\"84\":\"9#singleton\",\"85\":\"9#prototype\",\"86\":\"9#request\",\"87\":\"9#session\",\"88\":\"9#异常处理类\",\"89\":\"9#controlleradvice-1\",\"90\":\"9#exceptionhandler-1\",\"91\":\"9#jpa注解\",\"92\":\"9#entity\",\"93\":\"9#id\",\"94\":\"9#generatedvalue\",\"95\":\"9#transient\",\"96\":\"9#事务管理\",\"97\":\"9#transactional\",\"98\":\"9#spring事务传播行为\",\"99\":\"9#dao接口工作原理\",\"100\":\"9#spring-框架中的设计模式\",\"101\":\"9#工厂模式-factory-pattern\",\"102\":\"9#单例模式-singleton-pattern\",\"103\":\"9#代理模式-proxy-pattern\",\"104\":\"9#模板模式-template-pattern\",\"105\":\"9#观察者模式-observer-pattern\",\"106\":\"9#spring-boot-简介\",\"107\":\"9#优点\",\"108\":\"9#spring-boot-核心注解\",\"109\":\"9#springbootapplication\",\"110\":\"9#springbootconfiguration\",\"111\":\"9#enableautoconfiguration\",\"112\":\"9#componentscan\",\"113\":\"9#spring-设计模式\",\"114\":\"9#控制反转-ioc-模式\",\"115\":\"9#工厂模式\",\"116\":\"9#单例模式\",\"117\":\"9#模板方法模式\",\"118\":\"9#观察者模式\",\"119\":\"9#策略模式\",\"120\":\"9#代理模式\",\"121\":\"9#适配器模式\",\"122\":\"9#spring-mvc-请求处理流程\",\"123\":\"10\",\"124\":\"10#从输入-url-到页面展示的过程\",\"125\":\"10#tcp三次握手与四次挥手\",\"126\":\"10#tcp三次握手\",\"127\":\"10#tcp四次挥手\",\"128\":\"11\",\"129\":\"11#数据类型分类\",\"130\":\"11#基本数据类型\",\"131\":\"11#number\",\"132\":\"11#string\",\"133\":\"11#字符串含义\",\"134\":\"11#字符串拼接\",\"135\":\"11#模板字符串\",\"136\":\"11#boolean\",\"137\":\"11#undefined\",\"138\":\"11#null\",\"139\":\"11#引用数据类型\",\"140\":\"11#object\",\"141\":\"11#function\",\"142\":\"11#array\",\"143\":\"11#检测数据类型\",\"144\":\"11#数据类型转换\",\"145\":\"11#隐式转换\",\"146\":\"11#显式转换\",\"147\":\"12\",\"148\":\"12#并发数据库操作中的读取问题\",\"149\":\"12#脏读-dirty-read\",\"150\":\"12#不可重复读-non-repeatable-read\",\"151\":\"12#幻读-phantom-read\",\"152\":\"12#隔离级别\",\"153\":\"12#聚簇索引\",\"154\":\"12#非聚簇索引-二级索引\",\"155\":\"12#索引覆盖-减少回表次数\",\"156\":\"12#myisam-与-innodb-存储引擎的区别\",\"157\":\"12#事务支持\",\"158\":\"12#锁定级别\",\"159\":\"12#外键支持\",\"160\":\"12#acid-支持\",\"161\":\"12#性能\",\"162\":\"12#索引失效\",\"163\":\"12#drop、truncate、delete-操作比较\",\"164\":\"12#exist-与-in-的区别\",\"165\":\"12#exist\",\"166\":\"12#in\",\"167\":\"12#性能考虑\",\"168\":\"12#not-exists-与-not-in-的区别\",\"169\":\"12#not-in\",\"170\":\"12#not-exists\",\"171\":\"12#性能比较\",\"172\":\"12#sql-优化建议\",\"173\":\"12#事务\",\"174\":\"12#myisam\",\"175\":\"12#innodb\",\"176\":\"12#memory\",\"177\":\"12#sql-排查及优化指南\",\"178\":\"12#_1-开启慢查询日志\",\"179\":\"12#_2-查看慢查询日志\",\"180\":\"12#_3-使用-explain-查看-sql-执行计划\",\"181\":\"12#explain-的-type-字段性能排序\",\"182\":\"12#sql-执行顺序\",\"183\":\"12#mysql-与-elasticsearch-数据一致性实现\",\"184\":\"12#同步调用-双写\",\"185\":\"12#异步通知-消息队列\",\"186\":\"12#监听-binlog-日志监听\",\"187\":\"12#elasticsearch倒派索引\",\"188\":\"13\",\"189\":\"13#引用拷贝、深拷贝、浅拷贝\",\"190\":\"13#引用拷贝\",\"191\":\"13#深拷贝\",\"192\":\"13#浅拷贝\",\"193\":\"13#string、stringbuilder、stringbuffer\",\"194\":\"13#可变性\",\"195\":\"13#安全性\",\"196\":\"13#性能方面\",\"197\":\"13#自动拆装箱\",\"198\":\"13#装箱\",\"199\":\"13#拆箱\",\"200\":\"13#重载、重写\",\"201\":\"13#重载\",\"202\":\"13#重写\",\"203\":\"13#char、varchar\",\"204\":\"13#可变性-1\",\"205\":\"13#性能方面-1\",\"206\":\"13#使用\",\"207\":\"13#和-equals-的区别\",\"208\":\"13#equals\",\"209\":\"13#string-intern\",\"210\":\"13#static-关键字\",\"211\":\"13#静态导包\",\"212\":\"13#内部类\",\"213\":\"13#java-异常类型及原理\",\"214\":\"13#字节流与字符流的区别\",\"215\":\"13#java-访问权限\",\"216\":\"13#接口知识\",\"217\":\"13#jdk-8-新特性\",\"218\":\"13#匿名内部类\",\"219\":\"13#java-中-integer-对象的自动装箱和-操作符\",\"220\":\"14\",\"221\":\"14#三大消息队列区别\",\"222\":\"14#mq-消息丢失问题及解决方案\",\"223\":\"14#信息到-mq\",\"224\":\"14#信息路由到队列\",\"225\":\"14#消息在队列正确存储\",\"226\":\"14#队列投递到消费者\",\"227\":\"15\",\"228\":\"15#算术运算符\",\"229\":\"15#赋值运算符\",\"230\":\"15#一元运算符\",\"231\":\"15#比较运算符\",\"232\":\"15#逻辑运算符\",\"233\":\"15#逻辑运算符短路\",\"234\":\"15#逻辑运算符中断\",\"235\":\"15#运算符优先级\",\"236\":\"16\",\"237\":\"16#python的输入-输出方法\",\"238\":\"16#输出\",\"239\":\"16#输入\",\"240\":\"16#注释\",\"241\":\"16#注释-1\",\"242\":\"16#变量的命名规则\",\"243\":\"16#常量的定义\",\"244\":\"16#python-基本数据类型\",\"245\":\"17\",\"246\":\"17#redis有几种集群模式-高可用\",\"247\":\"17#分布式cap原理\",\"248\":\"17#redis存储结构\",\"249\":\"17#redis快的原因\",\"250\":\"17#bio、nio-和-i-o-多路复用的区别\",\"251\":\"17#bio-blocking-i-o\",\"252\":\"17#nio-non-blocking-i-o\",\"253\":\"17#i-o-多路复用\",\"254\":\"17#redis持久机制\",\"255\":\"17#redis过期策略\",\"256\":\"17#redis淘汰策略\",\"257\":\"17#redis-数据结构存储方式\",\"258\":\"17#hash\",\"259\":\"17#list\",\"260\":\"17#set\",\"261\":\"17#sorted-set-zset\",\"262\":\"17#重写aof\",\"263\":\"18\",\"264\":\"18#表达式和语句\",\"265\":\"18#流程控制语句\",\"266\":\"18#顺序\",\"267\":\"18#分支\",\"268\":\"18#if分支语句\",\"269\":\"18#三元运算符\",\"270\":\"18#switch语句\",\"271\":\"18#循环\",\"272\":\"18#while\",\"273\":\"18#for\",\"274\":\"18#循环结束\",\"275\":\"19\",\"276\":\"19#电脑用户变量和系统变量那个优先级高\",\"277\":\"19#node跟npm指令有啥区别\",\"278\":\"19#anaconda-简介\",\"279\":\"19#ddos-攻击-分布式拒绝服务攻击\",\"280\":\"19#攻击方式\",\"281\":\"19#防御措施\",\"282\":\"20\",\"283\":\"20#声明变量\",\"284\":\"20#变量赋值\",\"285\":\"20#更新变量\",\"286\":\"20#变量初始化\",\"287\":\"20#变量命名规则与规范\",\"288\":\"20#命名规则\",\"289\":\"20#命名规范\",\"290\":\"20#声明变量规范\",\"291\":\"21\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,8],\"1\":[1,3],\"2\":[1,1],\"3\":[1,3],\"4\":[1,3],\"5\":[1,36],\"6\":[1,2],\"7\":[1],\"8\":[1],\"9\":[1,22],\"10\":[1,21],\"11\":[1,24],\"12\":[1,32],\"13\":[1,12],\"14\":[1],\"15\":[1,12],\"16\":[1,16],\"17\":[1,10],\"18\":[1,36],\"19\":[1,11],\"20\":[3,14],\"21\":[1,9],\"22\":[8,38],\"23\":[5,16],\"24\":[1,49],\"25\":[1,37],\"26\":[1,21],\"27\":[1,15],\"28\":[1,33],\"29\":[1],\"30\":[1],\"31\":[3,2],\"32\":[5,21],\"33\":[3,4],\"34\":[1,49],\"35\":[2,17],\"36\":[1,6],\"37\":[1,12],\"38\":[1,6],\"39\":[3,6],\"40\":[3,12],\"41\":[1,9],\"42\":[1,2],\"43\":[1,1],\"44\":[1,3],\"45\":[1,5],\"46\":[1],\"47\":[1],\"48\":[1,5],\"49\":[1,6],\"50\":[1,3],\"51\":[1],\"52\":[1,9],\"53\":[1,3],\"54\":[1],\"55\":[3,39],\"56\":[5,8],\"57\":[2,24],\"58\":[2,23],\"59\":[2,17],\"60\":[5,16],\"61\":[4,12],\"62\":[1,20],\"63\":[1,15],\"64\":[2,12],\"65\":[3,39],\"66\":[1,17],\"67\":[2,11],\"68\":[4,13],\"69\":[4,20],\"70\":[3,52],\"71\":[2,7],\"72\":[2,8],\"73\":[2,9],\"74\":[3,51],\"75\":[1,12],\"76\":[2,12],\"77\":[2,10],\"78\":[1,26],\"79\":[1,13],\"80\":[2,7],\"81\":[1,20],\"82\":[1,15],\"83\":[3,10],\"84\":[1,17],\"85\":[1,13],\"86\":[1,14],\"87\":[1,15],\"88\":[1,5],\"89\":[2,5],\"90\":[2,4],\"91\":[1,7],\"92\":[2,4],\"93\":[2,6],\"94\":[2,10],\"95\":[2,4],\"96\":[1],\"97\":[2,10],\"98\":[1,27],\"99\":[1,5],\"100\":[2,5],\"101\":[4,10],\"102\":[4,10],\"103\":[4,11],\"104\":[4,12],\"105\":[4,9],\"106\":[3,9],\"107\":[1,48],\"108\":[3,6],\"109\":[2,11],\"110\":[2,5],\"111\":[2,7],\"112\":[2,18],\"113\":[2,4],\"114\":[3,13],\"115\":[1,13],\"116\":[1,10],\"117\":[1,9],\"118\":[1,10],\"119\":[1,7],\"120\":[1,7],\"121\":[1,8],\"122\":[3,50],\"123\":[1],\"124\":[3,62],\"125\":[1],\"126\":[1,26],\"127\":[1,23],\"128\":[1],\"129\":[1],\"130\":[1],\"131\":[1,6],\"132\":[1],\"133\":[1,4],\"134\":[1,12],\"135\":[1,11],\"136\":[1,5],\"137\":[1,2],\"138\":[1,2],\"139\":[1],\"140\":[1],\"141\":[1],\"142\":[1],\"143\":[1,8],\"144\":[1],\"145\":[1,14],\"146\":[1],\"147\":[2],\"148\":[1,5],\"149\":[4,7],\"150\":[5,9],\"151\":[4,9],\"152\":[1,21],\"153\":[1,7],\"154\":[3,3],\"155\":[3,3],\"156\":[4,13],\"157\":[1,5],\"158\":[1,8],\"159\":[1,6],\"160\":[2,10],\"161\":[1,13],\"162\":[1,43],\"163\":[4,18],\"164\":[4,8],\"165\":[1,13],\"166\":[1,8],\"167\":[1,10],\"168\":[5,10],\"169\":[2,8],\"170\":[2,13],\"171\":[1,26],\"172\":[2,42],\"173\":[1,5],\"174\":[1,2],\"175\":[1,2],\"176\":[1,3],\"177\":[2,5],\"178\":[2,4],\"179\":[2,5],\"180\":[6,7],\"181\":[4,33],\"182\":[2,42],\"183\":[4,7],\"184\":[3,15],\"185\":[3,17],\"186\":[4,18],\"187\":[1,6],\"188\":[1],\"189\":[3],\"190\":[1,3],\"191\":[1,3],\"192\":[1,4],\"193\":[3],\"194\":[1,15],\"195\":[1,9],\"196\":[1,5],\"197\":[1],\"198\":[1,2],\"199\":[1,2],\"200\":[2],\"201\":[1,3],\"202\":[1,5],\"203\":[2],\"204\":[1,6],\"205\":[1,6],\"206\":[1,7],\"207\":[4,7],\"208\":[1,3],\"209\":[3,8],\"210\":[2,5],\"211\":[1,3],\"212\":[1,3],\"213\":[2,15],\"214\":[1,19],\"215\":[2,10],\"216\":[1],\"217\":[3,12],\"218\":[1,2],\"219\":[6,19],\"220\":[1],\"221\":[1,21],\"222\":[2,6],\"223\":[2,23],\"224\":[1,17],\"225\":[1,20],\"226\":[1,24],\"227\":[1],\"228\":[1,9],\"229\":[1,6],\"230\":[1,10],\"231\":[1,12],\"232\":[1,14],\"233\":[1,9],\"234\":[1,10],\"235\":[1,31],\"236\":[1,3],\"237\":[2],\"238\":[1,4],\"239\":[1,7],\"240\":[1],\"241\":[1,7],\"242\":[1,15],\"243\":[1,4],\"244\":[2,9],\"245\":[1],\"246\":[2,28],\"247\":[1,11],\"248\":[1,6],\"249\":[1,16],\"250\":[6,13],\"251\":[5,16],\"252\":[6,24],\"253\":[3,21],\"254\":[1,26],\"255\":[1,9],\"256\":[1,32],\"257\":[2],\"258\":[1,15],\"259\":[1,18],\"260\":[1,16],\"261\":[4,17],\"262\":[1,12],\"263\":[1],\"264\":[1,10],\"265\":[1],\"266\":[1,1],\"267\":[1],\"268\":[1],\"269\":[1,4],\"270\":[1,13],\"271\":[1,3],\"272\":[1,5],\"273\":[1,6],\"274\":[1,5],\"275\":[1],\"276\":[2,6],\"277\":[2,14],\"278\":[2,13],\"279\":[3,10],\"280\":[1,18],\"281\":[1,11],\"282\":[1,12],\"283\":[1,7],\"284\":[1,9],\"285\":[1,12],\"286\":[1,11],\"287\":[1,7],\"288\":[1,8],\"289\":[1,3],\"290\":[1,6],\"291\":[1,3]},\"averageFieldLength\":[1.7089041095890412,12.984171583805459],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"陈国鹏 24 汉族 江西南昌 南昌大学 计算机技术 随时到岗 \"]},\"1\":{\"h\":\"联系信息\",\"t\":[\"qqmail\",\"163邮箱\",\"添加好友\"]},\"2\":{\"h\":\"关于\",\"t\":[\"Passwordgloo\"]},\"3\":{\"h\":\"项目用途\",\"t\":[\"归档个人学习经验\",\"留下自己学习印迹\",\"启迪他人思想火花\"]},\"4\":{\"h\":\"联系信息\",\"t\":[\"Github\",\"qqmail\",\"163邮箱\"]},\"5\":{\"h\":\"\",\"t\":[\"import java.util.Base64;\",\"public class Base64Util { public Base64Util() { }\",\"public static String decode(String base64String) { if (base64String == null) { return base64String; } else { try { byte[] decodedBytes = Base64.getDecoder().decode(base64String); String decodedString = new String(decodedBytes); return decodedString; } catch (Exception var3) { Exception e = var3; throw new RuntimeException(e); } } } public static String encode(String str) { String s = null; if (str == null) { return str; } else { try { s = Base64.getEncoder().encodeToString(str.getBytes()); return s; } catch (Exception var3) { Exception e = var3; throw new RuntimeException(e); } } } \",\"}\"]},\"6\":{\"h\":\"\",\"t\":[\"提示\",\"一些好用的工具类\"]},\"7\":{\"h\":\"多线程\"},\"8\":{\"h\":\"线程池种类\"},\"9\":{\"h\":\"创建固定线程数的线程池\",\"t\":[\"public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>()); } \",\"核心线程数与最大线程数一样：没有救急线程。\",\"阻塞队列是 LinkedBlockingQueue：最大容量为 Integer.MAX_VALUE。\"]},\"10\":{\"h\":\"单线程化的线程池\",\"t\":[\"public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService( new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())); } \",\"核心线程数和最大线程数都是 1。\",\"阻塞队列是 LinkedBlockingQueue，最大容量为 Integer.MAX_VALUE。\"]},\"11\":{\"h\":\"可缓存线程池\",\"t\":[\"public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()); } \",\"核心线程数为 0：线程池不会保留核心线程。\",\"最大线程数是 Integer.MAX_VALUE：理论上可以创建无限多的线程。\",\"阻塞队列为 SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。\"]},\"12\":{\"h\":\"定时线程池\",\"t\":[\"核心线程自己定，最大线程MAX\",\"不建议用 Executors 创建线程池\",\"FixedThreadPool 和 SingleThreadPool：\",\"允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\",\"CachedThreadPool：\",\"允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\",\"推荐的做法\",\"使用ThreadPoolExecutor直接创建线程池，明确线程池的各项参数，避免资源耗尽的风险\",\"CountDownLatch\",\"CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。\",\"CountDownLatch latch = new CountDownLatch(count);\",\"latch.countDown();\",\"latch.await();\"]},\"13\":{\"h\":\"核心线程数的确定\",\"t\":[\"IO密集型任务\",\"一般来说：文件读写、DB读写、网络请求等\",\"核心线程数大小设置为 2N+1\",\"CPU密集型任务\",\"一般来说：计算型代码、Bitmap转换、Gson转换等\",\"核心线程数大小设置为 N+1\"]},\"14\":{\"h\":\"阻塞队列\"},\"15\":{\"h\":\"ArrayBlockingQueue\",\"t\":[\"适用场景：适用于固定数量任务的排队处理，例如，当需要限制线程池中任务的数量时使用，防止生产速度大于消费速度。\",\"线程安全：使用 ReentrantLock在操作前后加锁来保证线程安全。\",\"公平性：初始化时，可以指定使用公平锁或者非公平锁。\"]},\"16\":{\"h\":\"LinkedBlockingQueue\",\"t\":[\"适用场景：适用于任务量较大的场景，例如一个大型电商平台的订单处理系统，每天会接收到大量的订单请求，这些请求需要被逐一处理和记录。\",\"线程安全：分别使用了读写两把锁，比 ArrayBlockingQueue性能更好。\",\"公平性：只支持非公平锁。\",\"使用示例：FixedThreadPool 和 SingleThreadExecutor。\"]},\"17\":{\"h\":\"SynchronousQueue\",\"t\":[\"特点：不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作。\",\"适用场景：适用于任务直接提交给线程而不进行排队的场景，可以指定使用公平策略还是非公平策略。\",\"优势：适用于生产者与消费者速度相匹配的场景，可减少任务执行的等待时间。\"]},\"18\":{\"h\":\"DelayedWorkQueue\",\"t\":[\"特点：ScheduledThreadPoolExecutor 常见的例子，例如使用一个 DelayedWorkQueue 来管理一个超时未响应的连接队列。\",\"线程安全：内部使用 ReentrantLock 加锁。\",\"::: wrong LinkedBlockingQueue 和 ArrayBlockingQueue 的区别 容量：\",\"LinkedBlockingQueue 默认无界，支持有界。\",\"ArrayBlockingQueue 强制有界。\",\"底层数据结构：\",\"LinkedBlockingQueue 底层是链表。\",\"ArrayBlockingQueue 底层是数组。\",\"内存管理：\",\"LinkedBlockingQueue 是懒惰的，创建节点的时候添加数据。\",\"ArrayBlockingQueue 需要提前初始化 Node 数组。\",\"入队操作：\",\"LinkedBlockingQueue 入队会生成新 Node。\",\"ArrayBlockingQueue Node 需要是提前创建好的。\",\"锁机制：\",\"LinkedBlockingQueue 使用两把锁（头尾）。\",\"ArrayBlockingQueue 使用一把锁。 :::\"]},\"19\":{\"h\":\"拒绝策略\",\"t\":[\"AbortPolicy：\",\"直接抛出异常，默认策略。\",\"CallerRunsPolicy：\",\"用调用者所在的线程来执行任务。\",\"DiscardOldestPolicy：\",\"丢弃阻塞队列中最靠前的任务，并执行当前任务。\",\"DiscardPolicy：\",\"直接丢弃任务。\"]},\"20\":{\"h\":\"Java 线程池怎么实现线程自动回收？\",\"t\":[\"线程池通过 worker 线程循环获取任务。\",\"超时判断在 getTask() 中完成，超时后触发线程回收。\",\"回收流程由 processWorkerExit() 方法完成，包括任务统计、移除线程和判断是否补充线程。\",\"线程回收和补充机制确保线程池的动态调整和资源优化。\"]},\"21\":{\"h\":\"ThreadLocalMap的引用类型\",\"t\":[\"answer\",\"ThreadLocalMap 的 key 是弱引用，而 value 是强引用。\"]},\"22\":{\"h\":\"为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？\",\"t\":[\"弱引用意味着，如果没有其他引用对象的强引用关系，那么这个仅被弱引用的对象在下次垃圾回收（GC）时就会被回收掉，这样在一定程度上降低了内存泄漏的风险。但同时也引入了新的问题，即键虽然被回收了，但是值对象还在，我们无法获取，也无法删除，这样也会存在内存泄漏的风险。虽然 ThreadLocalMap 中在进行 set 和 get 操作时会进行启发式清理和探测式清理，清理一部分键为 null 的 Entry 对象，但是这只是一种后备选择，最重要的还是开发人员在编写代码时记得在使用完数据后及时调用 remove() 方法手动清理。\",\"内存泄漏\",\"有些对象已经不再使用了，但是由于没有正确处理对象的引用关系，使得这个无用的对象还一直被 GC Root 直接或间接引用着，垃圾回收时就无法清理掉这些对象，如果这类对象存在很多，就会导致内存泄漏。\"]},\"23\":{\"h\":\"为什么 ThreadLocalMap的值（Value）是强引用？\",\"t\":[\"如果值是弱引用，那么在没有其他强引用指向这个值的情况下，值可能会在任何时候被垃圾回收器回收。这将导致 ThreadLocal 无法正确地存储和检索数据，因为它们可能会在不被期望的情况下突然消失。\",\"强引用保证数据完整性：使用强引用作为 ThreadLocalMap的值确保了只要ThreadLocal对象存在，其关联的数据值也会一直存在，直到显式地通过remove()方法或线程结束时清理。这样可以保证数据的完整性和一致性，避免因垃圾回收导致的潜在错误。\"]},\"24\":{\"h\":\"线程池任务提交及执行流程\",\"t\":[\"当向线程池提交一个新任务时，具体的执行流程如下：\",\"创建线程执行任务：\",\"线程池会根据 corePoolSize（核心线程数）的大小创建相应数量的线程来执行任务。\",\"任务进入阻塞队列：\",\"当任务数量超过 corePoolSize 后，后续的任务将进入阻塞队列（work queue）。\",\"创建额外线程：\",\"如果阻塞队列也满了，线程池将继续创建 (maximumPoolSize - corePoolSize) 个数量的线程来执行任务。\",\"任务处理完成后，这些额外创建的线程在等待 keepAliveTime 时间后将被自动销毁。\",\"达到最大线程数：\",\"如果达到 maximumPoolSize，且阻塞队列仍然满，则根据不同的拒绝策略进行处理。\",\"::: threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了\",\"两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。\",\":::\",\"Java中的引用类型\",\"强引用（Strong Reference）：\",\"只要引用还存在就不会被回收。\",\"软引用（Soft Reference）：\",\"JVM内存不足时，才会回收软引用指向的对象。\",\"弱引用（Weak Reference）：\",\"被垃圾回收线程发现就会被回收。\",\"虚引用（Phantom Reference）：\",\"必须和引用队列一起使用，主要是跟踪垃圾回收。。\"]},\"25\":{\"h\":\"InheritableThreadLocal原理\",\"t\":[\"InheritableThreadLocal在子线程创建时从父线程拷贝值。具体来说，这个拷贝过程发生在 Java 线程创建时的初始化阶段。\",\"当一个线程（父线程）创建一个新的线程（子线程）时，JVM 会检查父线程中的 InheritableThreadLocal变量，并将这些变量的值复制到子线程中。这样，子线程就可以访问到父线程中 InheritableThreadLocal 变量的值。\",\"线程池中的线程在完成任务后不会立即销毁，而是会被放回池中重用。这意味着如果使用 InheritableThreadLocal存储上下文信息，那么这些信息可能会被重用的线程意外地继承，导致数据错乱。\",\"在使用InheritableThreadLocal 时，需要特别注意线程池的使用场景，确保不会因线程重用而导致数据不一致的问题。通常建议在任务执行完毕后清除InheritableThreadLocal的值，以避免潜在的数据泄露风险。\",\"::: wrong threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了\",\"两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。 :::\"]},\"26\":{\"h\":\"ThreadLocal改进的框架或者工具\",\"t\":[\"数据扩容机制\",\"FastThreadLocal： 扩容时将原数据拷贝到新数组。 扩容过程简单高效。 ThreadLocal： 使用哈希表存储数据。 扩容后需要重新哈希（rehash），效率较低。\",\"安全性 ThreadLocal： 使用不当可能导致内存泄漏。 在线程池场景下，只能通过主动检测来防止内存泄漏，增加了开销。 FastThreadLocal： 提供了 remove() 方法，允许主动清除对象。 在任务执行完成后会自动触发清除机制，减少了内存泄漏的风险。\"]},\"27\":{\"h\":\"死锁\",\"t\":[\"死锁是在并发条件下，两个线程互相等待对方资源而进入无尽等待中\",\"死锁发生的必要条件是1资源互斥2循环等待3抢占且等待4不可抢占\",\"因此为了避免死锁，我们可以破坏其中任一条件\",\"如何避免\",\"1：通过算法有序获取锁\",\"2：发生死锁时，让一个线程强制获取资源\",\"3：通过trylock,为不同线程设置不同的资源申请时间。\"]},\"28\":{\"h\":\"手撕sychronized死锁\",\"t\":[\"public class SyncDeadlock { public static Object lock1 = new Object(); public static Object lock2 = new Object(); public static void main(String[] args) { Thread t1 = new Thread(() -> { synchronized (lock1) { System.out.println(\\\"Thread 1 locked lock1\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (lock2) { System.out.println(\\\"Thread 1 locked lock2\\\"); } } }); Thread t2 = new Thread(() -> { synchronized (lock2) { System.out.println(\\\"Thread 2 locked lock2\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (lock1) { System.out.println(\\\"Thread 2 locked lock1\\\"); } } }); t1.start(); t2.start(); } } \"]},\"29\":{\"h\":\"虚拟机\"},\"30\":{\"h\":\"类加载过程\"},\"31\":{\"h\":\"加载（Loading）\",\"t\":[\"将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。\"]},\"32\":{\"h\":\"连接（验证、准备、解析）\",\"t\":[\"验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求\",\"准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。\",\"解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。\"]},\"33\":{\"h\":\"初始化、使用、卸载\",\"t\":[\"初始化阶段简单来说就是执行类的构造器方法，不是开发者写的，而是编译器自动生成的。\"]},\"34\":{\"h\":\"垃圾收集器\",\"t\":[\"垃圾收集器\",\"类型\",\"作用域\",\"使用算法\",\"特点\",\"适用场景\",\"Serial\",\"串行回收\",\"新生代\",\"复制算法\",\"响应速度优先\",\"适用于单核 CPU 环境下的 Client 模式\",\"Serial Old\",\"串行回收\",\"老年代\",\"标记-压缩算法\",\"响应速度优先\",\"适用于单核 CPU 环境下的 Client 模式\",\"ParNew\",\"并行回收\",\"新生代\",\"复制算法\",\"响应速度优先\",\"多核 CPU 环境中 Server 模式下与 CMS 配合使用\",\"Parallel Scavenge\",\"并行回收\",\"新生代\",\"复制算法\",\"吞吐量优先\",\"适用于后台运算，而交互少的场景\",\"Parallel Old\",\"并行回收\",\"老年代\",\"标记-压缩算法\",\"吞吐量优先\",\"适用于后台运算，而交互少的场景\",\"CMS(Concurrent Mark-Sweep)\",\"并发回收\",\"老年代\",\"标记-清除算法\",\"响应速度优先\",\"适用于 B/S 业务，也就是交互多的场景\",\"G1(Garbage-First)\",\"并发, 并行回收\",\"新生代 & 老年代(整堆收集器)\",\"复制算法 & 标记-压缩算法\",\"响应速度优先\",\"面向服务端的应用\"]},\"35\":{\"h\":\"静态代理、动态代理\",\"t\":[\"类编译时产生，静态\",\"类运行时产生，动态\",\"静态代理：代理类与被代理类实现相同接口，相同方法，代理类需要有被代理类的成员变量，这样就可以在被代理对象时候做增强。\",\"动态代理，允许我们运行时生成代理对象，实现方案时GDK给我们提供的proxy类，CG lab提供的api,被代理有接口实现就实现响应接口，没有就继承，\"]},\"36\":{\"h\":\"双亲委派\",\"t\":[\"当我们进行类加载时，我们会先从appclassloader缓存查找，\",\"若没有会向extclassloader、bootstrapclassloader的缓存查找，\",\"如果还没有，他将向下在加载器对应路径查找\"]},\"37\":{\"h\":\"为什么使用双亲委派\",\"t\":[\"避免类的重复加载：确保一个类只被加载一次。\",\"保证 Java 核心 API 的安全性：防止核心 API 被随意篡改。\",\"提供类加载的层次结构：允许用户自定义类加载器以满足特定需求。\"]},\"38\":{\"h\":\"类加载时成员变量和静态成员变量的初始化时机\",\"t\":[\"在 Java 中，类的加载和初始化涉及到成员变量和静态成员变量的初始化时机，它们之间存在一些关键的差异：\"]},\"39\":{\"h\":\"未使用 static 修饰的成员变量和成员对象\",\"t\":[\"这些成员变量和对象是在 类的的第一个实例被创建时 进行初始化的。\",\"这意味着它们与特定类的实例相关联，每个实例都会有自己的副本。\"]},\"40\":{\"h\":\"使用 static 修饰的成员变量\",\"t\":[\"静态成员变量是在 类加载阶段 进行初始化的。\",\"它们与类的实例化无关，属于类本身，而不是类的某个特定实例。\",\"因此，静态成员变量在类第一次被加载到 JVM 时就初始化，并且只会初始化一次。\"]},\"41\":{\"h\":\"初始化时机的比较\",\"t\":[\"由于 static 修饰的成员变量在类加载时就初始化，它们会比未使用 static 修饰的普通成员变量 更早进行初始化。\",\"这种差异在设计类和方法时需要考虑，特别是涉及到类的静态上下文和单例模式等场景。\"]},\"42\":{\"h\":\"Js介绍\",\"t\":[\"注意区分\",\"Javascript和Java没有一点关系\"]},\"43\":{\"h\":\"Javascript是什么\",\"t\":[\"Javascript是一门运行在客户端的编程语言\"]},\"44\":{\"h\":\"Javascript作用\",\"t\":[\"网页特效\",\"表单验证\",\"数据交互\"]},\"45\":{\"h\":\"Javascript的组成\",\"t\":[\"ECMAScript，规定了js基础语法核心知识\",\"Web APIs，包括DOM和BOM\"]},\"46\":{\"h\":\"Javascript书写位置\"},\"47\":{\"h\":\"Javascript注释\"},\"48\":{\"h\":\"单行注释\",\"t\":[\"符号：//\",\"快捷键 ：Ctrl + /\"]},\"49\":{\"h\":\"块注释\",\"t\":[\"符号：/* */\",\"快捷键 ：Shift + Alt + A\"]},\"50\":{\"h\":\"Javascript结束符\",\"t\":[\"英文分号代表语句结束\",\"换行符回车会被识别为结束符，所以结束符可写可不写\"]},\"51\":{\"h\":\"输入和输出语法\"},\"52\":{\"h\":\"输出语法\",\"t\":[\"document.write('输出内容'); alert('警告内容'); console.log('控制台输出内容') \"]},\"53\":{\"h\":\"输入语法\",\"t\":[\"prompt('请输入你的姓名：') \"]},\"54\":{\"h\":\"springboot\"},\"55\":{\"h\":\"Spring IoC 容器构建\",\"t\":[\"获取一个新的 bean 工厂：通常是 ApplicationContext\",\"加载和解析 spring 的配置，解析 bean 对象，将解析到的 bean 封装成 BeanDefinition，并放到本地缓存中\",\"实例化和调用 BeanFactoryPostProcessor (BeanDefinitionRegistryPostProcessor) 的扩展方法，这边是一个非常重要的扩展点\",\"实例化 BeanPostProcessor，加载到 BeanFactory 中，但是这边还不触发，该扩展接口的方法在 bean 对象执行初始化方法前后被触发，这边是另一个重要扩展点\",\"实例化所有剩余的 bean 实例（非懒加载），包括：创建 bean 实例、bean 实例属性填充、bean 实例的初始化\",\"完成容器刷新，推送上下文刷新完毕事件（ContextRefreshedEvent）到监听器\"]},\"56\":{\"h\":\"Spring Boot 与 Spring MVC 的区别\",\"t\":[\"Spring Boot 和 Spring MVC 都是 Spring 家族中的重要成员，但它们的定位和用途有所不同。\"]},\"57\":{\"h\":\"Spring Boot\",\"t\":[\"定义：Spring Boot 是基于 Spring 框架的快速开发框架。\",\"特点： \",\"提供了快速开发的便利性。\",\"简化了 Spring 应用的初始搭建和开发过程。\",\"内嵌了 Tomcat、Jetty 等服务器，无需部署 WAR 文件。\",\"提供了生产就绪的特性，如健康检查、外部化配置等。\",\"用途：适用于构建独立的、生产级别的 Spring 应用。\"]},\"58\":{\"h\":\"Spring MVC\",\"t\":[\"定义：Spring MVC 是 Spring 框架中的一个模块，专注于构建 Web 应用。\",\"特点： \",\"提供了模型-视图-控制器（MVC）架构的支持。\",\"支持 RESTful Web 服务。\",\"可以与 Spring 框架的其他模块无缝集成。\",\"用途：适用于构建 Web 应用，特别是需要与 Spring 框架集成的应用。\"]},\"59\":{\"h\":\"Spring Cloud\",\"t\":[\"定义：Spring Cloud 是一个完整的微服务框架。\",\"特点： \",\"提供了微服务架构下的各种解决方案，如服务发现、配置管理、断路器、智能路由等。\",\"依赖于 Spring Boot，利用 Spring Boot 的特性简化了微服务的开发。\",\"用途：适用于构建和管理微服务架构。\"]},\"60\":{\"h\":\"Spring Boot 与 Spring MVC 的关系\",\"t\":[\"Spring Boot 提供了集成 Spring MVC 的能力。当开发 Web 应用时，Spring Boot 默认使用 Spring MVC 作为 Web 层的框架。这意味着在 Spring Boot 应用中开发 Web 功能，本质上就是在使用 Spring MVC。\"]},\"61\":{\"h\":\"Controller 与 RestController 的区别\",\"t\":[\"在 Spring MVC 框架中，Controller 和 RestController 都用于处理 HTTP 请求，但它们在返回类型和用途上有所不同。\"]},\"62\":{\"h\":\"RestController\",\"t\":[\"特点\",\"@RestController 是@Controller 和@ResponseBody的组合注解。\",\"主要用于构建 RESTful Web 服务。\",\"返回类型\",\"默认返回 JSON 或 XML 格式的数据。\",\"适用于需要直接返回数据而不是视图的 API 接口。\"]},\"63\":{\"h\":\"Controller\",\"t\":[\"特点\",\"@Controller用于定义一个控制器，处理 HTTP 请求并返回响应。\",\"可以返回ModelAndView，即模型数据和视图的组合。\",\"返回类型\",\"可以返回视图（View），通常用于 Web 应用。\",\"需要通过视图解析器将模型数据渲染到页面上。\"]},\"64\":{\"h\":\"@ResponseBody\",\"t\":[\"作用\",\"-@ResponseBody注解用于将返回对象直接转换为 JSON 或 XML 格式，并写入 HTTP 响应体中。\",\"不经过视图解析器处理，直接返回数据。\"]},\"65\":{\"h\":\"Spring Boot 自动配置类\",\"t\":[\"Spring Boot 的自动配置机制是其核心特性之一，它简化了 Spring 应用的配置过程。以下是 Spring Boot 自动配置类的工作原理：\",\"引入@EnableConfigurationProperties\",\"通过@SpringBootConfiguration注解引入@EnableConfigurationProperties注解，它负责自动配置。\",\"引入@Import\",\"通过@EnableConfigurationProperties注解引入@Import注解。容器启动时，加载 IOC 容器会解析@Import注解。\",\"Deferred Import Selector\",\"@Import注解导入了一个 DeferredImportSelector，其目的是使自动配置类最后执行。\",\"读取META-INF/spring.factories\",\"Spring Boot 读取META-INF目录下的spring.factories文件，该文件中列出了所有自动配置类。\",\"使用@Conditional 注解\",\"最后，通过@Conditional注解排除无效配置类，确保只有符合条件的配置类被加载。\"]},\"66\":{\"h\":\"工作流程总结\",\"t\":[\"启动应用：Spring Boot 应用启动。\",\"加载配置：读取 spring.factories 文件中的自动配置类。\",\"条件判断：使用 @Conditional 注解进行条件判断。\",\"执行配置：符合条件的配置类被执行，完成自动配置。\"]},\"67\":{\"h\":\"Spring 注解概览\",\"t\":[\"在 Spring 框架中，注解（Annotations）是实现依赖注入（Dependency Injection）和配置类的重要手段。以下是一些常用的注解及其说明：\"]},\"68\":{\"h\":\"@Component 与 @Bean\",\"t\":[\"@Component\",\"注解作用于类。\",\"标识该类为一个 Spring 管理的组件（Bean）。\",\"@Bean\",\"注解作用于方法。\",\"用于显式地声明一个 Bean，自定义性更强。\",\"在某些情况下，只能通过@Bean注解注册 Bean。\"]},\"69\":{\"h\":\"@Autowired 与 @Resource\",\"t\":[\"@Autowired\",\"Spring 提供的注解。\",\"默认的注入方式为 byType（根据类型进行匹配）。\",\"可以通过@Qualifier注解来显式指定名称。\",\"支持在构造函数、方法、字段和参数上使用。\",\"@Resource\",\"JDK 提供的注解。\",\"默认注入方式为 byName（根据名称进行匹配）。\",\"可以通过name属性来显式指定名称。\",\"主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\"]},\"70\":{\"h\":\"@Bean 的生命周期\",\"t\":[\"在 Spring 框架中，@Bean 注解用于声明一个由 Spring 容器管理的 Bean。以下是 Bean 的完整生命周期流程：\",\"实例化（Instantiation）\",\"IOC 容器启动后，通过反射机制实例化 Bean。\",\"属性赋值（Populate properties）\",\"为 Bean 的属性赋值。\",\"Aware 接口检查\",\"检查实现了Aware接口的 Bean，并调用相应的方法，如setBeanFactory、setApplicationContext等。\",\"BeanPostProcessor 前置处理\",\"在初始化方法调用之前执行BeanPostProcessor接口的postProcessBeforeInitialization方法。\",\"InitializingBean 接口和 init-method\",\"检查实现了InitializingBean接口的 Bean，并调用其afterPropertiesSet方法。\",\"检查定义了init-method的 Bean，并调用指定的初始化方法。\",\"BeanPostProcessor 后置处理\",\"在初始化方法调用之后执行BeanPostProcessor接口的postProcessAfterInitialization方法。\",\"使用（Usage）\",\"Bean 准备就绪，可以被应用程序使用了。\",\"销毁前处理（Destruction）\",\"当容器关闭时，如果 Bean 实现了DisposableBean 接口，将调用其destroy方法。\",\"如果 Bean 定义了destroy-method，则调用该方法进行销毁。\"]},\"71\":{\"h\":\"Bean 的线程安全性\",\"t\":[\"在 Spring 框架中，Bean 的线程安全性是一个重要的考虑因素，特别是对于那些有状态的 Bean。\"]},\"72\":{\"h\":\"有状态 Bean\",\"t\":[\"定义：有状态 Bean 是指包含可变成员变量的对象。\",\"问题：如果多个线程同时访问和修改这些可变的成员变量，就可能引发线程安全问题。\"]},\"73\":{\"h\":\"无状态 Bean\",\"t\":[\"定义：无状态 Bean 是指不包含可变成员变量的对象，或者其成员变量不会影响其业务逻辑的对象。\",\"优势：无状态 Bean 更容易保证线程安全，因为它们不会受到并发访问的影响。\"]},\"74\":{\"h\":\"Spring MVC 工作原理\",\"t\":[\"Spring MVC 是基于模型-视图-控制器（Model-View-Controller，简称 MVC）设计模式的 Web 框架。其核心思想是通过将业务逻辑、数据、显示分离来组织代码。\",\"客户端请求\",\"客户端（通常是浏览器）发送 HTTP 请求。\",\"DispatcherServlet 拦截\",\"DispatcherServlet拦截请求并作为前端控制器。\",\"HandlerMapping 匹配\",\"DispatcherServlet调用HandlerMapping。\",\"HandlerMapping 根据 URL 匹配查找能处理请求的Handler（即Controller 控制器）。\",\"将请求涉及到的拦截器和Handler一起封装。\",\"HandlerAdapter 执行\",\"DispatcherServlet 调用HandlerAdapter适配器执行Handler。\",\"返回 ModelAndView\",\"Handler完成对用户请求的处理后，返回一个ModelAndView对象给DispatcherServlet。\",\"ModelAndView 包含了数据模型以及相应的视图信息。 \",\"Model：返回的数据对象。\",\"View：逻辑上的视图。\",\"ViewResolver 解析\",\"ViewResolver根据逻辑视图查找实际的视图。\",\"视图渲染\",\"DispatcherServlet把返回的Model传给视图（视图渲染）。\",\"返回响应\",\"将渲染后的视图返回给请求者（浏览器）。\"]},\"75\":{\"h\":\"统一异常处理\",\"t\":[\"在 Spring 应用中，统一异常处理是一种常见的需求，它有助于集中管理和响应应用程序中的各种异常。推荐使用注解的方式进行统一异常处理，具体会使用到 @ControllerAdvice 和 @ExceptionHandler 这两个注解。\"]},\"76\":{\"h\":\"@ControllerAdvice\",\"t\":[\"@ControllerAdvice 是一个类级别的注解，用于定义全局异常处理。\",\"它可以指定所要应用的组件（如 @Controller、@RestController 等）。\",\"通过定义一个或多个 @ControllerAdvice 类，可以集中处理特定类型的异常。\"]},\"77\":{\"h\":\"@ExceptionHandler\",\"t\":[\"@ExceptionHandler 是一个方法级别的注解，用于处理特定的异常类型。\",\"在 @ControllerAdvice 类中定义方法，并使用 @ExceptionHandler 注解指定该方法处理哪种异常。\",\"可以针对不同的异常类型定义不同的处理逻辑。\"]},\"78\":{\"h\":\"示例\",\"t\":[\"@ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) public ResponseEntity<String> handleException(Exception e) { return new ResponseEntity<>(\\\"Global exception handler: \\\" + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); } @ExceptionHandler(CustomException.class) public ResponseEntity<String> handleCustomException(CustomException e) { return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST); } } \"]},\"79\":{\"h\":\"循环依赖及其解决方案\",\"t\":[\"在 Spring 框架中，循环依赖（Circular Dependency）指的是两个或多个 Bean 相互引用，导致无法完成初始化。为了解决这个问题，Spring 框架通过使用三级缓存机制来处理循环依赖。\"]},\"80\":{\"h\":\"使用@Lazy注解\",\"t\":[\"通过在构造函数注入上添加@Lazy注解，可以延迟 Bean 的初始化，从而避免循环依赖。\"]},\"81\":{\"h\":\"三级缓存机制\",\"t\":[\"第一级缓存（Singleton Cache）\",\"保存已经经过完整生命周期的 Bean 实例。\",\"第二级缓存（Early Singleton Cache）\",\"保存尚未经过完整生命周期的 Bean 实例。\",\"第三级缓存（Singleton Factories Cache）\",\"可以生成原始 Bean 对象或代理对象（如果 Bean 被 AOP 切面代理）。\",\"仅对单例 Bean 生效。\"]},\"82\":{\"h\":\"处理循环依赖\",\"t\":[\"当发生循环依赖时：\",\"Spring 会从第三级缓存singletonFactories中获取ObjectFactory。\",\"调用ObjectFactory的 getObject()方法来获取循环依赖对象的前期暴露对象（虽然还没有初始化完成，但可以获取到该对象在堆中的存储地址）。\",\"将这个前期暴露对象放入第二级缓存中。\",\"通过这种方式，Spring 允许 Bean 在初始化过程中引用其他 Bean，从而解决了循环依赖的问题。\"]},\"83\":{\"h\":\"Spring Bean 作用域\",\"t\":[\"在 Spring 框架中，Bean 的作用域（Scope）定义了 Bean 实例的生命周期和可见性。以下是几种常见的作用域：\"]},\"84\":{\"h\":\"Singleton\",\"t\":[\"描述：唯一 Bean 实例。\",\"特点：在 Spring 应用的整个生命周期中，每个由 Spring 容器管理的 singleton 作用域的 Bean 只有一个实例。\",\"使用场景：当 Bean 可以被多个地方安全共享时。\"]},\"85\":{\"h\":\"Prototype\",\"t\":[\"描述：每次请求都会创建一个新的 Bean 实例。\",\"特点：每次请求该 Bean 时，Spring 容器都会创建一个新的实例。\",\"使用场景：当 Bean 的实例化需要特定的配置或状态时。\"]},\"86\":{\"h\":\"Request\",\"t\":[\"描述：每一次 HTTP 请求都会产生一个新的 Bean。\",\"特点：Bean 的生命周期与 HTTP 请求相同，请求结束后 Bean 被销毁。\",\"使用场景：处理每个 HTTP 请求所需的临时数据。\"]},\"87\":{\"h\":\"Session\",\"t\":[\"描述：每一个 HTTP Session 会产生一个新的 Bean。\",\"特点：Bean 的生命周期与 HTTP 会话相同，会话结束后 Bean 被销毁。\",\"使用场景：当需要在同一个会话中保持 Bean 状态时。\"]},\"88\":{\"h\":\"异常处理类\",\"t\":[\"在 Spring 框架中，异常处理类用于集中处理应用程序中的异常。\"]},\"89\":{\"h\":\"@ControllerAdvice\",\"t\":[\"@ControllerAdvice 注解用于定义全局异常处理类。\",\"它可以捕获控制器层抛出的异常，并进行统一处理。\"]},\"90\":{\"h\":\"@ExceptionHandler\",\"t\":[\"@ExceptionHandler 注解声明异常处理方法。\",\"用于指定哪些异常将由特定的处理方法来处理。\"]},\"91\":{\"h\":\"JPA注解\",\"t\":[\"JPA（Java Persistence API）提供了一系列的注解，用于实体映射和操作。\"]},\"92\":{\"h\":\"@Entity\",\"t\":[\"@Entity 注解声明一个类对应一个数据库实体。\",\"被注解的类将映射到数据库中的一个表。\"]},\"93\":{\"h\":\"@Id\",\"t\":[\"@Id 注解声明一个字段为主键。\",\"使用 @Id 注解后，需要定义主键的生成策略。\"]},\"94\":{\"h\":\"@GeneratedValue\",\"t\":[\"@GeneratedValue 注解指定主键生成策略。\",\"例如，可以使用 @GeneratedValue(strategy = GenerationType.IDENTITY) 来指定主键的生成策略。\"]},\"95\":{\"h\":\"@Transient\",\"t\":[\"@Transient 注解声明不需要与数据库映射的字段。\",\"被注解的字段在保存时不会被保存到数据库中。\"]},\"96\":{\"h\":\"事务管理\"},\"97\":{\"h\":\"@Transactional\",\"t\":[\"@Transactional 注解用于声明事务管理。\",\"可以指定在遇到特定异常时进行回滚。\",\"例如，@Transactional(rollbackFor = Exception.class) 让事务在遇到非运行时异常时也回滚。\"]},\"98\":{\"h\":\"spring事务传播行为\",\"t\":[\"事务传播是指一个事务调用另一个事务时，这个事务方法对另一个事务方法（调用者）的态度，a\\\\b方法开启事务，a方法中调用了B方法，b方法传播到a方法的事务中，产生传播行为，这时我们需要对b方法进行处理。 他分7种：\",\"第一种b在运行时需要事务，require,required-new，mandatory{抛异常}\",\"第二种b在运行时不需要事务，supports,{有融入}not supported{有挂起}，never{有抛异常}\",\"Nested支持嵌套事务，实现独立回滚\"]},\"99\":{\"h\":\"DAO接口工作原理\",\"t\":[\"其工作原理时JDK动态代理， mybatis运行时会为dao接口生成动态代理对象，\",\"对象会拦截方法，执行mappedstatement 的sql\"]},\"100\":{\"h\":\"Spring 框架中的设计模式\",\"t\":[\"Spring 框架广泛地应用了多种设计模式，以下是一些主要的设计模式及其在 Spring 中的应用：\"]},\"101\":{\"h\":\"工厂模式 (Factory Pattern)\",\"t\":[\"应用：BeanFactory 就用到了工厂模式。\",\"描述：工厂模式用于创建对象，而无需指定确切的类。Spring 通过 BeanFactory 提供了一个创建对象的接口。\"]},\"102\":{\"h\":\"单例模式 (Singleton Pattern)\",\"t\":[\"应用：Bean 的单例模式。\",\"描述：确保一个类只有一个实例，并提供一个全局访问点。Spring 中的 Bean 默认是单例的。\"]},\"103\":{\"h\":\"代理模式 (Proxy Pattern)\",\"t\":[\"应用：AOP 用到 JDK 的代理模式。\",\"描述：代理模式为其他对象提供一个代理以控制对这个对象的访问。Spring AOP（面向切面编程）功能就是基于代理模式实现的。\"]},\"104\":{\"h\":\"模板模式 (Template Pattern)\",\"t\":[\"应用：JDBC 模板。\",\"描述：定义一个操作中的算法骨架，而将一些步骤延迟到子类中。Spring 的 JdbcTemplate 就是模板模式的体现，它定义了数据库操作的通用步骤。\"]},\"105\":{\"h\":\"观察者模式 (Observer Pattern)\",\"t\":[\"应用：Spring 监听器的实现。\",\"描述：定义对象间的一种一对多的依赖关系，当一个对象改变状态时，所有依赖于它的对象都得到通知并被自动更新。Spring 事件监听器就是观察者模式的应用。\"]},\"106\":{\"h\":\"Spring Boot 简介\",\"t\":[\"Spring Boot 是一个基于 Spring 框架的快速开发框架，它简化了基于 Spring 的应用开发，提供了快速启动和部署 Spring 应用的能力。\"]},\"107\":{\"h\":\"优点\",\"t\":[\"自动依赖管理：\",\"spring-boot-starter-web 会自动依赖其他组件，减少 Maven 配置。\",\"解决 Maven 依赖冲突：\",\"Spring Boot 通过管理依赖版本来帮助解决 Maven 依赖冲突。\",\"内置服务器：\",\"内置 Tomcat、Jetty、Undertow 等服务器，不需要打成 WAR 包，只需要打成可执行的 JAR 包就可以执行，所有依赖包都在一个 JAR 包中。\",\"自动装配 Bean：\",\"Spring Boot 会根据当前类路径下的类自动装配 Bean，例如添加 spring-boot-starter-web 就能拥有 Web 功能。\",\"无 XML 配置：\",\"配置过程无需 XML 文件就能完成所有配置工作，通过注解和 application.properties 或 application.yml 文件进行配置。\",\"配置文件类型\",\"properties优先加载级大于yml。\"]},\"108\":{\"h\":\"Spring Boot 核心注解\",\"t\":[\"Spring Boot 提供了一系列注解来简化 Spring 应用的开发，以下是几个核心注解：\"]},\"109\":{\"h\":\"@SpringBootApplication\",\"t\":[\"组合注解，包含了 @SpringBootConfiguration、@EnableAutoConfiguration 和 @ComponentScan。\",\"表明这是一个 Spring Boot 应用的启动类。\"]},\"110\":{\"h\":\"@SpringBootConfiguration\",\"t\":[\"标识这是一个 Spring Boot 配置类。\"]},\"111\":{\"h\":\"@EnableAutoConfiguration\",\"t\":[\"像容器中导入一个 selector，扫描 classpath 下的自动配置类，将这些自动加载为配置类。\"]},\"112\":{\"h\":\"@ComponentScan\",\"t\":[\"标识扫描路径，默认扫描的是启动类所在的当前目录。\",\"用于扫描并注册 Spring 组件，如 @Component、@Service、@Repository 和 @Controller 等。\",\"提示\",\"可以实现applicationrunner、commandlinerunner接口的runner方法实现，\",\"可以用来进行一些定时任务（？），当然启动类也可以，在main方法中书写执行代码\"]},\"113\":{\"h\":\"Spring 设计模式\",\"t\":[\"Spring 框架中广泛使用了多种设计模式，以下是一些核心的设计模式及其应用：\"]},\"114\":{\"h\":\"控制反转 (IoC) 模式\",\"t\":[\"描述：将对象的创建交给 Spring 管理，实现了依赖的注入 (DI)。\",\"应用：通过 @Autowired 注解注解实现 Bean 之间的依赖注入。\"]},\"115\":{\"h\":\"工厂模式\",\"t\":[\"描述：ApplicationContext 即 Spring 容器，充当工厂类，负责创建 Bean 实例。\",\"应用：通过配置文件或注解定义 Bean 的创建逻辑。\"]},\"116\":{\"h\":\"单例模式\",\"t\":[\"描述：ApplicationContext 是一个单例 Bean，而每个 Bean 默认也是单例的。\",\"应用：确保 Bean 在整个应用程序中只有一个实例。\"]},\"117\":{\"h\":\"模板方法模式\",\"t\":[\"描述：定义一个操作中的算法骨架，而将一些步骤延迟到子类中。\",\"应用：RedisTemplate 提供了一套统一的操作 Redis 的方法。\"]},\"118\":{\"h\":\"观察者模式\",\"t\":[\"描述：定义对象间的一种一对多的依赖关系，当一个对象改变状态时，所有依赖于它的对象都得到通知并被自动更新。\",\"应用：基于事件驱动的编程方式，如 ApplicationEvent、ApplicationListener。\"]},\"119\":{\"h\":\"策略模式\",\"t\":[\"描述：使用面向接口的编程思想定义策略层。\",\"应用：如 AuthenticationManager 策略接口等。\"]},\"120\":{\"h\":\"代理模式\",\"t\":[\"描述：为其他对象提供一个代理以控制对这个对象的访问。\",\"应用：AOP（面向切面编程）使用动态代理方式。\"]},\"121\":{\"h\":\"适配器模式\",\"t\":[\"描述：允许接口不兼容的类可以一起工作。\",\"应用：如 AdvisorAdapter 等，可以让任意类匹配某接口。\"]},\"122\":{\"h\":\"Spring MVC 请求处理流程\",\"t\":[\"Spring MVC 框架处理客户端请求的流程如下：\",\"发送请求：\",\"客户端（通常是浏览器）发送一个 HTTP 请求到服务器。\",\"请求处理：\",\"请求被 Spring 的 DispatcherServlet 捕获，它是 Spring MVC 的前端控制器。\",\"请求映射：\",\"DispatcherServlet 使用 HandlerMapping 来确定请求应该由哪个控制器（Controller）处理。\",\"调用控制器：\",\"DispatcherServlet 调用匹配的控制器方法。\",\"业务逻辑：\",\"控制器执行业务逻辑，可能包括调用服务层和数据访问层。\",\"返回视图：\",\"控制器返回一个视图名称，通常通过 ModelAndView 对象。\",\"视图解析：\",\"DispatcherServlet 使用 ViewResolver 来解析视图名称，并找到实际的视图模板。\",\"渲染响应：\",\"视图模板（如 JSP、Thymeleaf 等）被渲染成 HTML 内容。\",\"返回客户端：\",\"最终的响应（包括 HTML 内容）被发送回客户端。\"]},\"123\":{\"h\":\"计算机网络\"},\"124\":{\"h\":\"从输入 URL 到页面展示的过程\",\"t\":[\"当用户在浏览器中输入一个 URL 并按下回车键时，以下一系列步骤会发生：\",\"DNS 解析：\",\"浏览器首先检查本地 DNS 缓存，以确定 URL 对应的 IP 地址。\",\"如果找不到，它会向 DNS 服务器查询。\",\"建立 TCP 连接：\",\"通过三次握手过程，浏览器与服务器建立 TCP 连接。\",\"发送 HTTP 请求：\",\"一旦 TCP 连接建立，浏览器会构建一个 HTTP 请求并发送给服务器。\",\"服务器处理请求：\",\"服务器接收到请求后，会根据请求的 URL、HTTP 方法（如 GET、POST）和头部信息来处理请求。\",\"发送 HTTP 响应：\",\"服务器处理完请求后，会发送一个 HTTP 响应，包括状态码、响应头部和正文（即所请求的页面内容）。\",\"浏览器渲染页面：\",\"浏览器接收到响应后，会解析 HTML 文档，并根据 HTML、CSS 和 JavaScript 来渲染页面。\",\"关闭 TCP 连接：\",\"在 HTTP/1.0 中，默认使用非持久连接，每次请求后都会关闭 TCP 连接。\",\"在 HTTP/1.1 中，默认使用持久连接，可以复用同一个 TCP 连接来发送多个请求和响应。\"]},\"125\":{\"h\":\"TCP三次握手与四次挥手\"},\"126\":{\"h\":\"TCP三次握手\",\"t\":[\"TCP 三次握手是建立一个可靠 TCP 连接的过程，它包括以下步骤：\",\"SYN（同步序列编号）：\",\"客户端发送一个带有 SYN 标志的 TCP 段到服务器，以初始化序列号。\",\"SYN-ACK（同步序列编号和确认应答）：\",\"服务器收到 SYN 后，同意建立连接，并发送一个带有 SYN 和 ACK 标志的 TCP 段作为响应。\",\"ACK（确认应答）：\",\"客户端收到 SYN-ACK 后，发送一个带有 ACK 标志的 TCP 段作为最后的确认。\",\"完成这三个步骤后，TCP连接就建立成功，数据可以开始传输。\"]},\"127\":{\"h\":\"TCP四次挥手\",\"t\":[\"TCP 四次挥手是终止一个 TCP 连接的过程，它包括以下步骤：\",\"FIN（结束）：\",\"客户端发送一个带有 FIN 标志的 TCP 段，表示客户端已经发送完所有数据，请求关闭连接。\",\"ACK（确认应答）：\",\"服务器收到 FIN 后，发送一个 ACK 段作为确认，同时准备好关闭连接。\",\"FIN（结束）：\",\"服务器也发送一个带有 FIN 标志的 TCP 段，表示它已经准备好关闭连接。\",\"ACK（确认应答）：\",\"客户端收到服务器的 FIN 后，发送最后一个 ACK 段作为确认。\"]},\"128\":{\"h\":\"数据类型\"},\"129\":{\"h\":\"数据类型分类\"},\"130\":{\"h\":\"基本数据类型\"},\"131\":{\"h\":\"number\",\"t\":[\"介绍\",\"Javascript是弱数据类型，赋值后才能判断\",\"整数\",\"小数\",\"负数\"]},\"132\":{\"h\":\"string\"},\"133\":{\"h\":\"字符串含义\",\"t\":[\"字符串使用英文状态下的\\\"\\\"或'' 单引号和双引号可以相互嵌套，但注意不能自己嵌套自己\"]},\"134\":{\"h\":\"字符串拼接\",\"t\":[\"document.write('忍者'+'神龟') let comic = '火影忍者' let author = '岸本齐史' document.write(comic + author) \"]},\"135\":{\"h\":\"模板字符串\",\"t\":[\"let comic = '火影忍者' let author = '岸本齐史' document.write(${comic}的作者是${author}) \"]},\"136\":{\"h\":\"Boolean\",\"t\":[\"let isDarkMode = true; \"]},\"137\":{\"h\":\"undefined\",\"t\":[\"只声明变量，未赋值\"]},\"138\":{\"h\":\"null\",\"t\":[\"声明并赋值，但为空\"]},\"139\":{\"h\":\"引用数据类型\"},\"140\":{\"h\":\"object\"},\"141\":{\"h\":\"function\"},\"142\":{\"h\":\"array\"},\"143\":{\"h\":\"检测数据类型\",\"t\":[\"let num = 12; console.log(typeof num); \"]},\"144\":{\"h\":\"数据类型转换\"},\"145\":{\"h\":\"隐式转换\",\"t\":[\"let num = 12; console.log(typeof num + 12); //输出number12 \",\"+两边只要有一个字符串，都会把另外一个转成字符串 除了+以外的算术运算符，比如-*/等都会把数据转成数字类型\"]},\"146\":{\"h\":\"显式转换\"},\"147\":{\"h\":\"date_base\"},\"148\":{\"h\":\"并发数据库操作中的读取问题\",\"t\":[\"在并发数据库操作中，可能会出现脏读、不可重复读和幻读等问题，这些问题都与事务的隔离级别有关。\"]},\"149\":{\"h\":\"脏读 (Dirty Read)\",\"t\":[\"定义：一个事务读取到了另一个事务未提交的数据。\",\"影响：如果未提交的事务最终被回滚，那么读取到的数据就是无效的，这可能导致错误的决策。\"]},\"150\":{\"h\":\"不可重复读 (Non-repeatable Read)\",\"t\":[\"定义：在一个事务中多次读取同一数据，如果在两次读取之间，其他事务对数据进行了修改，那么两次读取的数据可能不一致。\",\"影响：这可能导致事务在处理过程中得到不同的结果，影响数据的一致性。\"]},\"151\":{\"h\":\"幻读 (Phantom Read)\",\"t\":[\"定义：在一个事务中多次读取同一范围的数据，如果在两次读取之间，其他事务插入或删除了数据，那么两次读取的数据数量可能不一致。\",\"影响：这可能导致事务在处理过程中得到不一致的数据集，影响数据的完整性。\"]},\"152\":{\"h\":\"隔离级别\",\"t\":[\"为了解决这些问题，数据库系统提供了不同的事务隔离级别：\",\"读未提交 (Read Uncommitted)：最低的隔离级别，可能出现脏读、不可重复读和幻读。\",\"读已提交 (Read Committed)：避免了脏读，但可能出现不可重复读和幻读。\",\"可重复读 (Repeatable Read)：避免了脏读和不可重复读，但可能出现幻读。\",\"串行化 (Serializable)：最高的隔离级别，避免了脏读、不可重复读和幻读，但性能开销较大。\"]},\"153\":{\"h\":\"聚簇索引\",\"t\":[\"根据ID构建，且叶子节点保存所有行数据的索引，称之为聚簇索引，\",\"他是存储MYSQL里面数据的基本结构，所以跟据ID数据查询时可以走聚簇索引，但要是不是ID就不能走聚簇索引。\"]},\"154\":{\"h\":\"非聚簇索引（二级索引）\",\"t\":[\"叶子节点存储的是聚簇索引的字段，之后需要回表走聚簇索引，因为没有覆盖查询所需要的数据\"]},\"155\":{\"h\":\"索引覆盖（减少回表次数）\",\"t\":[\"查询结果可以在二级索引获取，而无需访问表的实际数据，即无需回表查\"]},\"156\":{\"h\":\"MyISAM 与 InnoDB 存储引擎的区别\",\"t\":[\"在 MySQL 数据库中，InnoDB 和 MyISAM 是两种常用的存储引擎，它们在事务支持、锁定级别、外键支持、ACID 支持以及性能方面各有特点。\"]},\"157\":{\"h\":\"事务支持\",\"t\":[\"MyISAM：不支持事务处理。\",\"InnoDB：支持事务处理。\"]},\"158\":{\"h\":\"锁定级别\",\"t\":[\"MyISAM：使用表级锁定，即当一个线程读取一个表时，其他线程不能同时写入该表。\",\"InnoDB：支持行级锁定，允许更高的并发性。\"]},\"159\":{\"h\":\"外键支持\",\"t\":[\"MyISAM：不支持外键约束。\",\"InnoDB：支持外键约束，可以维护数据的引用完整性。\"]},\"160\":{\"h\":\"ACID 支持\",\"t\":[\"MyISAM：不完全支持 ACID 特性。\",\"InnoDB：完全支持 ACID 特性，确保事务的原子性、一致性、隔离性和持久性。\"]},\"161\":{\"h\":\"性能\",\"t\":[\"MyISAM：在读操作多、写操作少的场景下性能较好，尤其是在处理大量数据时。\",\"InnoDB：在处理大量并发读写操作时性能较好。\",\"如果需要支持事务、外键约束或者需要更好的数据完整性和一致性，应选择 InnoDB。\",\"如果需要更好的读性能，且不需要事务处理，可以选择 MyISAM。\"]},\"162\":{\"h\":\"索引失效\",\"t\":[\"索引列参与计算：如 WHERE age * 2 = 40，索引无法使用\",\"对索引列进行函数操作：如 WHERE UPPER(name) = 'ZHANGSAN'，索引会失效\",\"查询中使用了 OR 两边有范围查询：如 WHERE age = 10 OR age > 20，可能导致索引失效\",\"LIKE操作：以 % 开头的 LIKE 查询，如 WHERE name LIKE '%zhangsan'，索引会失效\",\"不等于比较：使用 != 或 <> 比较可能导致索引失效\",\"IS NULL 或 IS NOT NULL：这些条件可能导致索引失效\",\"字符串不加单引号：如 WHERE name = 2000，可能导致索引失效。隐式类型转换\",\"使用 IN：当 IN 子句中的列表过大时，可能导致索引失效\",\"使用 NOT IN：这可能导致索引失效，特别是当子查询返回大量数据时\"]},\"163\":{\"h\":\"Drop、Truncate、Delete 操作比较\",\"t\":[\"以下是 SQL 中 DROP、TRUNCATE 和 DELETE 操作的比较：\",\"回滚支持：\",\"DELETE 支持回滚，而 DROP 和 TRUNCATE 不支持。\",\"删除内容：\",\"DELETE：表结构仍然存在，可以删除表中的全部或部分数据。\",\"TRUNCATE：表结构仍然存在，删除表中的全部数据。\",\"DROP：删除表结构以及表中的全部数据。\"]},\"164\":{\"h\":\"EXIST 与 IN 的区别\",\"t\":[\"EXIST 和 IN 是 SQL 中用于子查询的两种不同关键字，它们在功能和性能上有所差异。\"]},\"165\":{\"h\":\"EXIST\",\"t\":[\"EXIST 后面是一个子查询。\",\"它只关注子查询是否返回数据，如果返回结果为 true，则继续执行前面的语句。\",\"即使子查询返回 NULL，EXIST 也视为 true。\",\"EXIST 对外表进行循环（loop），对每个记录检查子查询是否返回结果。\"]},\"166\":{\"h\":\"IN\",\"t\":[\"IN 先执行子查询并获取结果集。\",\"对结果集中的每个值进行循环比对主查询表中对应字段，汇总匹配值返回最终结果。\",\"IN 内外表做哈希连接（hash join）。\"]},\"167\":{\"h\":\"性能考虑\",\"t\":[\"当两个表的大小相当时，使用 EXIST 或 IN 的性能差不多。\",\"当两个表一大一小，子查询大的表使用 EXIST，小的表使用 IN。\"]},\"168\":{\"h\":\"NOT EXISTS 与 NOT IN 的区别\",\"t\":[\"在 SQL 中，NOT EXISTS 和 NOT IN 都是用来检查子查询中是否存在记录的条件，但它们在性能和用法上有所不同。\"]},\"169\":{\"h\":\"NOT IN\",\"t\":[\"NOT IN 子句在子查询中进行全表扫描，无论内表还是外表。\",\"这意味着 NOT IN 可能在性能上不是最优的，尤其是在处理大型数据集时。\"]},\"170\":{\"h\":\"NOT EXISTS\",\"t\":[\"NOT EXISTS 通常比 NOT IN 更高效，因为它只检查子查询中是否存在记录，而不是检索所有记录。\",\"NOT EXISTS 允许子查询利用索引，这可以显著提高查询性能。\",\"在逻辑上，NOT EXISTS 等同于 EXISTS 的否定形式。\"]},\"171\":{\"h\":\"性能比较\",\"t\":[\"当两个表的大小相当时，NOT EXISTS 通常比 NOT IN 更快，因为它可以利用索引。\",\"当子查询的表比主查询的表大时，NOT EXISTS 仍然可能是更好的选择，因为它可以更早地终止查询。\",\"提示\",\"SELECT * FROM customers c WHERE c.id IN ( SELECT customer_id FROM orders o WHERE o.order_date = '2024-01-01' ); \",\"o是内表\"]},\"172\":{\"h\":\"SQL 优化建议\",\"t\":[\"为了提高数据库查询的性能，以下是一些有效的 SQL 优化策略：\",\"**避免使用 SELECT ***：\",\"不使用 SELECT * 可以确保查询只返回需要的列，这样可以减少数据传输量，同时可能利用覆盖索引。\",\"谨慎使用 OR 操作符：\",\"避免使用 OR，因为连接的两个条件可能使用不同的索引，导致数据库无法使用任何索引。可以考虑使用 UNION ALL 替代。\",\"使用数值代替字符串：\",\"当属性值固定时，尽量使用数值类型代替字符串类型，以提高查询效率。\",\"限制返回的数据量：\",\"避免返回大量数据，最好采用分页查询来减少单次查询的数据量。\",\"合理使用索引：\",\"确保对经常作为查询条件的列建立索引，同时避免过度索引，以免影响数据更新性能。\",\"使用批量插入：\",\"当需要插入大量数据时，使用批量插入代替单条插入，以提高插入效率。\",\"使用 UNION ALL 代替 UNION：\",\"当合并两个查询结果集时，如果不需要去除重复记录，使用 UNION ALL 替代 UNION，因为 UNION ALL 不会进行去重操作，执行速度更快。\"]},\"173\":{\"h\":\"事务\",\"t\":[\"事务是数据库管理系统中的一个核心概念，它确保了对数据库进行的一系列操作要么全部成功，要么在遇到错误时全部撤销，从而保证了数据的一致性。\"]},\"174\":{\"h\":\"MYISAM\",\"t\":[\"表锁级别\",\"不支持事务和外键\"]},\"175\":{\"h\":\"InnoDB\",\"t\":[\"行锁级别\",\"支持事务和外键\"]},\"176\":{\"h\":\"Memory\",\"t\":[\"内存操作，读写速度快\",\"不支持事务和外键\"]},\"177\":{\"h\":\"SQL 排查及优化指南\",\"t\":[\"为了提高 SQL 查询的性能，可以按照以下步骤进行排查和优化：\"]},\"178\":{\"h\":\"1. 开启慢查询日志\",\"t\":[\"首先，需要在数据库配置中开启慢查询日志，以便记录执行时间超过指定阈值的查询。\"]},\"179\":{\"h\":\"2. 查看慢查询日志\",\"t\":[\"分析慢查询日志，找出执行效率低的 SQL 语句。\"]},\"180\":{\"h\":\"3. 使用 EXPLAIN 查看 SQL 执行计划\",\"t\":[\"使用 EXPLAIN 关键字分析 SQL 语句的执行计划，以了解查询的执行过程和性能瓶颈。\"]},\"181\":{\"h\":\"EXPLAIN 的 Type 字段性能排序\",\"t\":[\"在 EXPLAIN 的输出结果中，Type 字段表示连接类型，性能从最好到最差的排序如下：\",\"system：表只有一行（=0），这是 const 类型 join 的情况。\",\"const：表最多有一个匹配行，速度非常快。\",\"eq_ref：对于每个来自前一个表的行组合，从该表中读取一行。\",\"ref：对于来自前一个表的每个行组合，从该表中读取多行。\",\"index_merge：索引合并，速度比 ref 慢。\",\"index：全索引扫描，比 index_merge 慢。\",\"all：全表扫描，性能最差。\"]},\"182\":{\"h\":\"SQL 执行顺序\",\"t\":[\"在编写 SQL 查询时，了解各子句的执行顺序对于优化查询性能至关重要。以下是 SQL 查询的典型执行顺序：\",\"FROM 和 JOIN\",\"首先确定数据来源，即从哪些表中获取数据，以及如何通过 JOIN 连接这些表。\",\"ON\",\"指定 JOIN 操作中用于连接表的条件。\",\"WHERE\",\"在获取表数据后，根据特定条件筛选数据。\",\"GROUP BY\",\"将筛选后的数据按照一个或多个列进行分组。\",\"聚合函数\",\"对每个分组执行聚合操作，如 COUNT、SUM、AVG 等。\",\"HAVING\",\"对分组后的结果进行进一步的筛选，通常用于筛选聚合后的结果。\",\"SELECT\",\"指定最终选择哪些列显示在结果集中，并进行行层面的结束处理。\",\"DISTINCT\",\"在列层面进行去重操作，确保结果集中的值是唯一的。\",\"ORDER BY\",\"最后，根据一个或多个列对结果集进行排序。\"]},\"183\":{\"h\":\"MySQL 与 Elasticsearch 数据一致性实现\",\"t\":[\"为了确保 MySQL 数据库与 Elasticsearch 搜索引擎之间的数据一致性，可以采用以下几种方法：\"]},\"184\":{\"h\":\"同步调用（双写）\",\"t\":[\"实现方式：在修改 MySQL 数据的同时，同步写入 Elasticsearch。\",\"优点：数据一致性高，立即反映在 Elasticsearch 中。\",\"缺点：耦合度高，每次修改 MySQL 时都会有额外的维护成本。\"]},\"185\":{\"h\":\"异步通知（消息队列）\",\"t\":[\"实现方式：使用消息队列（如 Kafka、RabbitMQ）进行异步数据同步。数据变更时触发一个消息队列消息，消费端订阅这个消息并同步到 Elasticsearch。\",\"优点：解耦，系统之间独立，提高了系统的可扩展性。\",\"缺点：需要引入第三方组件，增加了系统的复杂度。\"]},\"186\":{\"h\":\"监听 Binlog（日志监听）\",\"t\":[\"实现方式：使用阿里 Canal 组件监听 MySQL 的 Binlog 日志，捕获数据变更事件，并实时推送到 Elasticsearch。\",\"优点：不需要接入到业务系统中，减少了系统的耦合度。\",\"缺点：需要处理 Binlog 日志的解析和数据同步的复杂性。\"]},\"187\":{\"h\":\"Elasticsearch倒派索引\",\"t\":[\"传统的我们的检索是逐个遍历找到对应关键词的位置，而倒排索引，是通过分词策略，\",\"形成了词和id的映射关系表，通过这个表再通过id查文档，极大的提高了检索效率\"]},\"188\":{\"h\":\"java基础\"},\"189\":{\"h\":\"引用拷贝、深拷贝、浅拷贝\"},\"190\":{\"h\":\"引用拷贝\",\"t\":[\"拷贝引用，两个不同的引用指向同一个对象。\"]},\"191\":{\"h\":\"深拷贝\",\"t\":[\"完全复制整个对象，包括这个对象所包含的内部对象。\"]},\"192\":{\"h\":\"浅拷贝\",\"t\":[\"在堆上创建一个新的对象。\",\"如果原对象内部的属性是引用类型，浅拷贝会直接复制内部对象的引用地址。\"]},\"193\":{\"h\":\"String、StringBuilder、StringBuffer\"},\"194\":{\"h\":\"可变性\",\"t\":[\"String：内部的 value 值是 char 数组，被 final 修饰，不可变。\",\"StringBuilder 和 StringBuffer：可变。\"]},\"195\":{\"h\":\"安全性\",\"t\":[\"String：由于不可变，所以是安全的。\",\"StringBuilder：不是线程安全的。\",\"StringBuffer：因为加了锁，所以是线程安全的。\"]},\"196\":{\"h\":\"性能方面\",\"t\":[\"使用String进行拼接时需要创建新对象，性能最差。\",\"StringBuffer因为加了锁影响性能，所以比StringBuilder性能差。\"]},\"197\":{\"h\":\"自动拆装箱\"},\"198\":{\"h\":\"装箱\",\"t\":[\"将基本类型用它们对应的引用类型包装起来。\"]},\"199\":{\"h\":\"拆箱\",\"t\":[\"将包装类型转换为基本数据类型。\"]},\"200\":{\"h\":\"重载、重写\"},\"201\":{\"h\":\"重载\",\"t\":[\"同样的一个方法能够根据输入数据的不同，做出不同的处理。\"]},\"202\":{\"h\":\"重写\",\"t\":[\"当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，覆盖父类方法。\"]},\"203\":{\"h\":\"Char、Varchar\"},\"204\":{\"h\":\"可变性\",\"t\":[\"Char：不可变长度，数据长度不足会空格补充。\",\"Varchar：可变长度。\"]},\"205\":{\"h\":\"性能方面\",\"t\":[\"Char：不可变长度，性能更佳。\",\"Varchar：更省空间。\"]},\"206\":{\"h\":\"使用\",\"t\":[\"Char：适用于记录固定表单数据，如身份证。\",\"Varchar：适用于记录不固定数据，如昵称。\"]},\"207\":{\"h\":\"== 和 equals 的区别\",\"t\":[\"==\",\"比较栈中的值。 \",\"基本数据类型：比较数值是否相等。\",\"引用数据类型：比较对象的内存地址是否相等。\"]},\"208\":{\"h\":\"equals\",\"t\":[\"重写前跟==一致。\",\"重写后比较对象的内容是否相同。\"]},\"209\":{\"h\":\"String.intern()\",\"t\":[\"将指定的字符串对象的引用保存在字符串常量池中，可以简单分为两种情况：\",\"如果字符串常量池中保存了对应的字符串对象的引用，就直接返回该引用。\",\"如果字符串常量池中没有保存对应的字符串对象的引用，那就在常量池中创建一个指向该字符串对象的引用，并返回该引用。\"]},\"210\":{\"h\":\"Static 关键字\",\"t\":[\"static关键字用于修饰成员变量、方法体、内部类、代码块和静态导包。\"]},\"211\":{\"h\":\"静态导包\",\"t\":[\"允许直接使用类的方法，就像它是类自己的方法一样。\"]},\"212\":{\"h\":\"内部类\",\"t\":[\"可以直接使用内部类，而不需要外部类。\"]},\"213\":{\"h\":\"Java 异常类型及原理\",\"t\":[\"Throwable有两个直接的子类：Error 和Exception。\",\"Error\",\"无法恢复的错误，程序员不需要处理。\",\"Exception\",\"可恢复的异常，分为 RuntimeException和其他 Exception。 \",\"RuntimeException：处理或不处理都可以。\",\"其他 Exception：Java 编译器要求程序必须捕获或抛出这种异常。\"]},\"214\":{\"h\":\"字节流与字符流的区别\",\"t\":[\"特性\",\"字节流\",\"字符流\",\"操作基本单元\",\"字节 (byte)\",\"字符 (char)\",\"是否使用缓冲\",\"否\",\"是\",\"存在位置\",\"可存在于文件、内存中\",\"只存在于内存中\",\"使用场景\",\"适合操作文本文件之外的文件\",\"适合操作文本文件时使用，自动处理字符编码和解码\"]},\"215\":{\"h\":\"Java 访问权限\",\"t\":[\"访问修饰符\",\"访问范围\",\"public\",\"内部成员、子类、同包其他类、其他包\",\"protected\",\"内部成员、子类、同包其他类\",\"default\",\"内部成员、同包其他类\",\"private\",\"内部成员\"]},\"216\":{\"h\":\"接口知识\"},\"217\":{\"h\":\"JDK 8 新特性\",\"t\":[\"default 方法：接口中可以包含方法体，修改接口时需要修改所有实现该接口的类。\",\"static 方法：static 修饰的方法可以放入接口中，可以直接用 <接口名.方法名()> 的形式调用。\"]},\"218\":{\"h\":\"匿名内部类\",\"t\":[\"用于创建没有名称的类的实例。\"]},\"219\":{\"h\":\"Java 中 Integer 对象的自动装箱和 == 操作符\",\"t\":[\"在 Java 中，Integer 对象使用了一个叫做 IntegerCache 的技术，\",\"它缓存了数值在 -128 到 127 之间（包含 -128 和 127）的 Integer 对象。\",\"这意味着在这个范围内的 Integer 对象都只有一个唯一的实例。\"]},\"220\":{\"h\":\"mq\"},\"221\":{\"h\":\"三大消息队列区别\",\"t\":[\"以下是Kafka、RocketMQ 和 RabbitMQ 三种常见消息队列的对比：\",\"特性\",\"Kafka\",\"RocketMQ\",\"RabbitMQ\",\"吞吐量\",\"高\",\"高\",\"中等\",\"死信队列\",\"×\",\"√\",\"√\",\"延迟队列\",\"×\",\"√\",\"√\",\"优先级队列\",\"×\",\"√\",\"√\",\"消息获取\",\"拉\",\"推/拉\",\"推/拉\",\"支持事务\",\"仅消息生产事务\",\"支持\",\"支持\"]},\"222\":{\"h\":\"MQ 消息丢失问题及解决方案\",\"t\":[\"在消息队列（MQ）的使用过程中，消息丢失是一个需要特别注意的问题。以下是消息在不同阶段可能丢失的原因以及相应的解决方案：\"]},\"223\":{\"h\":\"信息到 MQ\",\"t\":[\"在这个阶段，消息从生产者发送到消息队列的过程中可能会丢失。\",\"解决方案：\",\"发送方确认模式：确保消息被成功发送到消息队列。例如，在 RabbitMQ 中，可以通过设置 mandatory 标志来实现。如果消息无法被路由到任何队列，RabbitMQ 会发送一个 return 消息到指定的交换机。\",\"事务支持：使用事务来确保消息的发送和确认。例如，在 Kafka 中，可以通过 acks 参数来控制消息的确认机制。\"]},\"224\":{\"h\":\"信息路由到队列\",\"t\":[\"在这个阶段，消息在被路由到特定队列的过程中可能会丢失。\",\"解决方案：\",\"路由失败通知：在 RabbitMQ 中，可以在配置新的 RabbitTemplate 时开启路由失败通知。这样，如果消息无法被路由到任何队列，将会触发一个回调函数。\",\"监控和报警：设置监控和报警机制，以便在路由失败时及时得到通知。\"]},\"225\":{\"h\":\"消息在队列正确存储\",\"t\":[\"在这个阶段，消息已经到达队列，但在存储过程中可能会丢失。\",\"解决方案：\",\"持久化配置：确保交换机、队列和消息都被设置为持久化。例如，在 RabbitMQ 中，可以通过设置 durable 属性来实现队列的持久化，以及通过 deliveryMode 来设置消息的持久化。\",\"备份和复制：使用队列的备份和复制机制来提高数据的可靠性。\"]},\"226\":{\"h\":\"队列投递到消费者\",\"t\":[\"在这个阶段，消息从队列投递到消费者的过程中可能会丢失。\",\"解决方案：\",\"消费者确认：确保消费者在处理完消息后进行确认。例如，在 RabbitMQ 中，可以通过设置手动提交（manual 或 manualAckNow）来实现。\",\"监听容器：使用监听容器来异步接收消息，并在确认消息后进行处理。\",\"绑定队列：正确绑定队列和消费者，确保消息能够被正确投递。\",\"定义消费者确认方法：在消费者中定义确认方法，确保在消息处理成功后进行确认。\"]},\"227\":{\"h\":\"运算符\"},\"228\":{\"h\":\"算术运算符\",\"t\":[\"算术运算符优先级\",\"先乘除取模后加减，有括号先算括号内的\",\"+：求和\",\"-：求差\",\"*：求积\",\"/：求商\",\"%：取模\"]},\"229\":{\"h\":\"赋值运算符\",\"t\":[\"左值警告\",\"赋值运算符是把右边的值赋予左边，这就要求左边必须是一个容器\",\"简写\",\"+=\",\"-=\",\"*=\",\"/=\"]},\"230\":{\"h\":\"一元运算符\",\"t\":[\"++：变量值加1\",\"--：变量值减1\",\"前置：先自增后运算\",\"后置：先运算后自增\",\"前置自增与后置自增\",\"独立使用二者并无差别\",\"通常使用i++\"]},\"231\":{\"h\":\"比较运算符\",\"t\":[\">：左边是否大于右边\",\"<：左边是否小于右边\",\">=：左边是否大于或等于右边\",\">=：左边是否小于或等于右边\",\"==：左右两边是否相等\",\"===：左右两边是否类型和值都相等\",\"!==：左右两边是否不全等\"]},\"232\":{\"h\":\"逻辑运算符\",\"t\":[\"符号\",\"名称\",\"日常用法\",\"特点\",\"&&\",\"逻辑与\",\"并且\",\"一假即假\",\"||\",\"逻辑或\",\"或者\",\"一真即真\",\"!\",\"逻辑非\",\"取反\",\"真变假\"]},\"233\":{\"h\":\"逻辑运算符短路\",\"t\":[\"符号\",\"短路条件\",\"&&\",\"左边为false就短路\",\"||\",\"左边为true就短路\",\"false、0、' '、undefined、null当假的看\"]},\"234\":{\"h\":\"逻辑运算符中断\",\"t\":[\"let num = prompt('请输入一个属：') num = num || 0 //num逻辑运算符短路，赋值为0 \"]},\"235\":{\"h\":\"运算符优先级\",\"t\":[\"优先级\",\"运算符\",\"顺序\",\"1\",\"小括号\",\"()\",\"2\",\"一元运算符\",\"++-- ！\",\"3\",\"算数运算符\",\"先*/%后+-\",\"4\",\"关系运算符\",\"> >= < <=\",\"5\",\"相等运算符\",\"== ！= === ！==\",\"6\",\"逻辑运算符\",\"先&&后`\",\"7\",\"赋值运算符\",\"=\",\"8\",\"逗号运算符\",\",\"]},\"236\":{\"h\":\"python\",\"t\":[\"相关信息\",\"此章节带你回顾，与大模型有关的python代码\"]},\"237\":{\"h\":\"Python的输入/输出方法\"},\"238\":{\"h\":\"输出\",\"t\":[\" print(\\\"Hello, world!\\\") \"]},\"239\":{\"h\":\"输入\",\"t\":[\"name = input(\\\"请输入你的名字: \\\") print(\\\"我的名字是: \\\", name) \"]},\"240\":{\"h\":\"注释\"},\"241\":{\"h\":\"注释\",\"t\":[\"\\\"\\\"\\\" 这是一个多行注释 可以用来描述代码的功能 \\\"\\\"\\\" # 输出Hello world print(\\\"Hello world!\\\") \"]},\"242\":{\"h\":\"变量的命名规则\",\"t\":[\"变量名的长度不受限制\",\"变量名由字符、数字与下划线组成，不能以数字开头\",\"变量名不能与关键字重名\",\"变量名大小写敏感，通常使用全小写\",\"变量命名应尽量做到 “见名知意”\",\"输出关键字\",\"import keyword print(keyword.kwlist) \"]},\"243\":{\"h\":\"常量的定义\",\"t\":[\"指的是在程序执行过程中其值不能被改变的变量\",\"通常将常量的所有字母都大写（约定俗成）\"]},\"244\":{\"h\":\"Python 基本数据类型\",\"t\":[\"数值 \",\"整数\",\"浮点数\",\"复数\",\"布尔\",\"列表\",\"元组\",\"集合\",\"字典\"]},\"245\":{\"h\":\"redis\"},\"246\":{\"h\":\"Redis有几种集群模式/高可用\",\"t\":[\"1、主从模式：将一个redis中的数据复制到其他节点，来实现数据的冗余和备份，主节点实现写操作，从节点同步数据，\",\"客服端在从节点读取数据实现读写分离， 但当主节点故障时，整个redis功能都不能使用，可用性偏弱\",\"2、哨兵模式：主从模式基础上加入哨兵节点，当发生故障时，哨兵节点会在从节点中选出一个节点当主节点\",\"1：主从切换期间客户端出现访问瞬断\",\"2：单个master节点写、存储能力有限\",\"3、cluster模式：采用数据分片的技术将全部数据分散存储在不同节点，这样解决了上述问题，\",\"如何分片：使用hash槽对数据进行分片，每个主节点负责对应哈希槽，当存取某个key时，通过hash计算确定存取的位置。\"]},\"247\":{\"h\":\"分布式CAP原理\",\"t\":[\"分区容错性：系统某节点发生故障时，仍能提供服务\",\"一致性：所有节点同一时间看到的都是一样的，可以保证数据强一致性，加锁影响系统吞吐量（重找）\",\"可用性；保证服务一直可用，正常的响应时间\"]},\"248\":{\"h\":\"Redis存储结构\",\"t\":[\"|String | hash | list |set | zset |\"]},\"249\":{\"h\":\"Redis快的原因\",\"t\":[\"基于内存，数据存储在内存中，读写速度快，同时会定期持久化，同步到磁盘中防止数据丢失\",\"单线程减少上下文切换，同时由于单线程，使得处理复杂操作时，不需要惊醒加锁\",\"Io多路复用：单个线程处理多个并发连接，提高吞吐量\",\"精简的数据结构和算法：数据结构都是优化过的，同时还有跳跃表、布弄过率器等提高查询操作效率\"]},\"250\":{\"h\":\"BIO、NIO 和 I/O 多路复用的区别\",\"t\":[\"在网络编程中，I/O 模型决定了程序如何处理输入和输出操作。BIO、NIO 和 I/O 多路复用是 Java 中常见的三种 I/O 模型，它们在处理并发请求时有不同的行为和性能特点。\"]},\"251\":{\"h\":\"BIO（Blocking I/O）\",\"t\":[\"BIO 是一种同步阻塞 I/O 模型。\",\"特点：\",\"应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。\",\"每个连接都需要一个独立的线程来处理，这在连接数很多时会导致大量的线程消耗。\",\"线程在等待 I/O 操作完成时不能做其他事情。\"]},\"252\":{\"h\":\"NIO（Non-blocking I/O）\",\"t\":[\"NIO 是一种同步非阻塞 I/O 模型。\",\"特点：\",\"应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的。\",\"通过轮询操作，避免了一直阻塞。线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。\",\"read 调用的过程（数据从内核空间 -> 用户空间）还是阻塞的。\"]},\"253\":{\"h\":\"I/O 多路复用\",\"t\":[\"I/O 多路复用是一种 I/O 复用技术，它允许一个线程监视多个文件描述符，以确定哪些文件描述符已经准备好进行 I/O 操作。\",\"特点：\",\"通过使用 select、poll 或 epoll 系统调用，一个线程可以管理多个网络连接。\",\"当某个连接的数据准备好时，操作系统会通知程序，程序再进行相应的 I/O 操作。\",\"减少了线程之间的切换开销，提高了系统的并发处理能力。\"]},\"254\":{\"h\":\"redis持久机制\",\"t\":[\"RDB：一段时间将内存数据以快照形式保存在磁盘中,文件后缀一般为rdb,\",\"优点：备份文件小，加载速度慢 缺点：不安全，数据丢失，数据不是实时保存的\",\"AOF：将所有写操作追加到一个日志文件中，\",\"优点：安全，数据不易丢失\",\"缺点：备份文件大，加载速度快，适合小规模数据恢复\",\"混合持久化：重写写入AOF文件前一刻内存做RDB快照处理，RDB快照内容和增量AOF修改命令存在一起，\",\"写入新的AOF文件，重启时，先加载RDB内容，重放增量AOF日志，替代AOF全量文件重放。\"]},\"255\":{\"h\":\"redis过期策略\",\"t\":[\"定时删除：创建定时器，时间一道删除\",\"惰性删除：未使用时不会删除，等用到key的时候，再判断有没有过期\",\"定期删除：每过一段时间抽取设置了过期的key检测是否过期\"]},\"256\":{\"h\":\"Redis淘汰策略\",\"t\":[\"淘汰策略\",\"适用范围\",\"淘汰算法\",\"描述\",\"volatile-lru\",\"设置过期时间的键\",\"LRU（最近最少使用）\",\"优先淘汰最近最少使用的键，只针对设置了过期时间的键。\",\"allkeys-lru\",\"所有键\",\"LRU（最近最少使用）\",\"优先淘汰最近最少使用的键，适用于所有键。\",\"allkeys-lfu\",\"所有键\",\"LFU（最近最少使用频率）\",\"优先淘汰使用频率最低的键，适用于所有键。\",\"volatile-lfu\",\"设置过期时间的键\",\"LFU（最近最少使用频率）\",\"优先淘汰使用频率最低的键，只针对设置了过期时间的键。\",\"volatile-random\",\"设置过期时间的键\",\"随机淘汰\",\"随机选择键进行淘汰，只针对设置了过期时间的键。\",\"allkeys-random\",\"所有键\",\"随机淘汰\",\"随机选择键进行淘汰，适用于所有键。\",\"volatile-ttl\",\"设置过期时间的键\",\"TTL（剩余生存时间）\",\"优先淘汰剩余生存时间最短的键，只针对设置了过期时间的键。\",\"no-eviction\",\"所有键\",\"不淘汰\",\"不淘汰任何键，当内存不足时，写操作会报错。\"]},\"257\":{\"h\":\"Redis 数据结构存储方式\"},\"258\":{\"h\":\"Hash\",\"t\":[\"当 Hash 的元素大小小于 64 字节时，Redis 会采用 压缩表（ziplist）来存储。\",\"超过这个大小限制时，Redis 会使用 hash 表 来存储。\"]},\"259\":{\"h\":\"List\",\"t\":[\"当 List 的元素个数小于 128 个，并且每个元素大小小于 64 字节时，Redis 会采用 压缩表（ziplist）来存储。\",\"超过这个限制时，Redis 会使用 双向链表 来存储 List 数据。\"]},\"260\":{\"h\":\"Set\",\"t\":[\"当 Set 的元素个数小于 128 个，并且所有元素都是数值时，Redis 采用 有序数组 来存储。\",\"否则，Redis 会使用 hash 表 来存储 Set 数据。\"]},\"261\":{\"h\":\"Sorted Set (ZSet)\",\"t\":[\"ZSet 可以使用 压缩表 或 跳表（skip list）来存储数据，具体取决于元素的数量和大小。\",\"HyperLogLog、Bitmap、Bitfield 是基于 String 数据类型实现的；Geo 是基于 ZSet 数据类型实现的；\"]},\"262\":{\"h\":\"重写aof\",\"t\":[\"Redis 生成新的 AOF 文件来代替旧 AOF 文件，这个新的 AOF 文件包含重建当前数据集所需的最少命令。\",\"具体过程是遍历所有数据库的所有键，从数据库读取键现在的值，然后用一条命令去记录键值对，\",\"代替之前记录这个键值对的多条命令。\"]},\"263\":{\"h\":\"语句\"},\"264\":{\"h\":\"表达式和语句\",\"t\":[\"名词解释\",\"表达式是一组代码的集合，Javascript解释器会将其计算出一个结果\",\"语句是js整句或命令，js语句是以分号结束\",\"表达式和语句区别\",\"表达式计算出一个值，但语句用来自行以使某件事发生（做什么事）\"]},\"265\":{\"h\":\"流程控制语句\"},\"266\":{\"h\":\"顺序\",\"t\":[\"流程按照线性顺序执行\"]},\"267\":{\"h\":\"分支\"},\"268\":{\"h\":\"if分支语句\"},\"269\":{\"h\":\"三元运算符\",\"t\":[\"条件?满足条件执行的代码:不满足条件执行的代码 \"]},\"270\":{\"h\":\"switch语句\",\"t\":[\"switch(条件){ case 值1: 代码1 break case 值2 代码2 break case 值3 代码3 break default 代码n break } \"]},\"271\":{\"h\":\"循环\",\"t\":[\"终止条件\",\"循环一定要有终止条件，否则会死循环\"]},\"272\":{\"h\":\"while\",\"t\":[\"while(循环条件){ 要重复执行的代码(循环体) } \"]},\"273\":{\"h\":\"for\",\"t\":[\"for(声明记录循环次数的变量;循环条件；变化值){ 循环体 } \"]},\"274\":{\"h\":\"循环结束\",\"t\":[\"continue: 结束本次循环，继续下次循环\",\"break:跳出循环\"]},\"275\":{\"h\":\"小提示\"},\"276\":{\"h\":\"电脑用户变量和系统变量那个优先级高?\",\"t\":[\"当涉及到环境变量的解析和使用时，通常用户变量的优先级高于系统变量。\",\"这意味着如果一个用户变量和一个系统变量具有相同的名称，那么在该用户的上下文中，用户变量的值将被优先使用。\"]},\"277\":{\"h\":\"node跟npm指令有啥区别?\",\"t\":[\"node：用于运行 JavaScript 代码，是 Node.js 的执行环境。\",\"npm：用于管理 Node.js 项目的依赖和包，是 Node.js 的包管理器。\",\"提示\",\"Hykari对sharingspares比druid更适配\"]},\"278\":{\"h\":\"Anaconda 简介\",\"t\":[\"Anaconda 是一个流行的 Python 数据科学平台，具有以下特点：\",\"具备跨平台管理包和环境的能力\",\"支持在各个操作系统上安装、运行和更新软件包及其依赖\",\"自身包含150+个高质量的第三方软件包\",\"自带 Python 交互式开发环境 Jupyter Notebook\"]},\"279\":{\"h\":\"DDoS 攻击：分布式拒绝服务攻击\",\"t\":[\"DDoS（Distributed Denial of Service）攻击是一种通过多台服务器对目标服务器的某个接口进行大量访问，以消耗其资源并导致服务不可用的网络攻击。攻击可以发生在网络层、传输层和应用层。\"]},\"280\":{\"h\":\"攻击方式\",\"t\":[\"TCP 洪水攻击：攻击方发送大量的连接请求，但源 IP 地址是伪造的。当服务器回复 ACK 报文后，攻击方不回复，导致服务器产生大量半连接状态的 TCP 请求，最终可能导致服务崩溃。\",\"应用层攻击：直接对服务器发送大量的 GET 请求，耗尽服务器资源。\"]},\"281\":{\"h\":\"防御措施\",\"t\":[\"合理使用黑名单和白名单：控制访问权限，减少恶意流量。\",\"使用分布式防御系统：分散攻击流量，提高防御能力。\",\"部署 CDN：通过内容分发网络缓解攻击压力，保护源服务器。\"]},\"282\":{\"h\":\"变量\",\"t\":[\"变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆\",\"内存：计算机中存储数据的地方，相当于一个空间 变量：是程序在内存中申请的一块用来存放数据的小空间\",\"垃圾回收机制\",\"Javascript本身自带垃圾回收机制，不使用的变量会回收空间，避免内存漫溢\"]},\"283\":{\"h\":\"声明变量\",\"t\":[\"警告\",\"let不允许多次声名同一个变量\",\"let age; \",\"let是关键字, age是变量名/标识符\"]},\"284\":{\"h\":\"变量赋值\",\"t\":[\"变量名前跟上一个=\",\"let age; age = 6; //输出变量值 document.write(age); \"]},\"285\":{\"h\":\"更新变量\",\"t\":[\"变量赋值后，还可以通过简单地给它一个不同的值来更新它\",\"let age; age = 12; //更新变量 age = 24; //输出变量值 document.write(age); \"]},\"286\":{\"h\":\"变量初始化\",\"t\":[\"//声明并初始化变量值 let age = 24; //声明多个变量并初始化 let gender = 'male',userName = 'igloo'; \"]},\"287\":{\"h\":\"变量命名规则与规范\",\"t\":[\"规则：必须遵守，不遵守会报错 规范：建议，不遵守不会报错，但不符合业内通识\"]},\"288\":{\"h\":\"命名规则\",\"t\":[\"不能用关键字\",\"下划线、字母、数字、$组成，且数字不能开头\",\"字母严格区分大小写，如Age和age是不同变量\"]},\"289\":{\"h\":\"命名规范\",\"t\":[\"起名字要有意义\",\"遵守驼峰命名法，建议小驼峰命名\"]},\"290\":{\"h\":\"声明变量规范\",\"t\":[\"使用let而非var声明变量\",\"var声明有如下弊端\",\"可以先使用在声明（不合理）\",\"声明过的变量可重复声明（不合理）\",\"缺少块级作用域\"]},\"291\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"缺少块级作用域\",{\"1\":{\"290\":1}}],[\"缺点\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"254\":2}}],[\"遵守驼峰命名法\",{\"1\":{\"289\":1}}],[\"起名字要有意义\",{\"1\":{\"289\":1}}],[\"命名规范\",{\"0\":{\"289\":1}}],[\"命名规则\",{\"0\":{\"288\":1}}],[\"下划线\",{\"1\":{\"288\":1}}],[\"下的自动配置类\",{\"1\":{\"111\":1}}],[\"建议小驼峰命名\",{\"1\":{\"289\":1}}],[\"建议\",{\"1\":{\"287\":1}}],[\"建立\",{\"1\":{\"124\":1}}],[\"必须遵守\",{\"1\":{\"287\":1}}],[\"必须和引用队列一起使用\",{\"1\":{\"24\":1}}],[\"规范\",{\"1\":{\"287\":1}}],[\"规则\",{\"1\":{\"287\":1}}],[\"规定了js基础语法核心知识\",{\"1\":{\"45\":1}}],[\"还可以通过简单地给它一个不同的值来更新它\",{\"1\":{\"285\":1}}],[\"还是阻塞的\",{\"1\":{\"252\":1}}],[\"警告\",{\"1\":{\"283\":1}}],[\"警告内容\",{\"1\":{\"52\":1}}],[\"部署\",{\"1\":{\"281\":1}}],[\"合理使用黑名单和白名单\",{\"1\":{\"281\":1}}],[\"合理使用索引\",{\"1\":{\"172\":1}}],[\"防御措施\",{\"0\":{\"281\":1}}],[\"防止核心\",{\"1\":{\"37\":1}}],[\"防止生产速度大于消费速度\",{\"1\":{\"15\":1}}],[\"耗尽服务器资源\",{\"1\":{\"280\":1}}],[\"报文后\",{\"1\":{\"280\":1}}],[\"洪水攻击\",{\"1\":{\"280\":1}}],[\"传输层和应用层\",{\"1\":{\"279\":1}}],[\"传统的我们的检索是逐个遍历找到对应关键词的位置\",{\"1\":{\"187\":1}}],[\"攻击方不回复\",{\"1\":{\"280\":1}}],[\"攻击方发送大量的连接请求\",{\"1\":{\"280\":1}}],[\"攻击方式\",{\"0\":{\"280\":1}}],[\"攻击可以发生在网络层\",{\"1\":{\"279\":1}}],[\"攻击是一种通过多台服务器对目标服务器的某个接口进行大量访问\",{\"1\":{\"279\":1}}],[\"攻击\",{\"0\":{\"279\":1}}],[\"交互式开发环境\",{\"1\":{\"278\":1}}],[\"运行和更新软件包及其依赖\",{\"1\":{\"278\":1}}],[\"运算符优先级\",{\"0\":{\"235\":1}}],[\"运算符\",{\"0\":{\"227\":1},\"1\":{\"235\":1}}],[\"具备跨平台管理包和环境的能力\",{\"1\":{\"278\":1}}],[\"具有以下特点\",{\"1\":{\"278\":1}}],[\"具体过程是遍历所有数据库的所有键\",{\"1\":{\"262\":1}}],[\"具体取决于元素的数量和大小\",{\"1\":{\"261\":1}}],[\"具体会使用到\",{\"1\":{\"75\":1}}],[\"具体来说\",{\"1\":{\"25\":1}}],[\"具体的执行流程如下\",{\"1\":{\"24\":1}}],[\"项目的依赖和包\",{\"1\":{\"277\":1}}],[\"项目用途\",{\"0\":{\"3\":1}}],[\"电脑用户变量和系统变量那个优先级高\",{\"0\":{\"276\":1}}],[\"跳出循环\",{\"1\":{\"274\":1}}],[\"跳表\",{\"1\":{\"261\":1}}],[\"继续下次循环\",{\"1\":{\"274\":1}}],[\"变化值\",{\"1\":{\"273\":1}}],[\"变量命名规则与规范\",{\"0\":{\"287\":1}}],[\"变量命名应尽量做到\",{\"1\":{\"242\":1}}],[\"变量初始化\",{\"0\":{\"286\":1}}],[\"变量赋值后\",{\"1\":{\"285\":1}}],[\"变量赋值\",{\"0\":{\"284\":1}}],[\"变量是计算机中用来存储数据的\",{\"1\":{\"282\":1}}],[\"变量\",{\"0\":{\"282\":1},\"1\":{\"282\":1}}],[\"变量名前跟上一个=\",{\"1\":{\"284\":1}}],[\"变量名大小写敏感\",{\"1\":{\"242\":1}}],[\"变量名不能与关键字重名\",{\"1\":{\"242\":1}}],[\"变量名由字符\",{\"1\":{\"242\":1}}],[\"变量名的长度不受限制\",{\"1\":{\"242\":1}}],[\"变量的命名规则\",{\"0\":{\"242\":1}}],[\"变量的值\",{\"1\":{\"25\":1}}],[\"变量值减1\",{\"1\":{\"230\":1}}],[\"变量值加1\",{\"1\":{\"230\":1}}],[\"声明过的变量可重复声明\",{\"1\":{\"290\":1}}],[\"声明多个变量并初始化\",{\"1\":{\"286\":1}}],[\"声明并初始化变量值\",{\"1\":{\"286\":1}}],[\"声明并赋值\",{\"1\":{\"138\":1}}],[\"声明变量规范\",{\"0\":{\"290\":1}}],[\"声明变量\",{\"0\":{\"283\":1}}],[\"声明记录循环次数的变量\",{\"1\":{\"273\":1}}],[\"要重复执行的代码\",{\"1\":{\"272\":1}}],[\"要么在遇到错误时全部撤销\",{\"1\":{\"173\":1}}],[\"终止条件\",{\"1\":{\"271\":1}}],[\"循环结束\",{\"0\":{\"274\":1}}],[\"循环体\",{\"1\":{\"272\":1,\"273\":1}}],[\"循环条件\",{\"1\":{\"272\":1,\"273\":1}}],[\"循环一定要有终止条件\",{\"1\":{\"271\":1}}],[\"循环\",{\"0\":{\"271\":1}}],[\"循环依赖\",{\"1\":{\"79\":1}}],[\"循环依赖及其解决方案\",{\"0\":{\"79\":1}}],[\"满足条件执行的代码\",{\"1\":{\"269\":1}}],[\"条件\",{\"1\":{\"269\":1,\"270\":1}}],[\"条件判断\",{\"1\":{\"66\":1}}],[\"流程按照线性顺序执行\",{\"1\":{\"266\":1}}],[\"流程控制语句\",{\"0\":{\"265\":1}}],[\"做什么事\",{\"1\":{\"264\":1}}],[\"做出不同的处理\",{\"1\":{\"201\":1}}],[\"名词解释\",{\"1\":{\"264\":1}}],[\"名称\",{\"1\":{\"232\":1}}],[\"然后用一条命令去记录键值对\",{\"1\":{\"262\":1}}],[\"采用\",{\"1\":{\"260\":1}}],[\"采用数据分片的技术将全部数据分散存储在不同节点\",{\"1\":{\"246\":1}}],[\"个\",{\"1\":{\"259\":1,\"260\":1}}],[\"个数量的线程来执行任务\",{\"1\":{\"24\":1}}],[\"超过这个限制时\",{\"1\":{\"259\":1}}],[\"超过这个大小限制时\",{\"1\":{\"258\":1}}],[\"超时后触发线程回收\",{\"1\":{\"20\":1}}],[\"超时判断在\",{\"1\":{\"20\":1}}],[\"压缩表\",{\"1\":{\"258\":1,\"259\":1,\"261\":1}}],[\"压缩算法\",{\"1\":{\"34\":3}}],[\"剩余生存时间\",{\"1\":{\"256\":1}}],[\"随机选择键进行淘汰\",{\"1\":{\"256\":2}}],[\"随机淘汰\",{\"1\":{\"256\":2}}],[\"随时到岗\",{\"1\":{\"0\":1}}],[\"淘汰算法\",{\"1\":{\"256\":1}}],[\"淘汰策略\",{\"1\":{\"256\":1}}],[\"再判断有没有过期\",{\"1\":{\"255\":1}}],[\"再继续执行\",{\"1\":{\"12\":1}}],[\"惰性删除\",{\"1\":{\"255\":1}}],[\"写操作会报错\",{\"1\":{\"256\":1}}],[\"写操作少的场景下性能较好\",{\"1\":{\"161\":1}}],[\"写入新的aof文件\",{\"1\":{\"254\":1}}],[\"混合持久化\",{\"1\":{\"254\":1}}],[\"安全\",{\"1\":{\"254\":1}}],[\"安全性\",{\"0\":{\"195\":1},\"1\":{\"26\":1}}],[\"备份文件大\",{\"1\":{\"254\":1}}],[\"备份文件小\",{\"1\":{\"254\":1}}],[\"备份和复制\",{\"1\":{\"225\":1}}],[\"程序再进行相应的\",{\"1\":{\"253\":1}}],[\"程序员不需要处理\",{\"1\":{\"213\":1}}],[\"询问内核数据是否准备就绪\",{\"1\":{\"252\":1}}],[\"布弄过率器等提高查询操作效率\",{\"1\":{\"249\":1}}],[\"布尔\",{\"1\":{\"244\":1}}],[\"精简的数据结构和算法\",{\"1\":{\"249\":1}}],[\"ziplist\",{\"1\":{\"258\":1,\"259\":1}}],[\"zset\",{\"0\":{\"261\":1},\"1\":{\"248\":1,\"261\":2}}],[\"zhangsan\",{\"1\":{\"162\":2}}],[\"|set\",{\"1\":{\"248\":1}}],[\"|string\",{\"1\":{\"248\":1}}],[\"|\",{\"1\":{\"248\":4}}],[\"||\",{\"1\":{\"232\":1,\"233\":1,\"234\":1}}],[\"正常的响应时间\",{\"1\":{\"247\":1}}],[\"正确绑定队列和消费者\",{\"1\":{\"226\":1}}],[\"仍能提供服务\",{\"1\":{\"247\":1}}],[\"仍然可能是更好的选择\",{\"1\":{\"171\":1}}],[\"系统调用\",{\"1\":{\"253\":1}}],[\"系统某节点发生故障时\",{\"1\":{\"247\":1}}],[\"系统之间独立\",{\"1\":{\"185\":1}}],[\"哨兵节点会在从节点中选出一个节点当主节点\",{\"1\":{\"246\":1}}],[\"哨兵模式\",{\"1\":{\"246\":1}}],[\"客服端在从节点读取数据实现读写分离\",{\"1\":{\"246\":1}}],[\"客户端收到服务器的\",{\"1\":{\"127\":1}}],[\"客户端收到\",{\"1\":{\"126\":1}}],[\"客户端发送一个带有\",{\"1\":{\"126\":1,\"127\":1}}],[\"客户端\",{\"1\":{\"74\":1,\"122\":1}}],[\"客户端请求\",{\"1\":{\"74\":1}}],[\"主从切换期间客户端出现访问瞬断\",{\"1\":{\"246\":1}}],[\"主从模式基础上加入哨兵节点\",{\"1\":{\"246\":1}}],[\"主从模式\",{\"1\":{\"246\":1}}],[\"主节点实现写操作\",{\"1\":{\"246\":1}}],[\"主要用于字段和方法上的注入\",{\"1\":{\"69\":1}}],[\"主要用于构建\",{\"1\":{\"62\":1}}],[\"主要是跟踪垃圾回收\",{\"1\":{\"24\":1}}],[\"集合\",{\"1\":{\"244\":1}}],[\"元组\",{\"1\":{\"244\":1}}],[\"列表\",{\"1\":{\"244\":1}}],[\"复用技术\",{\"1\":{\"253\":1}}],[\"复数\",{\"1\":{\"244\":1}}],[\"复制算法\",{\"1\":{\"34\":4}}],[\"浮点数\",{\"1\":{\"244\":1}}],[\"约定俗成\",{\"1\":{\"243\":1}}],[\"常量的定义\",{\"0\":{\"243\":1}}],[\"常见的例子\",{\"1\":{\"18\":1}}],[\"见名知意\",{\"1\":{\"242\":1}}],[\"我的名字是\",{\"1\":{\"239\":1}}],[\"我们会先从appclassloader缓存查找\",{\"1\":{\"36\":1}}],[\"我们可以破坏其中任一条件\",{\"1\":{\"27\":1}}],[\"我们无法获取\",{\"1\":{\"22\":1}}],[\"此章节带你回顾\",{\"1\":{\"236\":1}}],[\"逗号运算符\",{\"1\":{\"235\":1}}],[\"7\",{\"1\":{\"235\":1}}],[\"64\",{\"1\":{\"258\":1,\"259\":1}}],[\"6\",{\"1\":{\"235\":1,\"284\":1}}],[\"60l\",{\"1\":{\"11\":1}}],[\"5\",{\"1\":{\"235\":1}}],[\"4\",{\"1\":{\"235\":1}}],[\"404\",{\"1\":{\"291\":1}}],[\"40\",{\"1\":{\"162\":1}}],[\"算数运算符\",{\"1\":{\"235\":1}}],[\"算术运算符优先级\",{\"1\":{\"228\":1}}],[\"算术运算符\",{\"0\":{\"228\":1}}],[\"顺序\",{\"0\":{\"266\":1},\"1\":{\"235\":1}}],[\"短路条件\",{\"1\":{\"233\":1}}],[\"真变假\",{\"1\":{\"232\":1}}],[\"取反\",{\"1\":{\"232\":1}}],[\"取模\",{\"1\":{\"228\":1}}],[\"日常用法\",{\"1\":{\"232\":1}}],[\"日志的解析和数据同步的复杂性\",{\"1\":{\"186\":1}}],[\"日志\",{\"1\":{\"186\":1}}],[\"日志监听\",{\"0\":{\"186\":1}}],[\"逻辑非\",{\"1\":{\"232\":1}}],[\"逻辑或\",{\"1\":{\"232\":1}}],[\"逻辑与\",{\"1\":{\"232\":1}}],[\"逻辑运算符中断\",{\"0\":{\"234\":1}}],[\"逻辑运算符短路\",{\"0\":{\"233\":1}}],[\"逻辑运算符\",{\"0\":{\"232\":1},\"1\":{\"235\":1}}],[\"逻辑上的视图\",{\"1\":{\"74\":1}}],[\"左边为true就短路\",{\"1\":{\"233\":1}}],[\"左边为false就短路\",{\"1\":{\"233\":1}}],[\"左边是否小于或等于右边\",{\"1\":{\"231\":1}}],[\"左边是否小于右边\",{\"1\":{\"231\":1}}],[\"左边是否大于或等于右边\",{\"1\":{\"231\":1}}],[\"左边是否大于右边\",{\"1\":{\"231\":1}}],[\"左右两边是否不全等\",{\"1\":{\"231\":1}}],[\"左右两边是否类型和值都相等\",{\"1\":{\"231\":1}}],[\"左右两边是否相等\",{\"1\":{\"231\":1}}],[\"左值警告\",{\"1\":{\"229\":1}}],[\"独立使用二者并无差别\",{\"1\":{\"230\":1}}],[\"前置自增与后置自增\",{\"1\":{\"230\":1}}],[\"前置\",{\"1\":{\"230\":1}}],[\"前置处理\",{\"1\":{\"70\":1}}],[\"赋值为0\",{\"1\":{\"234\":1}}],[\"赋值运算符是把右边的值赋予左边\",{\"1\":{\"229\":1}}],[\"赋值运算符\",{\"0\":{\"229\":1},\"1\":{\"235\":1}}],[\"赋值后才能判断\",{\"1\":{\"131\":1}}],[\"求商\",{\"1\":{\"228\":1}}],[\"求积\",{\"1\":{\"228\":1}}],[\"求差\",{\"1\":{\"228\":1}}],[\"求和\",{\"1\":{\"228\":1}}],[\"先加载rdb内容\",{\"1\":{\"254\":1}}],[\"先\",{\"1\":{\"235\":2}}],[\"先运算后自增\",{\"1\":{\"230\":1}}],[\"先自增后运算\",{\"1\":{\"230\":1}}],[\"先乘除取模后加减\",{\"1\":{\"228\":1}}],[\"先执行子查询并获取结果集\",{\"1\":{\"166\":1}}],[\"绑定队列\",{\"1\":{\"226\":1}}],[\"队列投递到消费者\",{\"0\":{\"226\":1}}],[\"队列和消息都被设置为持久化\",{\"1\":{\"225\":1}}],[\"持久化配置\",{\"1\":{\"225\":1}}],[\"设置过期时间的键\",{\"1\":{\"256\":4}}],[\"设置监控和报警机制\",{\"1\":{\"224\":1}}],[\"设计模式\",{\"0\":{\"113\":1}}],[\"设计模式的\",{\"1\":{\"74\":1}}],[\"监控和报警\",{\"1\":{\"224\":1}}],[\"监听容器\",{\"1\":{\"226\":1}}],[\"监听\",{\"0\":{\"186\":1}}],[\"监听器的实现\",{\"1\":{\"105\":1}}],[\"路由失败通知\",{\"1\":{\"224\":1}}],[\"信息路由到队列\",{\"0\":{\"224\":1}}],[\"信息到\",{\"0\":{\"223\":1}}],[\"参数来控制消息的确认机制\",{\"1\":{\"223\":1}}],[\"仅消息生产事务\",{\"1\":{\"221\":1}}],[\"仅对单例\",{\"1\":{\"81\":1}}],[\"拉\",{\"1\":{\"221\":3}}],[\"延迟队列\",{\"1\":{\"221\":1}}],[\"√\",{\"1\":{\"221\":6}}],[\"×\",{\"1\":{\"221\":3}}],[\"死信队列\",{\"1\":{\"221\":1}}],[\"死锁发生的必要条件是1资源互斥2循环等待3抢占且等待4不可抢占\",{\"1\":{\"27\":1}}],[\"死锁是在并发条件下\",{\"1\":{\"27\":1}}],[\"死锁\",{\"0\":{\"27\":1}}],[\"高可用\",{\"0\":{\"246\":1}}],[\"高\",{\"1\":{\"221\":2}}],[\"吞吐量\",{\"1\":{\"221\":1}}],[\"吞吐量优先\",{\"1\":{\"34\":2}}],[\"匿名内部类\",{\"0\":{\"218\":1}}],[\"<=\",{\"1\":{\"235\":1}}],[\"<\",{\"1\":{\"231\":1,\"235\":1}}],[\"<接口名\",{\"1\":{\"217\":1}}],[\"<>\",{\"1\":{\"162\":1}}],[\"修改接口时需要修改所有实现该接口的类\",{\"1\":{\"217\":1}}],[\"修饰\",{\"1\":{\"194\":1}}],[\"修饰的方法可以放入接口中\",{\"1\":{\"217\":1}}],[\"修饰的普通成员变量\",{\"1\":{\"41\":1}}],[\"修饰的成员变量在类加载时就初始化\",{\"1\":{\"41\":1}}],[\"修饰的成员变量\",{\"0\":{\"40\":1}}],[\"修饰的成员变量和成员对象\",{\"0\":{\"39\":1}}],[\"修饰的\",{\"1\":{\"32\":1}}],[\"新特性\",{\"0\":{\"217\":1}}],[\"新生代\",{\"1\":{\"34\":4}}],[\"8\",{\"0\":{\"217\":1},\"1\":{\"235\":1}}],[\"访问范围\",{\"1\":{\"215\":1}}],[\"访问修饰符\",{\"1\":{\"215\":1}}],[\"访问权限\",{\"0\":{\"215\":1}}],[\"存储能力有限\",{\"1\":{\"246\":1}}],[\"存储引擎的区别\",{\"0\":{\"156\":1}}],[\"存在位置\",{\"1\":{\"214\":1}}],[\"否则会死循环\",{\"1\":{\"271\":1}}],[\"否则\",{\"1\":{\"260\":1}}],[\"否\",{\"1\":{\"214\":1}}],[\"编译器要求程序必须捕获或抛出这种异常\",{\"1\":{\"213\":1}}],[\"那就在常量池中创建一个指向该字符串对象的引用\",{\"1\":{\"209\":1}}],[\"那么在该用户的上下文中\",{\"1\":{\"276\":1}}],[\"那么在没有其他强引用指向这个值的情况下\",{\"1\":{\"23\":1}}],[\"那么两次读取的数据数量可能不一致\",{\"1\":{\"151\":1}}],[\"那么两次读取的数据可能不一致\",{\"1\":{\"150\":1}}],[\"那么读取到的数据就是无效的\",{\"1\":{\"149\":1}}],[\"那么这些信息可能会被重用的线程意外地继承\",{\"1\":{\"25\":1}}],[\"那么这个仅被弱引用的对象在下次垃圾回收\",{\"1\":{\"22\":1}}],[\"覆盖父类方法\",{\"1\":{\"202\":1}}],[\"重放增量aof日志\",{\"1\":{\"254\":1}}],[\"重启时\",{\"1\":{\"254\":1}}],[\"重找\",{\"1\":{\"247\":1}}],[\"重写aof\",{\"0\":{\"262\":1}}],[\"重写写入aof文件前一刻内存做rdb快照处理\",{\"1\":{\"254\":1}}],[\"重写后比较对象的内容是否相同\",{\"1\":{\"208\":1}}],[\"重写前跟==一致\",{\"1\":{\"208\":1}}],[\"重写\",{\"0\":{\"200\":1,\"202\":1}}],[\"重载\",{\"0\":{\"200\":1,\"201\":1}}],[\"拆箱\",{\"0\":{\"199\":1}}],[\"装箱\",{\"0\":{\"198\":1}}],[\"值3\",{\"1\":{\"270\":1}}],[\"值2\",{\"1\":{\"270\":1}}],[\"值1\",{\"1\":{\"270\":1}}],[\"值是\",{\"1\":{\"194\":1}}],[\"值可能会在任何时候被垃圾回收器回收\",{\"1\":{\"23\":1}}],[\"拷贝引用\",{\"1\":{\"190\":1}}],[\"浅拷贝会直接复制内部对象的引用地址\",{\"1\":{\"192\":1}}],[\"浅拷贝\",{\"0\":{\"189\":1,\"192\":1}}],[\"深拷贝\",{\"0\":{\"189\":1,\"191\":1}}],[\"极大的提高了检索效率\",{\"1\":{\"187\":1}}],[\"形成了词和id的映射关系表\",{\"1\":{\"187\":1}}],[\"增加了系统的复杂度\",{\"1\":{\"185\":1}}],[\"增加了开销\",{\"1\":{\"26\":1}}],[\"消费者确认\",{\"1\":{\"226\":1}}],[\"消费端订阅这个消息并同步到\",{\"1\":{\"185\":1}}],[\"消息从队列投递到消费者的过程中可能会丢失\",{\"1\":{\"226\":1}}],[\"消息从生产者发送到消息队列的过程中可能会丢失\",{\"1\":{\"223\":1}}],[\"消息已经到达队列\",{\"1\":{\"225\":1}}],[\"消息在队列正确存储\",{\"0\":{\"225\":1}}],[\"消息在被路由到特定队列的过程中可能会丢失\",{\"1\":{\"224\":1}}],[\"消息到指定的交换机\",{\"1\":{\"223\":1}}],[\"消息丢失是一个需要特别注意的问题\",{\"1\":{\"222\":1}}],[\"消息丢失问题及解决方案\",{\"0\":{\"222\":1}}],[\"消息获取\",{\"1\":{\"221\":1}}],[\"消息队列\",{\"0\":{\"185\":1}}],[\"进行异步数据同步\",{\"1\":{\"185\":1}}],[\"进行初始化的\",{\"1\":{\"39\":1,\"40\":1}}],[\"kwlist\",{\"1\":{\"242\":1}}],[\"kafka\",{\"1\":{\"185\":1,\"221\":1,\"223\":1}}],[\"keepalivetime\",{\"1\":{\"24\":1}}],[\"keyword\",{\"1\":{\"242\":2}}],[\"key\",{\"0\":{\"22\":1},\"1\":{\"21\":1}}],[\"异常类型及原理\",{\"0\":{\"213\":1}}],[\"异常处理类用于集中处理应用程序中的异常\",{\"1\":{\"88\":1}}],[\"异常处理类\",{\"0\":{\"88\":1}}],[\"异步通知\",{\"0\":{\"185\":1}}],[\"耦合度高\",{\"1\":{\"184\":1}}],[\"立即反映在\",{\"1\":{\"184\":1}}],[\"双向链表\",{\"1\":{\"259\":1}}],[\"双写\",{\"0\":{\"184\":1}}],[\"双亲委派\",{\"0\":{\"36\":1}}],[\"搜索引擎之间的数据一致性\",{\"1\":{\"183\":1}}],[\"聚合函数\",{\"1\":{\"182\":1}}],[\"聚簇索引\",{\"0\":{\"153\":1}}],[\"指的是在程序执行过程中其值不能被改变的变量\",{\"1\":{\"243\":1}}],[\"指的是两个或多个\",{\"1\":{\"79\":1}}],[\"指定最终选择哪些列显示在结果集中\",{\"1\":{\"182\":1}}],[\"指定\",{\"1\":{\"182\":1}}],[\"了解各子句的执行顺序对于优化查询性能至关重要\",{\"1\":{\"182\":1}}],[\"全表扫描\",{\"1\":{\"181\":1}}],[\"全索引扫描\",{\"1\":{\"181\":1}}],[\"慢\",{\"1\":{\"181\":2}}],[\"速度比\",{\"1\":{\"181\":1}}],[\"速度非常快\",{\"1\":{\"181\":1}}],[\"语句是js整句或命令\",{\"1\":{\"264\":1}}],[\"语句的执行计划\",{\"1\":{\"180\":1}}],[\"语句\",{\"0\":{\"263\":1},\"1\":{\"179\":1}}],[\"找出执行效率低的\",{\"1\":{\"179\":1}}],[\"分散攻击流量\",{\"1\":{\"281\":1}}],[\"分布式拒绝服务攻击\",{\"0\":{\"279\":1}}],[\"分布式cap原理\",{\"0\":{\"247\":1}}],[\"分支\",{\"0\":{\"267\":1}}],[\"分区容错性\",{\"1\":{\"247\":1}}],[\"分为\",{\"1\":{\"213\":1}}],[\"分析慢查询日志\",{\"1\":{\"179\":1}}],[\"分别使用了读写两把锁\",{\"1\":{\"16\":1}}],[\"查看\",{\"0\":{\"180\":1}}],[\"查看慢查询日志\",{\"0\":{\"179\":1}}],[\"查询的典型执行顺序\",{\"1\":{\"182\":1}}],[\"查询的性能\",{\"1\":{\"177\":1}}],[\"查询时\",{\"1\":{\"182\":1}}],[\"查询\",{\"1\":{\"162\":1}}],[\"查询中使用了\",{\"1\":{\"162\":1}}],[\"查询结果可以在二级索引获取\",{\"1\":{\"155\":1}}],[\"首先确定数据来源\",{\"1\":{\"182\":1}}],[\"首先\",{\"1\":{\"178\":1}}],[\"开启慢查询日志\",{\"0\":{\"178\":1}}],[\"开头的\",{\"1\":{\"162\":1}}],[\"排查及优化指南\",{\"0\":{\"177\":1}}],[\"行锁级别\",{\"1\":{\"175\":1}}],[\"代码\",{\"1\":{\"277\":1}}],[\"代码n\",{\"1\":{\"270\":1}}],[\"代码3\",{\"1\":{\"270\":1}}],[\"代码2\",{\"1\":{\"270\":1}}],[\"代码1\",{\"1\":{\"270\":1}}],[\"代码块和静态导包\",{\"1\":{\"210\":1}}],[\"代替之前记录这个键值对的多条命令\",{\"1\":{\"262\":1}}],[\"代替\",{\"1\":{\"172\":1}}],[\"代理模式为其他对象提供一个代理以控制对这个对象的访问\",{\"1\":{\"103\":1}}],[\"代理模式\",{\"0\":{\"103\":1,\"120\":1}}],[\"代理类需要有被代理类的成员变量\",{\"1\":{\"35\":1}}],[\"代理类与被代理类实现相同接口\",{\"1\":{\"35\":1}}],[\"限制返回的数据量\",{\"1\":{\"172\":1}}],[\"尽量使用数值类型代替字符串类型\",{\"1\":{\"172\":1}}],[\"替代aof全量文件重放\",{\"1\":{\"254\":1}}],[\"替代\",{\"1\":{\"172\":2}}],[\"谨慎使用\",{\"1\":{\"172\":1}}],[\"尤其是在处理大型数据集时\",{\"1\":{\"169\":1}}],[\"尤其是在处理大量数据时\",{\"1\":{\"161\":1}}],[\"小提示\",{\"0\":{\"275\":1}}],[\"小括号\",{\"1\":{\"235\":1}}],[\"小的表使用\",{\"1\":{\"167\":1}}],[\"小数\",{\"1\":{\"131\":1}}],[\"汇总匹配值返回最终结果\",{\"1\":{\"166\":1}}],[\"删除表结构以及表中的全部数据\",{\"1\":{\"163\":1}}],[\"删除表中的全部数据\",{\"1\":{\"163\":1}}],[\"删除内容\",{\"1\":{\"163\":1}}],[\"回滚支持\",{\"1\":{\"163\":1}}],[\"回收流程由\",{\"1\":{\"20\":1}}],[\"操作系统会通知程序\",{\"1\":{\"253\":1}}],[\"操作\",{\"1\":{\"253\":2}}],[\"操作完成时不能做其他事情\",{\"1\":{\"251\":1}}],[\"操作基本单元\",{\"1\":{\"214\":1}}],[\"操作中用于连接表的条件\",{\"1\":{\"182\":1}}],[\"操作符\",{\"0\":{\"219\":1},\"1\":{\"172\":1}}],[\"操作的比较\",{\"1\":{\"163\":1}}],[\"操作比较\",{\"0\":{\"163\":1}}],[\"操作时会进行启发式清理和探测式清理\",{\"1\":{\"22\":1}}],[\"子类\",{\"1\":{\"215\":2}}],[\"子句在子查询中进行全表扫描\",{\"1\":{\"169\":1}}],[\"子句中的列表过大时\",{\"1\":{\"162\":1}}],[\"子查询大的表使用\",{\"1\":{\"167\":1}}],[\"子线程就可以访问到父线程中\",{\"1\":{\"25\":1}}],[\"子线程\",{\"1\":{\"25\":1}}],[\"隐式类型转换\",{\"1\":{\"162\":1}}],[\"隐式转换\",{\"0\":{\"145\":1}}],[\"两边有范围查询\",{\"1\":{\"162\":1}}],[\"两个不同的引用指向同一个对象\",{\"1\":{\"190\":1}}],[\"两个不同的threadlocal\",{\"1\":{\"24\":1,\"25\":1}}],[\"两个线程互相等待对方资源而进入无尽等待中\",{\"1\":{\"27\":1}}],[\"索引合并\",{\"1\":{\"181\":1}}],[\"索引会失效\",{\"1\":{\"162\":2}}],[\"索引无法使用\",{\"1\":{\"162\":1}}],[\"索引列参与计算\",{\"1\":{\"162\":1}}],[\"索引失效\",{\"0\":{\"162\":1}}],[\"索引覆盖\",{\"0\":{\"155\":1}}],[\"应选择\",{\"1\":{\"161\":1}}],[\"应用层攻击\",{\"1\":{\"280\":1}}],[\"应用程序会一直发起\",{\"1\":{\"252\":1}}],[\"应用程序发起\",{\"1\":{\"251\":1}}],[\"应用中\",{\"1\":{\"75\":1}}],[\"应用中开发\",{\"1\":{\"60\":1}}],[\"应用启动\",{\"1\":{\"66\":1}}],[\"应用的启动类\",{\"1\":{\"109\":1}}],[\"应用的开发\",{\"1\":{\"108\":1}}],[\"应用的能力\",{\"1\":{\"106\":1}}],[\"应用的整个生命周期中\",{\"1\":{\"84\":1}}],[\"应用的配置过程\",{\"1\":{\"65\":1}}],[\"应用的初始搭建和开发过程\",{\"1\":{\"57\":1}}],[\"应用时\",{\"1\":{\"60\":1}}],[\"应用\",{\"1\":{\"57\":1,\"58\":2,\"63\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1}}],[\"性能更佳\",{\"1\":{\"205\":1}}],[\"性能方面\",{\"0\":{\"196\":1,\"205\":1}}],[\"性能最差\",{\"1\":{\"181\":1,\"196\":1}}],[\"性能从最好到最差的排序如下\",{\"1\":{\"181\":1}}],[\"性能比较\",{\"0\":{\"171\":1}}],[\"性能考虑\",{\"0\":{\"167\":1}}],[\"性能\",{\"0\":{\"161\":1}}],[\"隔离性和持久性\",{\"1\":{\"160\":1}}],[\"隔离级别\",{\"0\":{\"152\":1}}],[\"完全复制整个对象\",{\"1\":{\"191\":1}}],[\"完全支持\",{\"1\":{\"160\":1}}],[\"完成这三个步骤后\",{\"1\":{\"126\":1}}],[\"完成自动配置\",{\"1\":{\"66\":1}}],[\"完成容器刷新\",{\"1\":{\"55\":1}}],[\"外键约束或者需要更好的数据完整性和一致性\",{\"1\":{\"161\":1}}],[\"外键支持\",{\"0\":{\"159\":1},\"1\":{\"156\":1}}],[\"外部化配置等\",{\"1\":{\"57\":1}}],[\"锁定级别\",{\"0\":{\"158\":1},\"1\":{\"156\":1}}],[\"锁机制\",{\"1\":{\"18\":1}}],[\"之间\",{\"1\":{\"219\":1}}],[\"之间的依赖注入\",{\"1\":{\"114\":1}}],[\"之后需要回表走聚簇索引\",{\"1\":{\"154\":1}}],[\"叶子节点存储的是聚簇索引的字段\",{\"1\":{\"154\":1}}],[\"二级索引\",{\"0\":{\"154\":1}}],[\"非聚簇索引\",{\"0\":{\"154\":1}}],[\"非懒加载\",{\"1\":{\"55\":1}}],[\"称之为聚簇索引\",{\"1\":{\"153\":1}}],[\"且数字不能开头\",{\"1\":{\"288\":1}}],[\"且不需要事务处理\",{\"1\":{\"161\":1}}],[\"且叶子节点保存所有行数据的索引\",{\"1\":{\"153\":1}}],[\"且阻塞队列仍然满\",{\"1\":{\"24\":1}}],[\"串行化\",{\"1\":{\"152\":1}}],[\"串行回收\",{\"1\":{\"34\":2}}],[\"读写速度快\",{\"1\":{\"176\":1,\"249\":1}}],[\"读已提交\",{\"1\":{\"152\":1}}],[\"读未提交\",{\"1\":{\"152\":1}}],[\"读取\",{\"1\":{\"66\":1}}],[\"读取meta\",{\"1\":{\"65\":2}}],[\"幻读\",{\"0\":{\"151\":1}}],[\"影响数据的完整性\",{\"1\":{\"151\":1}}],[\"影响数据的一致性\",{\"1\":{\"150\":1}}],[\"影响\",{\"1\":{\"149\":1,\"150\":1,\"151\":1}}],[\"脏读\",{\"0\":{\"149\":1}}],[\"显式转换\",{\"0\":{\"146\":1}}],[\"显示分离来组织代码\",{\"1\":{\"74\":1}}],[\"除了+以外的算术运算符\",{\"1\":{\"145\":1}}],[\"检测数据类型\",{\"0\":{\"143\":1}}],[\"检查定义了init\",{\"1\":{\"70\":1}}],[\"检查实现了initializingbean接口的\",{\"1\":{\"70\":1}}],[\"检查实现了aware接口的\",{\"1\":{\"70\":1}}],[\"引用拷贝\",{\"0\":{\"189\":1,\"190\":1}}],[\"引用数据类型\",{\"0\":{\"139\":1},\"1\":{\"207\":1}}],[\"引入\",{\"1\":{\"65\":2}}],[\"未赋值\",{\"1\":{\"137\":1}}],[\"未使用时不会删除\",{\"1\":{\"255\":1}}],[\"未使用\",{\"0\":{\"39\":1}}],[\"$组成\",{\"1\":{\"288\":1}}],[\"$\",{\"1\":{\"135\":1}}],[\"岸本齐史\",{\"1\":{\"134\":1,\"135\":1}}],[\"火影忍者\",{\"1\":{\"134\":1,\"135\":1}}],[\"神龟\",{\"1\":{\"134\":1}}],[\"忍者\",{\"1\":{\"134\":1}}],[\"字母严格区分大小写\",{\"1\":{\"288\":1}}],[\"字母\",{\"1\":{\"288\":1}}],[\"字典\",{\"1\":{\"244\":1}}],[\"字节时\",{\"1\":{\"258\":1,\"259\":1}}],[\"字节\",{\"1\":{\"214\":1}}],[\"字节流\",{\"1\":{\"214\":1}}],[\"字节流与字符流的区别\",{\"0\":{\"214\":1}}],[\"字符\",{\"1\":{\"214\":1}}],[\"字符流\",{\"1\":{\"214\":1}}],[\"字符串不加单引号\",{\"1\":{\"162\":1}}],[\"字符串拼接\",{\"0\":{\"134\":1}}],[\"字符串使用英文状态下的\",{\"1\":{\"133\":1}}],[\"字符串含义\",{\"0\":{\"133\":1}}],[\"字段表示连接类型\",{\"1\":{\"181\":1}}],[\"字段性能排序\",{\"0\":{\"181\":1}}],[\"字段和参数上使用\",{\"1\":{\"69\":1}}],[\"字段不会设置\",{\"1\":{\"32\":1}}],[\"负数\",{\"1\":{\"131\":1}}],[\"负责创建\",{\"1\":{\"115\":1}}],[\"整个redis功能都不能使用\",{\"1\":{\"246\":1}}],[\"整数\",{\"1\":{\"131\":1,\"244\":1}}],[\"整堆收集器\",{\"1\":{\"34\":1}}],[\"介绍\",{\"1\":{\"131\":1}}],[\"基于内存\",{\"1\":{\"249\":1}}],[\"基于事件驱动的编程方式\",{\"1\":{\"118\":1}}],[\"基本数据类型\",{\"0\":{\"130\":1,\"244\":1},\"1\":{\"207\":1}}],[\"结束本次循环\",{\"1\":{\"274\":1}}],[\"结束\",{\"1\":{\"127\":2}}],[\"四次挥手是终止一个\",{\"1\":{\"127\":1}}],[\"确认应答\",{\"1\":{\"126\":1,\"127\":2}}],[\"确保在消息处理成功后进行确认\",{\"1\":{\"226\":1}}],[\"确保消息能够被正确投递\",{\"1\":{\"226\":1}}],[\"确保消息被成功发送到消息队列\",{\"1\":{\"223\":1}}],[\"确保消费者在处理完消息后进行确认\",{\"1\":{\"226\":1}}],[\"确保交换机\",{\"1\":{\"225\":1}}],[\"确保结果集中的值是唯一的\",{\"1\":{\"182\":1}}],[\"确保对经常作为查询条件的列建立索引\",{\"1\":{\"172\":1}}],[\"确保事务的原子性\",{\"1\":{\"160\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"102\":1}}],[\"确保一个类只被加载一次\",{\"1\":{\"37\":1}}],[\"确保只有符合条件的配置类被加载\",{\"1\":{\"65\":1}}],[\"确保\",{\"1\":{\"32\":1,\"116\":1}}],[\"确保不会因线程重用而导致数据不一致的问题\",{\"1\":{\"25\":1}}],[\"段\",{\"1\":{\"127\":2}}],[\"段作为确认\",{\"1\":{\"127\":2}}],[\"段作为最后的确认\",{\"1\":{\"126\":1}}],[\"段作为响应\",{\"1\":{\"126\":1}}],[\"段到服务器\",{\"1\":{\"126\":1}}],[\"同包其他类\",{\"1\":{\"215\":3}}],[\"同样的一个方法能够根据输入数据的不同\",{\"1\":{\"201\":1}}],[\"同步到磁盘中防止数据丢失\",{\"1\":{\"249\":1}}],[\"同步写入\",{\"1\":{\"184\":1}}],[\"同步调用\",{\"0\":{\"184\":1}}],[\"同步序列编号和确认应答\",{\"1\":{\"126\":1}}],[\"同步序列编号\",{\"1\":{\"126\":1}}],[\"同时还有跳跃表\",{\"1\":{\"249\":1}}],[\"同时由于单线程\",{\"1\":{\"249\":1}}],[\"同时会定期持久化\",{\"1\":{\"249\":1}}],[\"同时避免过度索引\",{\"1\":{\"172\":1}}],[\"同时可能利用覆盖索引\",{\"1\":{\"172\":1}}],[\"同时准备好关闭连接\",{\"1\":{\"127\":1}}],[\"同时只能存在一个\",{\"1\":{\"24\":1,\"25\":1}}],[\"同意建立连接\",{\"1\":{\"126\":1}}],[\"三元运算符\",{\"0\":{\"269\":1}}],[\"三种常见消息队列的对比\",{\"1\":{\"221\":1}}],[\"三大消息队列区别\",{\"0\":{\"221\":1}}],[\"三次握手是建立一个可靠\",{\"1\":{\"126\":1}}],[\"三级缓存机制\",{\"0\":{\"81\":1}}],[\"关系运算符\",{\"1\":{\"235\":1}}],[\"关键字\",{\"0\":{\"210\":1}}],[\"关键字分析\",{\"1\":{\"180\":1}}],[\"关闭\",{\"1\":{\"124\":1}}],[\"关于\",{\"0\":{\"0\":1,\"2\":1}}],[\"文档\",{\"1\":{\"124\":1}}],[\"文件包含重建当前数据集所需的最少命令\",{\"1\":{\"262\":1}}],[\"文件来代替旧\",{\"1\":{\"262\":1}}],[\"文件后缀一般为rdb\",{\"1\":{\"254\":1}}],[\"文件进行配置\",{\"1\":{\"107\":1}}],[\"文件就能完成所有配置工作\",{\"1\":{\"107\":1}}],[\"文件中的自动配置类\",{\"1\":{\"66\":1}}],[\"文件中的字节流包含的信息符合当前虚拟机的要求\",{\"1\":{\"32\":1}}],[\"文件\",{\"1\":{\"57\":1,\"262\":1}}],[\"文件读写\",{\"1\":{\"13\":1}}],[\"地址是伪造的\",{\"1\":{\"280\":1}}],[\"地址\",{\"1\":{\"124\":1}}],[\"对分组后的结果进行进一步的筛选\",{\"1\":{\"182\":1}}],[\"对每个分组执行聚合操作\",{\"1\":{\"182\":1}}],[\"对每个记录检查子查询是否返回结果\",{\"1\":{\"165\":1}}],[\"对于来自前一个表的每个行组合\",{\"1\":{\"181\":1}}],[\"对于每个来自前一个表的行组合\",{\"1\":{\"181\":1}}],[\"对结果集中的每个值进行循环比对主查询表中对应字段\",{\"1\":{\"166\":1}}],[\"对外表进行循环\",{\"1\":{\"165\":1}}],[\"对索引列进行函数操作\",{\"1\":{\"162\":1}}],[\"对应的\",{\"1\":{\"124\":1}}],[\"对象都只有一个唯一的实例\",{\"1\":{\"219\":1}}],[\"对象使用了一个叫做\",{\"1\":{\"219\":1}}],[\"对象的自动装箱和\",{\"0\":{\"219\":1}}],[\"对象会拦截方法\",{\"1\":{\"99\":1}}],[\"对象或代理对象\",{\"1\":{\"81\":1}}],[\"对象执行初始化方法前后被触发\",{\"1\":{\"55\":1}}],[\"对象\",{\"1\":{\"22\":1,\"55\":1,\"122\":1,\"219\":1}}],[\"缓存\",{\"1\":{\"124\":1}}],[\"到\",{\"1\":{\"219\":1}}],[\"到页面展示的过程\",{\"0\":{\"124\":1}}],[\"到监听器\",{\"1\":{\"55\":1}}],[\"从数据库读取键现在的值\",{\"1\":{\"262\":1}}],[\"从节点同步数据\",{\"1\":{\"246\":1}}],[\"从该表中读取多行\",{\"1\":{\"181\":1}}],[\"从该表中读取一行\",{\"1\":{\"181\":1}}],[\"从输入\",{\"0\":{\"124\":1}}],[\"从而保证了数据的一致性\",{\"1\":{\"173\":1}}],[\"从而解决了循环依赖的问题\",{\"1\":{\"82\":1}}],[\"从而避免循环依赖\",{\"1\":{\"80\":1}}],[\"从而导致\",{\"1\":{\"12\":2}}],[\"渲染响应\",{\"1\":{\"122\":1}}],[\"捕获数据变更事件\",{\"1\":{\"186\":1}}],[\"捕获\",{\"1\":{\"122\":1}}],[\"适合小规模数据恢复\",{\"1\":{\"254\":1}}],[\"适合操作文本文件时使用\",{\"1\":{\"214\":1}}],[\"适合操作文本文件之外的文件\",{\"1\":{\"214\":1}}],[\"适配器模式\",{\"0\":{\"121\":1}}],[\"适用范围\",{\"1\":{\"256\":1}}],[\"适用于所有键\",{\"1\":{\"256\":3}}],[\"适用于记录不固定数据\",{\"1\":{\"206\":1}}],[\"适用于记录固定表单数据\",{\"1\":{\"206\":1}}],[\"适用于需要直接返回数据而不是视图的\",{\"1\":{\"62\":1}}],[\"适用于构建和管理微服务架构\",{\"1\":{\"59\":1}}],[\"适用于构建\",{\"1\":{\"58\":1}}],[\"适用于构建独立的\",{\"1\":{\"57\":1}}],[\"适用于\",{\"1\":{\"34\":1}}],[\"适用于后台运算\",{\"1\":{\"34\":2}}],[\"适用于单核\",{\"1\":{\"34\":2}}],[\"适用于生产者与消费者速度相匹配的场景\",{\"1\":{\"17\":1}}],[\"适用于任务直接提交给线程而不进行排队的场景\",{\"1\":{\"17\":1}}],[\"适用于任务量较大的场景\",{\"1\":{\"16\":1}}],[\"适用于固定数量任务的排队处理\",{\"1\":{\"15\":1}}],[\"适用场景\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"34\":1}}],[\"策略接口等\",{\"1\":{\"119\":1}}],[\"策略模式\",{\"0\":{\"119\":1}}],[\"充当工厂类\",{\"1\":{\"115\":1}}],[\"管理\",{\"1\":{\"114\":1}}],[\"管理的组件\",{\"1\":{\"68\":1}}],[\"组件监听\",{\"1\":{\"186\":1}}],[\"组件\",{\"1\":{\"112\":1}}],[\"组合注解\",{\"1\":{\"109\":1}}],[\"扫描\",{\"1\":{\"111\":1}}],[\"像容器中导入一个\",{\"1\":{\"111\":1}}],[\"表达式计算出一个值\",{\"1\":{\"264\":1}}],[\"表达式是一组代码的集合\",{\"1\":{\"264\":1}}],[\"表达式和语句区别\",{\"1\":{\"264\":1}}],[\"表达式和语句\",{\"0\":{\"264\":1}}],[\"表\",{\"1\":{\"258\":1,\"260\":1}}],[\"表最多有一个匹配行\",{\"1\":{\"181\":1}}],[\"表只有一行\",{\"1\":{\"181\":1}}],[\"表锁级别\",{\"1\":{\"174\":1}}],[\"表结构仍然存在\",{\"1\":{\"163\":2}}],[\"表示它已经准备好关闭连接\",{\"1\":{\"127\":1}}],[\"表示客户端已经发送完所有数据\",{\"1\":{\"127\":1}}],[\"表明这是一个\",{\"1\":{\"109\":1}}],[\"表单验证\",{\"1\":{\"44\":1}}],[\"yml\",{\"1\":{\"107\":1}}],[\"依赖冲突\",{\"1\":{\"107\":2}}],[\"依赖于\",{\"1\":{\"59\":1}}],[\"解耦\",{\"1\":{\"185\":1}}],[\"解决方案\",{\"1\":{\"223\":1,\"224\":1,\"225\":1,\"226\":1}}],[\"解决\",{\"1\":{\"107\":1}}],[\"解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程\",{\"1\":{\"32\":1}}],[\"解析\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"55\":1,\"74\":1,\"124\":1}}],[\"减少恶意流量\",{\"1\":{\"281\":1}}],[\"减少了线程之间的切换开销\",{\"1\":{\"253\":1}}],[\"减少了系统的耦合度\",{\"1\":{\"186\":1}}],[\"减少了内存泄漏的风险\",{\"1\":{\"26\":1}}],[\"减少回表次数\",{\"0\":{\"155\":1}}],[\"减少\",{\"1\":{\"107\":1}}],[\"优先淘汰剩余生存时间最短的键\",{\"1\":{\"256\":1}}],[\"优先淘汰使用频率最低的键\",{\"1\":{\"256\":2}}],[\"优先淘汰最近最少使用的键\",{\"1\":{\"256\":2}}],[\"优先级\",{\"1\":{\"235\":1}}],[\"优先级队列\",{\"1\":{\"221\":1}}],[\"优化策略\",{\"1\":{\"172\":1}}],[\"优化建议\",{\"0\":{\"172\":1}}],[\"优点\",{\"0\":{\"107\":1},\"1\":{\"184\":1,\"185\":1,\"186\":1,\"254\":2}}],[\"优势\",{\"1\":{\"17\":1,\"73\":1}}],[\"事件监听器就是观察者模式的应用\",{\"1\":{\"105\":1}}],[\"事务是数据库管理系统中的一个核心概念\",{\"1\":{\"173\":1}}],[\"事务\",{\"0\":{\"173\":1}}],[\"事务支持\",{\"0\":{\"157\":1},\"1\":{\"223\":1}}],[\"事务传播是指一个事务调用另一个事务时\",{\"1\":{\"98\":1}}],[\"事务管理\",{\"0\":{\"96\":1}}],[\"所有键\",{\"1\":{\"256\":4}}],[\"所有节点同一时间看到的都是一样的\",{\"1\":{\"247\":1}}],[\"所有依赖包都在一个\",{\"1\":{\"107\":1}}],[\"所有依赖于它的对象都得到通知并被自动更新\",{\"1\":{\"105\":1,\"118\":1}}],[\"所以比stringbuilder性能差\",{\"1\":{\"196\":1}}],[\"所以是线程安全的\",{\"1\":{\"195\":1}}],[\"所以是安全的\",{\"1\":{\"195\":1}}],[\"所以跟据id数据查询时可以走聚簇索引\",{\"1\":{\"153\":1}}],[\"所以结束符可写可不写\",{\"1\":{\"50\":1}}],[\"观察者模式\",{\"0\":{\"105\":1,\"118\":1}}],[\"模型\",{\"1\":{\"250\":1,\"251\":1,\"252\":1}}],[\"模型决定了程序如何处理输入和输出操作\",{\"1\":{\"250\":1}}],[\"模板字符串\",{\"0\":{\"135\":1}}],[\"模板方法模式\",{\"0\":{\"117\":1}}],[\"模板\",{\"1\":{\"104\":1}}],[\"模板模式\",{\"0\":{\"104\":1}}],[\"模式下与\",{\"1\":{\"34\":1}}],[\"模式\",{\"0\":{\"114\":1},\"1\":{\"34\":2}}],[\"面向切面编程\",{\"1\":{\"103\":1,\"120\":1}}],[\"面向服务端的应用\",{\"1\":{\"34\":1}}],[\"抛异常\",{\"1\":{\"98\":1}}],[\"他是存储mysql里面数据的基本结构\",{\"1\":{\"153\":1}}],[\"他分7种\",{\"1\":{\"98\":1}}],[\"他将向下在加载器对应路径查找\",{\"1\":{\"36\":1}}],[\"产生传播行为\",{\"1\":{\"98\":1}}],[\"让事务在遇到非运行时异常时也回滚\",{\"1\":{\"97\":1}}],[\"让一个线程强制获取资源\",{\"1\":{\"27\":1}}],[\"来存储数据\",{\"1\":{\"261\":1}}],[\"来存储\",{\"1\":{\"258\":2,\"259\":2,\"260\":2}}],[\"来实现数据的冗余和备份\",{\"1\":{\"246\":1}}],[\"来实现\",{\"1\":{\"226\":1}}],[\"来设置消息的持久化\",{\"1\":{\"225\":1}}],[\"来渲染页面\",{\"1\":{\"124\":1}}],[\"来解析视图名称\",{\"1\":{\"122\":1}}],[\"来确定请求应该由哪个控制器\",{\"1\":{\"122\":1}}],[\"来指定主键的生成策略\",{\"1\":{\"94\":1}}],[\"来管理一个超时未响应的连接队列\",{\"1\":{\"18\":1}}],[\"状态时\",{\"1\":{\"87\":1}}],[\"唯一\",{\"1\":{\"84\":1}}],[\"描述\",{\"1\":{\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"256\":1}}],[\"调用的过程\",{\"1\":{\"252\":1}}],[\"调用\",{\"1\":{\"252\":3}}],[\"调用后\",{\"1\":{\"251\":1}}],[\"调用匹配的控制器方法\",{\"1\":{\"122\":1}}],[\"调用控制器\",{\"1\":{\"122\":1}}],[\"调用者\",{\"1\":{\"98\":1}}],[\"调用objectfactory的\",{\"1\":{\"82\":1}}],[\"调用handleradapter适配器执行handler\",{\"1\":{\"74\":1}}],[\"生成新的\",{\"1\":{\"262\":1}}],[\"生效\",{\"1\":{\"81\":1}}],[\"生产级别的\",{\"1\":{\"57\":1}}],[\"切面代理\",{\"1\":{\"81\":1}}],[\"第二种b在运行时不需要事务\",{\"1\":{\"98\":1}}],[\"第二级缓存\",{\"1\":{\"81\":1}}],[\"第一种b在运行时需要事务\",{\"1\":{\"98\":1}}],[\"第一级缓存\",{\"1\":{\"81\":1}}],[\"第三级缓存\",{\"1\":{\"81\":1}}],[\"保护源服务器\",{\"1\":{\"281\":1}}],[\"保存尚未经过完整生命周期的\",{\"1\":{\"81\":1}}],[\"保存已经经过完整生命周期的\",{\"1\":{\"81\":1}}],[\"保证服务一直可用\",{\"1\":{\"247\":1}}],[\"保证\",{\"1\":{\"37\":1}}],[\"导致服务器产生大量半连接状态的\",{\"1\":{\"280\":1}}],[\"导致数据库无法使用任何索引\",{\"1\":{\"172\":1}}],[\"导致数据错乱\",{\"1\":{\"25\":1}}],[\"导致无法完成初始化\",{\"1\":{\"79\":1}}],[\"相当于一个空间\",{\"1\":{\"282\":1}}],[\"相关信息\",{\"1\":{\"236\":1}}],[\"相等运算符\",{\"1\":{\"235\":1}}],[\"相互引用\",{\"1\":{\"79\":1}}],[\"相同方法\",{\"1\":{\"35\":1}}],[\"示例\",{\"0\":{\"78\":1}}],[\"等用到key的时候\",{\"1\":{\"255\":1}}],[\"等内核把数据准备好了\",{\"1\":{\"252\":1}}],[\"等待数据从内核空间拷贝到用户空间的这段时间里\",{\"1\":{\"252\":1}}],[\"等同于\",{\"1\":{\"170\":1}}],[\"等都会把数据转成数字类型\",{\"1\":{\"145\":1}}],[\"等\",{\"1\":{\"76\":1,\"112\":1,\"121\":1,\"122\":1,\"182\":1}}],[\"等服务器\",{\"1\":{\"57\":1,\"107\":1}}],[\"统一异常处理是一种常见的需求\",{\"1\":{\"75\":1}}],[\"统一异常处理\",{\"0\":{\"75\":1}}],[\"浏览器接收到响应后\",{\"1\":{\"124\":1}}],[\"浏览器渲染页面\",{\"1\":{\"124\":1}}],[\"浏览器会构建一个\",{\"1\":{\"124\":1}}],[\"浏览器与服务器建立\",{\"1\":{\"124\":1}}],[\"浏览器首先检查本地\",{\"1\":{\"124\":1}}],[\"浏览器\",{\"1\":{\"74\":1}}],[\"包含\",{\"1\":{\"219\":1}}],[\"包含了\",{\"1\":{\"109\":1}}],[\"包含了数据模型以及相应的视图信息\",{\"1\":{\"74\":1}}],[\"包中\",{\"1\":{\"107\":1}}],[\"包就可以执行\",{\"1\":{\"107\":1}}],[\"包\",{\"1\":{\"107\":1}}],[\"包括这个对象所包含的内部对象\",{\"1\":{\"191\":1}}],[\"包括状态码\",{\"1\":{\"124\":1}}],[\"包括\",{\"1\":{\"55\":1,\"122\":1}}],[\"包括dom和bom\",{\"1\":{\"45\":1}}],[\"包括任务统计\",{\"1\":{\"20\":1}}],[\"返回客户端\",{\"1\":{\"122\":1}}],[\"返回视图\",{\"1\":{\"122\":1}}],[\"返回响应\",{\"1\":{\"74\":1}}],[\"返回的数据对象\",{\"1\":{\"74\":1}}],[\"返回一个modelandview对象给dispatcherservlet\",{\"1\":{\"74\":1}}],[\"返回\",{\"1\":{\"74\":1}}],[\"返回类型\",{\"1\":{\"62\":1,\"63\":1}}],[\"执行顺序\",{\"0\":{\"182\":1}}],[\"执行计划\",{\"0\":{\"180\":1}}],[\"执行速度更快\",{\"1\":{\"172\":1}}],[\"执行mappedstatement\",{\"1\":{\"99\":1}}],[\"执行\",{\"1\":{\"74\":1}}],[\"执行配置\",{\"1\":{\"66\":1}}],[\"匹配查找能处理请求的handler\",{\"1\":{\"74\":1}}],[\"匹配\",{\"1\":{\"74\":1}}],[\"hykari对sharingspares比druid更适配\",{\"1\":{\"277\":1}}],[\"hyperloglog\",{\"1\":{\"261\":1}}],[\"hello\",{\"1\":{\"238\":1,\"241\":1}}],[\"having\",{\"1\":{\"182\":1}}],[\"hash\",{\"0\":{\"258\":1},\"1\":{\"166\":1,\"248\":1,\"258\":2,\"260\":1}}],[\"handlecustomexception\",{\"1\":{\"78\":1}}],[\"handleexception\",{\"1\":{\"78\":1}}],[\"handler\",{\"1\":{\"78\":1}}],[\"handler完成对用户请求的处理后\",{\"1\":{\"74\":1}}],[\"handleradapter\",{\"1\":{\"74\":1}}],[\"handlermapping\",{\"1\":{\"74\":2,\"122\":1}}],[\"html\",{\"1\":{\"122\":2,\"124\":2}}],[\"httpstatus\",{\"1\":{\"78\":2}}],[\"http\",{\"1\":{\"61\":1,\"63\":1,\"64\":1,\"74\":1,\"86\":3,\"87\":2,\"122\":1,\"124\":7}}],[\"拦截\",{\"1\":{\"74\":1}}],[\"发送方确认模式\",{\"1\":{\"223\":1}}],[\"发送最后一个\",{\"1\":{\"127\":1}}],[\"发送一个带有\",{\"1\":{\"126\":1}}],[\"发送一个\",{\"1\":{\"122\":1,\"127\":1}}],[\"发送请求\",{\"1\":{\"122\":1}}],[\"发送\",{\"1\":{\"74\":1,\"124\":2}}],[\"发生死锁时\",{\"1\":{\"27\":1}}],[\"简写\",{\"1\":{\"229\":1}}],[\"简介\",{\"0\":{\"106\":1,\"278\":1}}],[\"简称\",{\"1\":{\"74\":1}}],[\"简化了\",{\"1\":{\"57\":1}}],[\"更新变量\",{\"0\":{\"285\":1},\"1\":{\"285\":1}}],[\"更省空间\",{\"1\":{\"205\":1}}],[\"更快\",{\"1\":{\"171\":1}}],[\"更高效\",{\"1\":{\"170\":1}}],[\"更容易保证线程安全\",{\"1\":{\"73\":1}}],[\"更早进行初始化\",{\"1\":{\"41\":1}}],[\"就像它是类自己的方法一样\",{\"1\":{\"211\":1}}],[\"就直接返回该引用\",{\"1\":{\"209\":1}}],[\"就能拥有\",{\"1\":{\"107\":1}}],[\"就是模板模式的体现\",{\"1\":{\"104\":1}}],[\"就用到了工厂模式\",{\"1\":{\"101\":1}}],[\"就可能引发线程安全问题\",{\"1\":{\"72\":1}}],[\"就会导致内存泄漏\",{\"1\":{\"22\":1}}],[\"问题\",{\"1\":{\"72\":1}}],[\"有序数组\",{\"1\":{\"260\":1}}],[\"有括号先算括号内的\",{\"1\":{\"228\":1}}],[\"有抛异常\",{\"1\":{\"98\":1}}],[\"有挂起\",{\"1\":{\"98\":1}}],[\"有融入\",{\"1\":{\"98\":1}}],[\"有状态\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"有些对象已经不再使用了\",{\"1\":{\"22\":1}}],[\"则继续执行前面的语句\",{\"1\":{\"165\":1}}],[\"则调用该方法进行销毁\",{\"1\":{\"70\":1}}],[\"则根据不同的拒绝策略进行处理\",{\"1\":{\"24\":1}}],[\"销毁前处理\",{\"1\":{\"70\":1}}],[\"username\",{\"1\":{\"286\":1}}],[\"usage\",{\"1\":{\"70\":1}}],[\"upper\",{\"1\":{\"162\":1}}],[\"union\",{\"1\":{\"172\":6}}],[\"uncommitted\",{\"1\":{\"152\":1}}],[\"undefined\",{\"0\":{\"137\":1},\"1\":{\"233\":1}}],[\"undertow\",{\"1\":{\"107\":1}}],[\"url\",{\"0\":{\"124\":1},\"1\":{\"74\":1,\"124\":3}}],[\"util\",{\"1\":{\"5\":1}}],[\"属性来实现队列的持久化\",{\"1\":{\"225\":1}}],[\"属性赋值\",{\"1\":{\"70\":1}}],[\"属于类本身\",{\"1\":{\"40\":1}}],[\"根据一个或多个列对结果集进行排序\",{\"1\":{\"182\":1}}],[\"根据特定条件筛选数据\",{\"1\":{\"182\":1}}],[\"根据id构建\",{\"1\":{\"153\":1}}],[\"根据\",{\"1\":{\"74\":1}}],[\"根据名称进行匹配\",{\"1\":{\"69\":1}}],[\"根据类型进行匹配\",{\"1\":{\"69\":1}}],[\"自带\",{\"1\":{\"278\":1}}],[\"自身包含150+个高质量的第三方软件包\",{\"1\":{\"278\":1}}],[\"自动处理字符编码和解码\",{\"1\":{\"214\":1}}],[\"自动拆装箱\",{\"0\":{\"197\":1}}],[\"自动装配\",{\"1\":{\"107\":1}}],[\"自动依赖管理\",{\"1\":{\"107\":1}}],[\"自动配置类的工作原理\",{\"1\":{\"65\":1}}],[\"自动配置类\",{\"0\":{\"65\":1}}],[\"自定义性更强\",{\"1\":{\"68\":1}}],[\"标志来实现\",{\"1\":{\"223\":1}}],[\"标志的\",{\"1\":{\"126\":3,\"127\":2}}],[\"标识符\",{\"1\":{\"283\":1}}],[\"标识扫描路径\",{\"1\":{\"112\":1}}],[\"标识这是一个\",{\"1\":{\"110\":1}}],[\"标识该类为一个\",{\"1\":{\"68\":1}}],[\"标记\",{\"1\":{\"34\":4}}],[\"符合条件的配置类被执行\",{\"1\":{\"66\":1}}],[\"符号\",{\"1\":{\"48\":1,\"49\":1,\"232\":1,\"233\":1}}],[\"启动应用\",{\"1\":{\"66\":1}}],[\"启迪他人思想火花\",{\"1\":{\"3\":1}}],[\"工作原理\",{\"0\":{\"74\":1}}],[\"工作流程总结\",{\"0\":{\"66\":1}}],[\"工厂模式用于创建对象\",{\"1\":{\"101\":1}}],[\"工厂模式\",{\"0\":{\"101\":1,\"115\":1}}],[\"工厂\",{\"1\":{\"55\":1}}],[\"注释\",{\"0\":{\"240\":1,\"241\":1}}],[\"注解注解实现\",{\"1\":{\"114\":1}}],[\"注解指定主键生成策略\",{\"1\":{\"94\":1}}],[\"注解指定该方法处理哪种异常\",{\"1\":{\"77\":1}}],[\"注解后\",{\"1\":{\"93\":1}}],[\"注解声明不需要与数据库映射的字段\",{\"1\":{\"95\":1}}],[\"注解声明一个字段为主键\",{\"1\":{\"93\":1}}],[\"注解声明一个类对应一个数据库实体\",{\"1\":{\"92\":1}}],[\"注解声明异常处理方法\",{\"1\":{\"90\":1}}],[\"注解用于声明事务管理\",{\"1\":{\"97\":1}}],[\"注解用于声明一个由\",{\"1\":{\"70\":1}}],[\"注解用于定义全局异常处理类\",{\"1\":{\"89\":1}}],[\"注解作用于方法\",{\"1\":{\"68\":1}}],[\"注解作用于类\",{\"1\":{\"68\":1}}],[\"注解概览\",{\"0\":{\"67\":1}}],[\"注解进行条件判断\",{\"1\":{\"66\":1}}],[\"注解\",{\"1\":{\"65\":1,\"67\":1}}],[\"注意区分\",{\"1\":{\"42\":1}}],[\"该文件中列出了所有自动配置类\",{\"1\":{\"65\":1}}],[\"该扩展接口的方法在\",{\"1\":{\"55\":1}}],[\"其他包\",{\"1\":{\"215\":1}}],[\"其他\",{\"1\":{\"213\":1}}],[\"其他线程不能同时写入该表\",{\"1\":{\"158\":1}}],[\"其他事务插入或删除了数据\",{\"1\":{\"151\":1}}],[\"其他事务对数据进行了修改\",{\"1\":{\"150\":1}}],[\"其工作原理时jdk动态代理\",{\"1\":{\"99\":1}}],[\"其核心思想是通过将业务逻辑\",{\"1\":{\"74\":1}}],[\"其目的是使自动配置类最后执行\",{\"1\":{\"65\":1}}],[\"其关联的数据值也会一直存在\",{\"1\":{\"23\":1}}],[\"以消耗其资源并导致服务不可用的网络攻击\",{\"1\":{\"279\":1}}],[\"以及通过\",{\"1\":{\"225\":1}}],[\"以及如何通过\",{\"1\":{\"182\":1}}],[\"以便在路由失败时及时得到通知\",{\"1\":{\"224\":1}}],[\"以便记录执行时间超过指定阈值的查询\",{\"1\":{\"178\":1}}],[\"以了解查询的执行过程和性能瓶颈\",{\"1\":{\"180\":1}}],[\"以提高插入效率\",{\"1\":{\"172\":1}}],[\"以提高查询效率\",{\"1\":{\"172\":1}}],[\"以免影响数据更新性能\",{\"1\":{\"172\":1}}],[\"以\",{\"1\":{\"162\":1}}],[\"以初始化序列号\",{\"1\":{\"126\":1}}],[\"以确定哪些文件描述符已经准备好进行\",{\"1\":{\"253\":1}}],[\"以确定\",{\"1\":{\"124\":1}}],[\"以下一系列步骤会发生\",{\"1\":{\"124\":1}}],[\"以下是消息在不同阶段可能丢失的原因以及相应的解决方案\",{\"1\":{\"222\":1}}],[\"以下是kafka\",{\"1\":{\"221\":1}}],[\"以下是几个核心注解\",{\"1\":{\"108\":1}}],[\"以下是几种常见的作用域\",{\"1\":{\"83\":1}}],[\"以下是一些有效的\",{\"1\":{\"172\":1}}],[\"以下是一些核心的设计模式及其应用\",{\"1\":{\"113\":1}}],[\"以下是一些主要的设计模式及其在\",{\"1\":{\"100\":1}}],[\"以下是一些常用的注解及其说明\",{\"1\":{\"67\":1}}],[\"以下是\",{\"1\":{\"65\":1,\"70\":1,\"163\":1,\"182\":1}}],[\"以避免潜在的数据泄露风险\",{\"1\":{\"25\":1}}],[\"它允许一个线程监视多个文件描述符\",{\"1\":{\"253\":1}}],[\"它缓存了数值在\",{\"1\":{\"219\":1}}],[\"它确保了对数据库进行的一系列操作要么全部成功\",{\"1\":{\"173\":1}}],[\"它只关注子查询是否返回数据\",{\"1\":{\"165\":1}}],[\"它包括以下步骤\",{\"1\":{\"126\":1,\"127\":1}}],[\"它会向\",{\"1\":{\"124\":1}}],[\"它是\",{\"1\":{\"122\":1}}],[\"它定义了数据库操作的通用步骤\",{\"1\":{\"104\":1}}],[\"它可以让计算机变得有记忆\",{\"1\":{\"282\":1}}],[\"它可以捕获控制器层抛出的异常\",{\"1\":{\"89\":1}}],[\"它可以指定所要应用的组件\",{\"1\":{\"76\":1}}],[\"它有助于集中管理和响应应用程序中的各种异常\",{\"1\":{\"75\":1}}],[\"它负责自动配置\",{\"1\":{\"65\":1}}],[\"它简化了基于\",{\"1\":{\"106\":1}}],[\"它简化了\",{\"1\":{\"65\":1}}],[\"它们在处理并发请求时有不同的行为和性能特点\",{\"1\":{\"250\":1}}],[\"它们在功能和性能上有所差异\",{\"1\":{\"164\":1}}],[\"它们在事务支持\",{\"1\":{\"156\":1}}],[\"它们会比未使用\",{\"1\":{\"41\":1}}],[\"它们与类的实例化无关\",{\"1\":{\"40\":1}}],[\"它们之间存在一些关键的差异\",{\"1\":{\"38\":1}}],[\"响应头部和正文\",{\"1\":{\"124\":1}}],[\"响应\",{\"1\":{\"124\":2}}],[\"响应体中\",{\"1\":{\"64\":1}}],[\"响应速度优先\",{\"1\":{\"34\":5}}],[\"格式\",{\"1\":{\"64\":1}}],[\"格式的数据\",{\"1\":{\"62\":1}}],[\"即从哪些表中获取数据\",{\"1\":{\"182\":1}}],[\"即使子查询返回\",{\"1\":{\"165\":1}}],[\"即当一个线程读取一个表时\",{\"1\":{\"158\":1}}],[\"即无需回表查\",{\"1\":{\"155\":1}}],[\"即所请求的页面内容\",{\"1\":{\"124\":1}}],[\"即\",{\"1\":{\"115\":1}}],[\"即controller\",{\"1\":{\"74\":1}}],[\"即模型数据和视图的组合\",{\"1\":{\"63\":1}}],[\"即键虽然被回收了\",{\"1\":{\"22\":1}}],[\"处理或不处理都可以\",{\"1\":{\"213\":1}}],[\"处理每个\",{\"1\":{\"86\":1}}],[\"处理循环依赖\",{\"0\":{\"82\":1}}],[\"处理\",{\"1\":{\"63\":1,\"122\":1}}],[\"接口中可以包含方法体\",{\"1\":{\"217\":1}}],[\"接口知识\",{\"0\":{\"216\":1}}],[\"接口和\",{\"1\":{\"70\":1}}],[\"接口检查\",{\"1\":{\"70\":1}}],[\"接口\",{\"1\":{\"62\":1,\"70\":1}}],[\"xml\",{\"1\":{\"62\":1,\"64\":1,\"107\":2}}],[\"或者\",{\"1\":{\"232\":1}}],[\"或者其成员变量不会影响其业务逻辑的对象\",{\"1\":{\"73\":1}}],[\"或\",{\"1\":{\"62\":1,\"64\":1,\"107\":1,\"133\":1,\"162\":2,\"167\":1,\"226\":1,\"253\":1,\"261\":1}}],[\"请输入你的名字\",{\"1\":{\"239\":1}}],[\"请输入你的姓名\",{\"1\":{\"53\":1}}],[\"请输入一个属\",{\"1\":{\"234\":1}}],[\"请求关闭连接\",{\"1\":{\"127\":1}}],[\"请求并发送给服务器\",{\"1\":{\"124\":1}}],[\"请求并返回响应\",{\"1\":{\"63\":1}}],[\"请求映射\",{\"1\":{\"122\":1}}],[\"请求被\",{\"1\":{\"122\":1}}],[\"请求处理\",{\"1\":{\"122\":1}}],[\"请求处理流程\",{\"0\":{\"122\":1}}],[\"请求到服务器\",{\"1\":{\"122\":1}}],[\"请求所需的临时数据\",{\"1\":{\"86\":1}}],[\"请求结束后\",{\"1\":{\"86\":1}}],[\"请求相同\",{\"1\":{\"86\":1}}],[\"请求都会产生一个新的\",{\"1\":{\"86\":1}}],[\"请求\",{\"1\":{\"61\":1,\"74\":1,\"124\":1,\"280\":2}}],[\"都会把另外一个转成字符串\",{\"1\":{\"145\":1}}],[\"都用于处理\",{\"1\":{\"61\":1}}],[\"都是用来检查子查询中是否存在记录的条件\",{\"1\":{\"168\":1}}],[\"都是\",{\"1\":{\"56\":1}}],[\"本质上就是在使用\",{\"1\":{\"60\":1}}],[\"功能就是基于代理模式实现的\",{\"1\":{\"103\":1}}],[\"功能\",{\"1\":{\"60\":1,\"107\":1}}],[\"层的框架\",{\"1\":{\"60\":1}}],[\"作用\",{\"1\":{\"64\":1}}],[\"作用域的\",{\"1\":{\"84\":1}}],[\"作用域\",{\"0\":{\"83\":1},\"1\":{\"34\":1}}],[\"作为\",{\"1\":{\"60\":1}}],[\"利用\",{\"1\":{\"59\":1}}],[\"智能路由等\",{\"1\":{\"59\":1}}],[\"断路器\",{\"1\":{\"59\":1}}],[\"配置类\",{\"1\":{\"110\":1}}],[\"配置文件类型\",{\"1\":{\"107\":1}}],[\"配置过程无需\",{\"1\":{\"107\":1}}],[\"配置\",{\"1\":{\"107\":2}}],[\"配置管理\",{\"1\":{\"59\":1}}],[\"配合使用\",{\"1\":{\"34\":1}}],[\"服务器也发送一个带有\",{\"1\":{\"127\":1}}],[\"服务器收到\",{\"1\":{\"126\":1,\"127\":1}}],[\"服务器处理完请求后\",{\"1\":{\"124\":1}}],[\"服务器处理请求\",{\"1\":{\"124\":1}}],[\"服务器接收到请求后\",{\"1\":{\"124\":1}}],[\"服务器查询\",{\"1\":{\"124\":1}}],[\"服务\",{\"1\":{\"58\":1,\"62\":1}}],[\"支持在各个操作系统上安装\",{\"1\":{\"278\":1}}],[\"支持在构造函数\",{\"1\":{\"69\":1}}],[\"支持事务\",{\"1\":{\"221\":1}}],[\"支持事务和外键\",{\"1\":{\"175\":1}}],[\"支持事务处理\",{\"1\":{\"157\":1}}],[\"支持回滚\",{\"1\":{\"163\":1}}],[\"支持外键约束\",{\"1\":{\"159\":1}}],[\"支持行级锁定\",{\"1\":{\"158\":1}}],[\"支持以及性能方面各有特点\",{\"1\":{\"156\":1}}],[\"支持\",{\"0\":{\"160\":1},\"1\":{\"58\":1,\"221\":2}}],[\"支持有界\",{\"1\":{\"18\":1}}],[\"架构的支持\",{\"1\":{\"58\":1}}],[\"控制访问权限\",{\"1\":{\"281\":1}}],[\"控制反转\",{\"0\":{\"114\":1}}],[\"控制器返回一个视图名称\",{\"1\":{\"122\":1}}],[\"控制器执行业务逻辑\",{\"1\":{\"122\":1}}],[\"控制器\",{\"1\":{\"58\":1,\"74\":2}}],[\"控制台输出内容\",{\"1\":{\"52\":1}}],[\"视图模板\",{\"1\":{\"122\":1}}],[\"视图解析\",{\"1\":{\"122\":1}}],[\"视图渲染\",{\"1\":{\"74\":2}}],[\"视图\",{\"1\":{\"58\":1,\"74\":1}}],[\"专注于构建\",{\"1\":{\"58\":1}}],[\"框架处理客户端请求的流程如下\",{\"1\":{\"122\":1}}],[\"框架广泛地应用了多种设计模式\",{\"1\":{\"100\":1}}],[\"框架通过使用三级缓存机制来处理循环依赖\",{\"1\":{\"79\":1}}],[\"框架\",{\"1\":{\"74\":1}}],[\"框架中广泛使用了多种设计模式\",{\"1\":{\"113\":1}}],[\"框架中的设计模式\",{\"0\":{\"100\":1}}],[\"框架中的一个模块\",{\"1\":{\"58\":1}}],[\"框架中\",{\"1\":{\"61\":1,\"67\":1,\"70\":1,\"71\":1,\"79\":1,\"83\":1,\"88\":1}}],[\"框架集成的应用\",{\"1\":{\"58\":1}}],[\"框架的其他模块无缝集成\",{\"1\":{\"58\":1}}],[\"框架的快速开发框架\",{\"1\":{\"57\":1,\"106\":1}}],[\"用户变量的值将被优先使用\",{\"1\":{\"276\":1}}],[\"用户空间\",{\"1\":{\"252\":1}}],[\"用户线程再发起\",{\"1\":{\"252\":1}}],[\"用到\",{\"1\":{\"103\":1}}],[\"用于管理\",{\"1\":{\"277\":1}}],[\"用于运行\",{\"1\":{\"277\":1}}],[\"用于创建没有名称的类的实例\",{\"1\":{\"218\":1}}],[\"用于扫描并注册\",{\"1\":{\"112\":1}}],[\"用于实体映射和操作\",{\"1\":{\"91\":1}}],[\"用于指定哪些异常将由特定的处理方法来处理\",{\"1\":{\"90\":1}}],[\"用于处理特定的异常类型\",{\"1\":{\"77\":1}}],[\"用于定义全局异常处理\",{\"1\":{\"76\":1}}],[\"用于显式地声明一个\",{\"1\":{\"68\":1}}],[\"用途\",{\"1\":{\"57\":1,\"58\":1,\"59\":1}}],[\"用调用者所在的线程来执行任务\",{\"1\":{\"19\":1}}],[\"无法恢复的错误\",{\"1\":{\"213\":1}}],[\"无法正确地存储和检索数据\",{\"1\":{\"23\":1}}],[\"无论内表还是外表\",{\"1\":{\"169\":1}}],[\"无\",{\"1\":{\"107\":1}}],[\"无状态\",{\"0\":{\"73\":1},\"1\":{\"73\":2}}],[\"无需部署\",{\"1\":{\"57\":1}}],[\"定期删除\",{\"1\":{\"255\":1}}],[\"定时删除\",{\"1\":{\"255\":1}}],[\"定时线程池\",{\"0\":{\"12\":1}}],[\"定义消费者确认方法\",{\"1\":{\"226\":1}}],[\"定义对象间的一种一对多的依赖关系\",{\"1\":{\"105\":1,\"118\":1}}],[\"定义一个操作中的算法骨架\",{\"1\":{\"104\":1,\"117\":1}}],[\"定义了\",{\"1\":{\"83\":1}}],[\"定义了destroy\",{\"1\":{\"70\":1}}],[\"定义\",{\"1\":{\"57\":1,\"58\":1,\"59\":1,\"72\":1,\"73\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"家族中的重要成员\",{\"1\":{\"56\":1}}],[\"与大模型有关的python代码\",{\"1\":{\"236\":1}}],[\"与\",{\"0\":{\"56\":1,\"60\":1,\"61\":1,\"68\":1,\"69\":1,\"156\":1,\"164\":1,\"168\":1,\"183\":1}}],[\"推\",{\"1\":{\"221\":2}}],[\"推荐使用注解的方式进行统一异常处理\",{\"1\":{\"75\":1}}],[\"推荐的做法\",{\"1\":{\"12\":1}}],[\"推送上下文刷新完毕事件\",{\"1\":{\"55\":1}}],[\"实现方式\",{\"1\":{\"184\":1,\"185\":1,\"186\":1}}],[\"实现方案时gdk给我们提供的proxy类\",{\"1\":{\"35\":1}}],[\"实现了依赖的注入\",{\"1\":{\"114\":1}}],[\"实现了disposablebean\",{\"1\":{\"70\":1}}],[\"实现独立回滚\",{\"1\":{\"98\":1}}],[\"实例的生命周期和可见性\",{\"1\":{\"83\":1}}],[\"实例的初始化\",{\"1\":{\"55\":1}}],[\"实例属性填充\",{\"1\":{\"55\":1}}],[\"实例\",{\"1\":{\"55\":2,\"81\":2,\"84\":1,\"85\":1,\"115\":1}}],[\"实例化所有剩余的\",{\"1\":{\"55\":1}}],[\"实例化\",{\"1\":{\"55\":1,\"70\":1}}],[\"实例化和调用\",{\"1\":{\"55\":1}}],[\"封装成\",{\"1\":{\"55\":1}}],[\"将所有写操作追加到一个日志文件中\",{\"1\":{\"254\":1}}],[\"将一个redis中的数据复制到其他节点\",{\"1\":{\"246\":1}}],[\"将会触发一个回调函数\",{\"1\":{\"224\":1}}],[\"将指定的字符串对象的引用保存在字符串常量池中\",{\"1\":{\"209\":1}}],[\"将包装类型转换为基本数据类型\",{\"1\":{\"199\":1}}],[\"将基本类型用它们对应的引用类型包装起来\",{\"1\":{\"198\":1}}],[\"将筛选后的数据按照一个或多个列进行分组\",{\"1\":{\"182\":1}}],[\"将对象的创建交给\",{\"1\":{\"114\":1}}],[\"将这些自动加载为配置类\",{\"1\":{\"111\":1}}],[\"将这个前期暴露对象放入第二级缓存中\",{\"1\":{\"82\":1}}],[\"将渲染后的视图返回给请求者\",{\"1\":{\"74\":1}}],[\"将请求涉及到的拦截器和handler一起封装\",{\"1\":{\"74\":1}}],[\"将调用其destroy方法\",{\"1\":{\"70\":1}}],[\"将解析到的\",{\"1\":{\"55\":1}}],[\"将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构\",{\"1\":{\"31\":1}}],[\"获取一个新的\",{\"1\":{\"55\":1}}],[\"容器\",{\"1\":{\"115\":1,\"282\":1}}],[\"容器都会创建一个新的实例\",{\"1\":{\"85\":1}}],[\"容器启动后\",{\"1\":{\"70\":1}}],[\"容器启动时\",{\"1\":{\"65\":1}}],[\"容器管理的\",{\"1\":{\"70\":1,\"84\":1}}],[\"容器会解析\",{\"1\":{\"65\":1}}],[\"容器构建\",{\"0\":{\"55\":1}}],[\"容量\",{\"1\":{\"18\":1}}],[\"输入\",{\"0\":{\"239\":1}}],[\"输入数据一样\",{\"1\":{\"202\":1}}],[\"输入语法\",{\"0\":{\"53\":1}}],[\"输入和输出语法\",{\"0\":{\"51\":1}}],[\"输出变量值\",{\"1\":{\"284\":1,\"285\":1}}],[\"输出关键字\",{\"1\":{\"242\":1}}],[\"输出hello\",{\"1\":{\"241\":1}}],[\"输出\",{\"0\":{\"238\":1}}],[\"输出方法\",{\"0\":{\"237\":1}}],[\"输出number12\",{\"1\":{\"145\":1}}],[\"输出内容\",{\"1\":{\"52\":1}}],[\"输出语法\",{\"0\":{\"52\":1}}],[\"换行符回车会被识别为结束符\",{\"1\":{\"50\":1}}],[\"英文分号代表语句结束\",{\"1\":{\"50\":1}}],[\"块注释\",{\"0\":{\"49\":1}}],[\"++\",{\"1\":{\"230\":1,\"235\":1}}],[\"+=\",{\"1\":{\"229\":1}}],[\"+两边只要有一个字符串\",{\"1\":{\"145\":1}}],[\"+\",{\"1\":{\"48\":1,\"49\":2,\"78\":1,\"134\":2,\"145\":1,\"228\":1}}],[\"快捷键\",{\"1\":{\"48\":1,\"49\":1}}],[\"单个线程处理多个并发连接\",{\"1\":{\"249\":1}}],[\"单个master节点写\",{\"1\":{\"246\":1}}],[\"单线程减少上下文切换\",{\"1\":{\"249\":1}}],[\"单线程化的线程池\",{\"0\":{\"10\":1}}],[\"单引号和双引号可以相互嵌套\",{\"1\":{\"133\":1}}],[\"单例模式\",{\"0\":{\"102\":1,\"116\":1}}],[\"单行注释\",{\"0\":{\"48\":1}}],[\"网页特效\",{\"1\":{\"44\":1}}],[\"网络请求等\",{\"1\":{\"13\":1}}],[\"特性\",{\"1\":{\"160\":2,\"214\":1,\"221\":1}}],[\"特别是当子查询返回大量数据时\",{\"1\":{\"162\":1}}],[\"特别是对于那些有状态的\",{\"1\":{\"71\":1}}],[\"特别是需要与\",{\"1\":{\"58\":1}}],[\"特别是涉及到类的静态上下文和单例模式等场景\",{\"1\":{\"41\":1}}],[\"特点\",{\"1\":{\"17\":1,\"18\":1,\"34\":1,\"57\":1,\"58\":1,\"59\":1,\"62\":1,\"63\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"232\":1,\"251\":1,\"252\":1,\"253\":1}}],[\"由于不可变\",{\"1\":{\"195\":1}}],[\"由于\",{\"1\":{\"41\":1}}],[\"核心注解\",{\"0\":{\"108\":1}}],[\"核心\",{\"1\":{\"37\":1}}],[\"核心线程自己定\",{\"1\":{\"12\":1}}],[\"核心线程数\",{\"1\":{\"24\":1}}],[\"核心线程数大小设置为\",{\"1\":{\"13\":2}}],[\"核心线程数的确定\",{\"0\":{\"13\":1}}],[\"核心线程数为\",{\"1\":{\"11\":1}}],[\"核心线程数和最大线程数都是\",{\"1\":{\"10\":1}}],[\"核心线程数与最大线程数一样\",{\"1\":{\"9\":1}}],[\"若没有会向extclassloader\",{\"1\":{\"36\":1}}],[\"没有就继承\",{\"1\":{\"35\":1}}],[\"没有救急线程\",{\"1\":{\"9\":1}}],[\"动态\",{\"1\":{\"35\":1}}],[\"动态代理\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"静态导包\",{\"0\":{\"211\":1}}],[\"静态成员变量在类第一次被加载到\",{\"1\":{\"40\":1}}],[\"静态成员变量是在\",{\"1\":{\"40\":1}}],[\"静态\",{\"1\":{\"35\":1}}],[\"静态代理\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"也视为\",{\"1\":{\"165\":1}}],[\"也就是交互多的场景\",{\"1\":{\"34\":1}}],[\"也无法删除\",{\"1\":{\"22\":1}}],[\"业务逻辑\",{\"1\":{\"122\":1}}],[\"业务\",{\"1\":{\"34\":1}}],[\"清除算法\",{\"1\":{\"34\":1}}],[\"清理一部分键为\",{\"1\":{\"22\":1}}],[\"环境中\",{\"1\":{\"34\":1}}],[\"环境下的\",{\"1\":{\"34\":2}}],[\"多路复用\",{\"0\":{\"253\":1}}],[\"多路复用是一种\",{\"1\":{\"253\":1}}],[\"多路复用是\",{\"1\":{\"250\":1}}],[\"多路复用的区别\",{\"0\":{\"250\":1}}],[\"多核\",{\"1\":{\"34\":1}}],[\"多线程\",{\"0\":{\"7\":1}}],[\"老年代\",{\"1\":{\"34\":4}}],[\"垃圾回收机制\",{\"1\":{\"282\":1}}],[\"垃圾回收时就无法清理掉这些对象\",{\"1\":{\"22\":1}}],[\"垃圾收集器\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"卸载\",{\"0\":{\"33\":1}}],[\"初始化阶段简单来说就是执行类的构造器方法\",{\"1\":{\"33\":1}}],[\"初始化\",{\"0\":{\"33\":1}}],[\"初始化时机的比较\",{\"0\":{\"41\":1}}],[\"初始化时\",{\"1\":{\"15\":1}}],[\"被发送回客户端\",{\"1\":{\"122\":1}}],[\"被渲染成\",{\"1\":{\"122\":1}}],[\"被注解的字段在保存时不会被保存到数据库中\",{\"1\":{\"95\":1}}],[\"被注解的类将映射到数据库中的一个表\",{\"1\":{\"92\":1}}],[\"被销毁\",{\"1\":{\"86\":1,\"87\":1}}],[\"被随意篡改\",{\"1\":{\"37\":1}}],[\"被代理有接口实现就实现响应接口\",{\"1\":{\"35\":1}}],[\"被\",{\"1\":{\"32\":1,\"81\":1,\"194\":1}}],[\"被垃圾回收线程发现就会被回收\",{\"1\":{\"24\":1}}],[\"类中定义方法\",{\"1\":{\"77\":1}}],[\"类\",{\"1\":{\"76\":1}}],[\"类的的第一个实例被创建时\",{\"1\":{\"39\":1}}],[\"类的加载和初始化涉及到成员变量和静态成员变量的初始化时机\",{\"1\":{\"38\":1}}],[\"类加载阶段\",{\"1\":{\"40\":1}}],[\"类加载时成员变量和静态成员变量的初始化时机\",{\"0\":{\"38\":1}}],[\"类加载过程\",{\"0\":{\"30\":1}}],[\"类运行时产生\",{\"1\":{\"35\":1}}],[\"类编译时产生\",{\"1\":{\"35\":1}}],[\"类型\",{\"1\":{\"34\":1,\"181\":1}}],[\"类型初始值是\",{\"1\":{\"32\":1}}],[\"准备就绪\",{\"1\":{\"70\":1}}],[\"准备\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"验证\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"连接这些表\",{\"1\":{\"182\":1}}],[\"连接的过程\",{\"1\":{\"126\":1,\"127\":1}}],[\"连接来发送多个请求和响应\",{\"1\":{\"124\":1}}],[\"连接建立\",{\"1\":{\"124\":1}}],[\"连接\",{\"0\":{\"32\":1},\"1\":{\"124\":4}}],[\"加载速度快\",{\"1\":{\"254\":1}}],[\"加载速度慢\",{\"1\":{\"254\":1}}],[\"加载配置\",{\"1\":{\"66\":1}}],[\"加载到\",{\"1\":{\"55\":1}}],[\"加载和解析\",{\"1\":{\"55\":1}}],[\"加载\",{\"0\":{\"31\":1},\"1\":{\"65\":1}}],[\"加锁影响系统吞吐量\",{\"1\":{\"247\":1}}],[\"加锁\",{\"1\":{\"18\":1}}],[\"虚拟机\",{\"0\":{\"29\":1}}],[\"虚引用\",{\"1\":{\"24\":1}}],[\">=\",{\"1\":{\"231\":2,\"235\":1}}],[\">\",{\"1\":{\"28\":2,\"162\":1,\"217\":1,\"231\":1,\"235\":1,\"252\":1}}],[\"volatile\",{\"1\":{\"256\":4}}],[\"void\",{\"1\":{\"28\":1}}],[\"viewresolver根据逻辑视图查找实际的视图\",{\"1\":{\"74\":1}}],[\"viewresolver\",{\"1\":{\"74\":1,\"122\":1}}],[\"view\",{\"1\":{\"63\":1,\"74\":2}}],[\"var声明有如下弊端\",{\"1\":{\"290\":1}}],[\"varchar\",{\"0\":{\"203\":1},\"1\":{\"204\":1,\"205\":1,\"206\":1}}],[\"var3\",{\"1\":{\"5\":4}}],[\"value\",{\"0\":{\"23\":1},\"1\":{\"9\":1,\"10\":1,\"11\":2,\"12\":2,\"21\":1,\"194\":1}}],[\"of\",{\"1\":{\"279\":1}}],[\"on\",{\"1\":{\"182\":1}}],[\"o是内表\",{\"1\":{\"171\":1}}],[\"o\",{\"0\":{\"250\":1,\"251\":1,\"252\":1,\"253\":1},\"1\":{\"171\":2,\"250\":3,\"251\":2,\"252\":1,\"253\":4}}],[\"order\",{\"1\":{\"171\":1,\"182\":1}}],[\"orders\",{\"1\":{\"171\":1}}],[\"or\",{\"1\":{\"162\":2,\"172\":2}}],[\"observer\",{\"0\":{\"105\":1}}],[\"object\",{\"0\":{\"140\":1},\"1\":{\"28\":4}}],[\"old\",{\"1\":{\"34\":2}}],[\"out\",{\"1\":{\"28\":4}}],[\"oom\",{\"1\":{\"12\":2}}],[\"手撕sychronized死锁\",{\"0\":{\"28\":1}}],[\"为了确保\",{\"1\":{\"183\":1}}],[\"为了提高\",{\"1\":{\"177\":1}}],[\"为了提高数据库查询的性能\",{\"1\":{\"172\":1}}],[\"为了解决这些问题\",{\"1\":{\"152\":1}}],[\"为了解决这个问题\",{\"1\":{\"79\":1}}],[\"为其他对象提供一个代理以控制对这个对象的访问\",{\"1\":{\"120\":1}}],[\"为\",{\"1\":{\"70\":1}}],[\"为类中的静态字段分配内存\",{\"1\":{\"32\":1}}],[\"为不同线程设置不同的资源申请时间\",{\"1\":{\"27\":1}}],[\"为什么使用双亲委派\",{\"0\":{\"37\":1}}],[\"为什么\",{\"0\":{\"22\":1,\"23\":1}}],[\"3\",{\"0\":{\"180\":1},\"1\":{\"27\":1,\"235\":1,\"246\":1}}],[\"通常用户变量的优先级高于系统变量\",{\"1\":{\"276\":1}}],[\"通常用于筛选聚合后的结果\",{\"1\":{\"182\":1}}],[\"通常用于\",{\"1\":{\"63\":1}}],[\"通常将常量的所有字母都大写\",{\"1\":{\"243\":1}}],[\"通常使用全小写\",{\"1\":{\"242\":1}}],[\"通常使用i++\",{\"1\":{\"230\":1}}],[\"通常比\",{\"1\":{\"170\":1,\"171\":1}}],[\"通常通过\",{\"1\":{\"122\":1}}],[\"通常是浏览器\",{\"1\":{\"74\":1,\"122\":1}}],[\"通常是\",{\"1\":{\"55\":1}}],[\"通常建议在任务执行完毕后清除inheritablethreadlocal的值\",{\"1\":{\"25\":1}}],[\"通过内容分发网络缓解攻击压力\",{\"1\":{\"281\":1}}],[\"通过使用\",{\"1\":{\"253\":1}}],[\"通过轮询操作\",{\"1\":{\"252\":1}}],[\"通过hash计算确定存取的位置\",{\"1\":{\"246\":1}}],[\"通过这个表再通过id查文档\",{\"1\":{\"187\":1}}],[\"通过这种方式\",{\"1\":{\"82\":1}}],[\"通过三次握手过程\",{\"1\":{\"124\":1}}],[\"通过配置文件或注解定义\",{\"1\":{\"115\":1}}],[\"通过注解和\",{\"1\":{\"107\":1}}],[\"通过管理依赖版本来帮助解决\",{\"1\":{\"107\":1}}],[\"通过在构造函数注入上添加\",{\"1\":{\"80\":1}}],[\"通过定义一个或多个\",{\"1\":{\"76\":1}}],[\"通过反射机制实例化\",{\"1\":{\"70\":1}}],[\"通过\",{\"1\":{\"65\":3,\"101\":1,\"114\":1}}],[\"通过trylock\",{\"1\":{\"27\":1}}],[\"通过算法有序获取锁\",{\"1\":{\"27\":1}}],[\"如age和age是不同变量\",{\"1\":{\"288\":1}}],[\"如何分片\",{\"1\":{\"246\":1}}],[\"如何避免\",{\"1\":{\"27\":1}}],[\"如昵称\",{\"1\":{\"206\":1}}],[\"如身份证\",{\"1\":{\"206\":1}}],[\"如setbeanfactory\",{\"1\":{\"70\":1}}],[\"如服务发现\",{\"1\":{\"59\":1}}],[\"如健康检查\",{\"1\":{\"57\":1}}],[\"如\",{\"1\":{\"32\":1,\"76\":1,\"112\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"124\":1,\"162\":5,\"182\":1,\"185\":1}}],[\"如果消息无法被路由到任何队列\",{\"1\":{\"223\":1,\"224\":1}}],[\"如果字符串常量池中没有保存对应的字符串对象的引用\",{\"1\":{\"209\":1}}],[\"如果字符串常量池中保存了对应的字符串对象的引用\",{\"1\":{\"209\":1}}],[\"如果原对象内部的属性是引用类型\",{\"1\":{\"192\":1}}],[\"如果不需要去除重复记录\",{\"1\":{\"172\":1}}],[\"如果返回结果为\",{\"1\":{\"165\":1}}],[\"如果需要更好的读性能\",{\"1\":{\"161\":1}}],[\"如果需要支持事务\",{\"1\":{\"161\":1}}],[\"如果在两次读取之间\",{\"1\":{\"150\":1,\"151\":1}}],[\"如果未提交的事务最终被回滚\",{\"1\":{\"149\":1}}],[\"如果找不到\",{\"1\":{\"124\":1}}],[\"如果多个线程同时访问和修改这些可变的成员变量\",{\"1\":{\"72\":1}}],[\"如果\",{\"1\":{\"70\":2,\"81\":1}}],[\"如果还没有\",{\"1\":{\"36\":1}}],[\"如果达到\",{\"1\":{\"24\":1}}],[\"如果阻塞队列也满了\",{\"1\":{\"24\":1}}],[\"如果值是弱引用\",{\"1\":{\"23\":1}}],[\"如果这类对象存在很多\",{\"1\":{\"22\":1}}],[\"如果没有其他引用对象的强引用关系\",{\"1\":{\"22\":1}}],[\"因此\",{\"1\":{\"40\":1}}],[\"因此为了避免死锁\",{\"1\":{\"27\":1}}],[\"因为加了锁\",{\"1\":{\"195\":1}}],[\"因为连接的两个条件可能使用不同的索引\",{\"1\":{\"172\":1}}],[\"因为它可以更早地终止查询\",{\"1\":{\"171\":1}}],[\"因为它可以利用索引\",{\"1\":{\"171\":1}}],[\"因为它只检查子查询中是否存在记录\",{\"1\":{\"170\":1}}],[\"因为它们不会受到并发访问的影响\",{\"1\":{\"73\":1}}],[\"因为它们可能会在不被期望的情况下突然消失\",{\"1\":{\"23\":1}}],[\"因为没有覆盖查询所需要的数据\",{\"1\":{\"154\":1}}],[\"因为\",{\"1\":{\"32\":1,\"172\":1}}],[\"允许直接使用类的方法\",{\"1\":{\"211\":1}}],[\"允许子查询利用索引\",{\"1\":{\"170\":1}}],[\"允许更高的并发性\",{\"1\":{\"158\":1}}],[\"允许接口不兼容的类可以一起工作\",{\"1\":{\"121\":1}}],[\"允许\",{\"1\":{\"82\":1}}],[\"允许用户自定义类加载器以满足特定需求\",{\"1\":{\"37\":1}}],[\"允许我们运行时生成代理对象\",{\"1\":{\"35\":1}}],[\"允许主动清除对象\",{\"1\":{\"26\":1}}],[\"允许的创建线程数量为\",{\"1\":{\"12\":1}}],[\"允许的请求队列长度为integer\",{\"1\":{\"12\":1}}],[\"提高防御能力\",{\"1\":{\"281\":1}}],[\"提高了系统的并发处理能力\",{\"1\":{\"253\":1}}],[\"提高了系统的可扩展性\",{\"1\":{\"185\":1}}],[\"提高吞吐量\",{\"1\":{\"249\":1}}],[\"提供的注解\",{\"1\":{\"69\":2}}],[\"提供类加载的层次结构\",{\"1\":{\"37\":1}}],[\"提供了快速启动和部署\",{\"1\":{\"106\":1}}],[\"提供了快速开发的便利性\",{\"1\":{\"57\":1}}],[\"提供了一套统一的操作\",{\"1\":{\"117\":1}}],[\"提供了一系列注解来简化\",{\"1\":{\"108\":1}}],[\"提供了一系列的注解\",{\"1\":{\"91\":1}}],[\"提供了一个创建对象的接口\",{\"1\":{\"101\":1}}],[\"提供了集成\",{\"1\":{\"60\":1}}],[\"提供了微服务架构下的各种解决方案\",{\"1\":{\"59\":1}}],[\"提供了模型\",{\"1\":{\"58\":1}}],[\"提供了生产就绪的特性\",{\"1\":{\"57\":1}}],[\"提供了\",{\"1\":{\"26\":1}}],[\"提示\",{\"1\":{\"6\":1,\"112\":1,\"171\":1,\"277\":1}}],[\"效率较低\",{\"1\":{\"26\":1}}],[\"扩容后需要重新哈希\",{\"1\":{\"26\":1}}],[\"扩容过程简单高效\",{\"1\":{\"26\":1}}],[\"扩容时将原数据拷贝到新数组\",{\"1\":{\"26\":1}}],[\"found\",{\"1\":{\"291\":1}}],[\"for\",{\"0\":{\"273\":1},\"1\":{\"273\":1}}],[\"from\",{\"1\":{\"171\":2,\"182\":1}}],[\"function\",{\"0\":{\"141\":1}}],[\"false\",{\"1\":{\"233\":1}}],[\"factory\",{\"0\":{\"101\":1}}],[\"factories文件\",{\"1\":{\"65\":1}}],[\"factories\",{\"1\":{\"65\":1,\"66\":1,\"81\":1}}],[\"fastthreadlocal\",{\"1\":{\"26\":2}}],[\"fin\",{\"1\":{\"127\":6}}],[\"final\",{\"1\":{\"32\":2,\"194\":1}}],[\"finalizabledelegatedexecutorservice\",{\"1\":{\"10\":1}}],[\"first\",{\"1\":{\"34\":1}}],[\"fixedthreadpool\",{\"1\":{\"12\":1,\"16\":1}}],[\"数字\",{\"1\":{\"288\":1}}],[\"数字与下划线组成\",{\"1\":{\"242\":1}}],[\"数值\",{\"1\":{\"244\":1}}],[\"数据科学平台\",{\"1\":{\"278\":1}}],[\"数据结构存储方式\",{\"0\":{\"257\":1}}],[\"数据结构都是优化过的\",{\"1\":{\"249\":1}}],[\"数据不易丢失\",{\"1\":{\"254\":1}}],[\"数据不是实时保存的\",{\"1\":{\"254\":1}}],[\"数据丢失\",{\"1\":{\"254\":1}}],[\"数据从内核空间\",{\"1\":{\"252\":1}}],[\"数据存储在内存中\",{\"1\":{\"249\":1}}],[\"数据长度不足会空格补充\",{\"1\":{\"204\":1}}],[\"数据变更时触发一个消息队列消息\",{\"1\":{\"185\":1}}],[\"数据一致性高\",{\"1\":{\"184\":1}}],[\"数据一致性实现\",{\"0\":{\"183\":1}}],[\"数据的同时\",{\"1\":{\"184\":1}}],[\"数据库与\",{\"1\":{\"183\":1}}],[\"数据库中\",{\"1\":{\"156\":1}}],[\"数据库系统提供了不同的事务隔离级别\",{\"1\":{\"152\":1}}],[\"数据类型实现的\",{\"1\":{\"261\":2}}],[\"数据类型转换\",{\"0\":{\"144\":1}}],[\"数据类型分类\",{\"0\":{\"129\":1}}],[\"数据类型\",{\"0\":{\"128\":1}}],[\"数据可以开始传输\",{\"1\":{\"126\":1}}],[\"数据\",{\"1\":{\"74\":1,\"259\":1,\"260\":1}}],[\"数据交互\",{\"1\":{\"44\":1}}],[\"数据扩容机制\",{\"1\":{\"26\":1}}],[\"数组\",{\"1\":{\"18\":1,\"194\":1}}],[\"在网络编程中\",{\"1\":{\"250\":1}}],[\"在消费者中定义确认方法\",{\"1\":{\"226\":1}}],[\"在消息队列\",{\"1\":{\"222\":1}}],[\"在这个阶段\",{\"1\":{\"223\":1,\"224\":1,\"225\":1,\"226\":1}}],[\"在堆上创建一个新的对象\",{\"1\":{\"192\":1}}],[\"在修改\",{\"1\":{\"184\":1}}],[\"在列层面进行去重操作\",{\"1\":{\"182\":1}}],[\"在获取表数据后\",{\"1\":{\"182\":1}}],[\"在编写\",{\"1\":{\"182\":1}}],[\"在编译的时候就分配了\",{\"1\":{\"32\":1}}],[\"在逻辑上\",{\"1\":{\"170\":1}}],[\"在处理大量并发读写操作时性能较好\",{\"1\":{\"161\":1}}],[\"在读操作多\",{\"1\":{\"161\":1}}],[\"在一个事务中多次读取同一范围的数据\",{\"1\":{\"151\":1}}],[\"在一个事务中多次读取同一数据\",{\"1\":{\"150\":1}}],[\"在并发数据库操作中\",{\"1\":{\"148\":1}}],[\"在整个应用程序中只有一个实例\",{\"1\":{\"116\":1}}],[\"在main方法中书写执行代码\",{\"1\":{\"112\":1}}],[\"在map中位置发生冲突会使用开放寻址法\",{\"1\":{\"24\":1,\"25\":1}}],[\"在初始化过程中引用其他\",{\"1\":{\"82\":1}}],[\"在初始化方法调用之后执行beanpostprocessor接口的postprocessafterinitialization方法\",{\"1\":{\"70\":1}}],[\"在初始化方法调用之前执行beanpostprocessor接口的postprocessbeforeinitialization方法\",{\"1\":{\"70\":1}}],[\"在某些情况下\",{\"1\":{\"68\":1}}],[\"在\",{\"1\":{\"38\":1,\"61\":1,\"67\":1,\"70\":1,\"71\":1,\"75\":1,\"77\":1,\"79\":1,\"83\":1,\"84\":1,\"88\":1,\"124\":2,\"156\":1,\"168\":1,\"181\":1,\"219\":1,\"223\":2,\"224\":1,\"225\":1,\"226\":1}}],[\"在任务执行完成后会自动触发清除机制\",{\"1\":{\"26\":1}}],[\"在线程池场景下\",{\"1\":{\"26\":1}}],[\"在使用inheritablethreadlocal\",{\"1\":{\"25\":1}}],[\"并且所有元素都是数值时\",{\"1\":{\"260\":1}}],[\"并且每个元素大小小于\",{\"1\":{\"259\":1}}],[\"并且\",{\"1\":{\"232\":1}}],[\"并且只会初始化一次\",{\"1\":{\"40\":1}}],[\"并在确认消息后进行处理\",{\"1\":{\"226\":1}}],[\"并返回该引用\",{\"1\":{\"209\":1}}],[\"并实时推送到\",{\"1\":{\"186\":1}}],[\"并进行行层面的结束处理\",{\"1\":{\"182\":1}}],[\"并进行统一处理\",{\"1\":{\"89\":1}}],[\"并根据\",{\"1\":{\"124\":1}}],[\"并按下回车键时\",{\"1\":{\"124\":1}}],[\"并找到实际的视图模板\",{\"1\":{\"122\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"102\":1}}],[\"并使用\",{\"1\":{\"77\":1}}],[\"并调用指定的初始化方法\",{\"1\":{\"70\":1}}],[\"并调用其afterpropertiesset方法\",{\"1\":{\"70\":1}}],[\"并调用相应的方法\",{\"1\":{\"70\":1}}],[\"并写入\",{\"1\":{\"64\":1}}],[\"并放到本地缓存中\",{\"1\":{\"55\":1}}],[\"并发数据库操作中的读取问题\",{\"0\":{\"148\":1}}],[\"并发送一个带有\",{\"1\":{\"126\":1}}],[\"并发\",{\"1\":{\"34\":1}}],[\"并发回收\",{\"1\":{\"34\":1}}],[\"并行回收\",{\"1\":{\"34\":4}}],[\"并设置默认的初始值\",{\"1\":{\"32\":1}}],[\"并将这些变量的值复制到子线程中\",{\"1\":{\"25\":1}}],[\"并执行当前任务\",{\"1\":{\"19\":1}}],[\"会使用\",{\"1\":{\"258\":1,\"259\":1,\"260\":1}}],[\"会采用\",{\"1\":{\"258\":1,\"259\":1}}],[\"会一直阻塞\",{\"1\":{\"251\":1}}],[\"会解析\",{\"1\":{\"124\":1}}],[\"会发送一个\",{\"1\":{\"124\":1,\"223\":1}}],[\"会根据请求的\",{\"1\":{\"124\":1}}],[\"会根据当前类路径下的类自动装配\",{\"1\":{\"107\":1}}],[\"会自动依赖其他组件\",{\"1\":{\"107\":1}}],[\"会话结束后\",{\"1\":{\"87\":1}}],[\"会话相同\",{\"1\":{\"87\":1}}],[\"会产生一个新的\",{\"1\":{\"87\":1}}],[\"会从第三级缓存singletonfactories中获取objectfactory\",{\"1\":{\"82\":1}}],[\"会检查父线程中的\",{\"1\":{\"25\":1}}],[\"会把前面的给覆盖了\",{\"1\":{\"24\":1,\"25\":1}}],[\"父线程\",{\"1\":{\"25\":1}}],[\"弱引用\",{\"1\":{\"24\":1}}],[\"弱引用意味着\",{\"1\":{\"22\":1}}],[\"才会回收软引用指向的对象\",{\"1\":{\"24\":1}}],[\"jupyter\",{\"1\":{\"278\":1}}],[\"join\",{\"1\":{\"166\":1,\"181\":1,\"182\":3}}],[\"jar\",{\"1\":{\"107\":2}}],[\"java基础\",{\"0\":{\"188\":1}}],[\"javascript本身自带垃圾回收机制\",{\"1\":{\"282\":1}}],[\"javascript解释器会将其计算出一个结果\",{\"1\":{\"264\":1}}],[\"javascript\",{\"1\":{\"124\":1,\"277\":1}}],[\"javascript结束符\",{\"0\":{\"50\":1}}],[\"javascript注释\",{\"0\":{\"47\":1}}],[\"javascript书写位置\",{\"0\":{\"46\":1}}],[\"javascript的组成\",{\"0\":{\"45\":1}}],[\"javascript作用\",{\"0\":{\"44\":1}}],[\"javascript是弱数据类型\",{\"1\":{\"131\":1}}],[\"javascript是一门运行在客户端的编程语言\",{\"1\":{\"43\":1}}],[\"javascript是什么\",{\"0\":{\"43\":1}}],[\"javascript和java没有一点关系\",{\"1\":{\"42\":1}}],[\"java中的引用类型\",{\"1\":{\"24\":1}}],[\"java\",{\"0\":{\"20\":1,\"213\":1,\"215\":1,\"219\":1},\"1\":{\"5\":1,\"25\":1,\"37\":1,\"38\":1,\"91\":1,\"213\":1,\"219\":1,\"250\":1}}],[\"jdbctemplate\",{\"1\":{\"104\":1}}],[\"jdbc\",{\"1\":{\"104\":1}}],[\"jdk\",{\"0\":{\"217\":1},\"1\":{\"69\":1,\"103\":1}}],[\"jpa\",{\"1\":{\"91\":1}}],[\"jpa注解\",{\"0\":{\"91\":1}}],[\"js\",{\"1\":{\"277\":3}}],[\"js语句是以分号结束\",{\"1\":{\"264\":1}}],[\"jsp\",{\"1\":{\"122\":1}}],[\"json\",{\"1\":{\"62\":1,\"64\":1}}],[\"js介绍\",{\"0\":{\"42\":1}}],[\"jetty\",{\"1\":{\"57\":1,\"107\":1}}],[\"jvm\",{\"1\":{\"25\":1,\"40\":1}}],[\"jvm内存不足时\",{\"1\":{\"24\":1}}],[\"软引用\",{\"1\":{\"24\":1}}],[\"只针对设置了过期时间的键\",{\"1\":{\"256\":4}}],[\"只存在于内存中\",{\"1\":{\"214\":1}}],[\"只声明变量\",{\"1\":{\"137\":1}}],[\"只需要打成可执行的\",{\"1\":{\"107\":1}}],[\"只有一个实例\",{\"1\":{\"84\":1}}],[\"只能通过\",{\"1\":{\"68\":1}}],[\"只能通过主动检测来防止内存泄漏\",{\"1\":{\"26\":1}}],[\"只要引用还存在就不会被回收\",{\"1\":{\"24\":1}}],[\"只支持非公平锁\",{\"1\":{\"16\":1}}],[\"达到最大线程数\",{\"1\":{\"24\":1}}],[\"时间一道删除\",{\"1\":{\"255\":1}}],[\"时间后将被自动销毁\",{\"1\":{\"24\":1}}],[\"时开启路由失败通知\",{\"1\":{\"224\":1}}],[\"时都会有额外的维护成本\",{\"1\":{\"184\":1}}],[\"时就初始化\",{\"1\":{\"40\":1}}],[\"时就会被回收掉\",{\"1\":{\"22\":1}}],[\"时\",{\"1\":{\"25\":2,\"85\":1}}],[\"任务处理完成后\",{\"1\":{\"24\":1}}],[\"任务进入阻塞队列\",{\"1\":{\"24\":1}}],[\"qualifier注解来显式指定名称\",{\"1\":{\"69\":1}}],[\"queue\",{\"1\":{\"24\":1}}],[\"qqmail\",{\"1\":{\"1\":1,\"4\":1}}],[\"后`\",{\"1\":{\"235\":1}}],[\"后+\",{\"1\":{\"235\":1}}],[\"后置\",{\"1\":{\"230\":1}}],[\"后置处理\",{\"1\":{\"70\":1}}],[\"后面是一个子查询\",{\"1\":{\"165\":1}}],[\"后面set的值\",{\"1\":{\"24\":1,\"25\":1}}],[\"后续的任务将进入阻塞队列\",{\"1\":{\"24\":1}}],[\"后\",{\"1\":{\"24\":1,\"126\":2,\"127\":2}}],[\"当服务器回复\",{\"1\":{\"280\":1}}],[\"当涉及到环境变量的解析和使用时\",{\"1\":{\"276\":1}}],[\"当内存不足时\",{\"1\":{\"256\":1}}],[\"当某个连接的数据准备好时\",{\"1\":{\"253\":1}}],[\"当存取某个key时\",{\"1\":{\"246\":1}}],[\"当发生故障时\",{\"1\":{\"246\":1}}],[\"当发生循环依赖时\",{\"1\":{\"82\":1}}],[\"当子类继承自父类的相同方法\",{\"1\":{\"202\":1}}],[\"当子查询的表比主查询的表大时\",{\"1\":{\"171\":1}}],[\"当合并两个查询结果集时\",{\"1\":{\"172\":1}}],[\"当属性值固定时\",{\"1\":{\"172\":1}}],[\"当两个表一大一小\",{\"1\":{\"167\":1}}],[\"当两个表的大小相当时\",{\"1\":{\"167\":1,\"171\":1}}],[\"当用户在浏览器中输入一个\",{\"1\":{\"124\":1}}],[\"当然启动类也可以\",{\"1\":{\"112\":1}}],[\"当一个对象改变状态时\",{\"1\":{\"105\":1,\"118\":1}}],[\"当一个线程\",{\"1\":{\"25\":1}}],[\"当需要插入大量数据时\",{\"1\":{\"172\":1}}],[\"当需要在同一个会话中保持\",{\"1\":{\"87\":1}}],[\"当需要限制线程池中任务的数量时使用\",{\"1\":{\"15\":1}}],[\"当\",{\"1\":{\"84\":1,\"85\":1,\"162\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"当容器关闭时\",{\"1\":{\"70\":1}}],[\"当开发\",{\"1\":{\"60\":1}}],[\"当我们进行类加载时\",{\"1\":{\"36\":1}}],[\"当任务数量超过\",{\"1\":{\"24\":1}}],[\"当向线程池提交一个新任务时\",{\"1\":{\"24\":1}}],[\"避免内存漫溢\",{\"1\":{\"282\":1}}],[\"避免了一直阻塞\",{\"1\":{\"252\":1}}],[\"避免了脏读和不可重复读\",{\"1\":{\"152\":1}}],[\"避免了脏读\",{\"1\":{\"152\":2}}],[\"避免返回大量数据\",{\"1\":{\"172\":1}}],[\"避免使用\",{\"1\":{\"172\":2}}],[\"避免类的重复加载\",{\"1\":{\"37\":1}}],[\"避免因垃圾回收导致的潜在错误\",{\"1\":{\"23\":1}}],[\"避免资源耗尽的风险\",{\"1\":{\"12\":1}}],[\"直到内核把数据拷贝到用户空间\",{\"1\":{\"251\":1}}],[\"直到显式地通过remove\",{\"1\":{\"23\":1}}],[\"直接对服务器发送大量的\",{\"1\":{\"280\":1}}],[\"直接返回数据\",{\"1\":{\"64\":1}}],[\"直接或间接引用着\",{\"1\":{\"22\":1}}],[\"直接丢弃任务\",{\"1\":{\"19\":1}}],[\"直接抛出异常\",{\"1\":{\"19\":1}}],[\"强引用\",{\"1\":{\"24\":1}}],[\"强引用保证数据完整性\",{\"1\":{\"23\":1}}],[\"强制有界\",{\"1\":{\"18\":1}}],[\"使得处理复杂操作时\",{\"1\":{\"249\":1}}],[\"使得这个无用的对象还一直被\",{\"1\":{\"22\":1}}],[\"使用let而非var声明变量\",{\"1\":{\"290\":1}}],[\"使用分布式防御系统\",{\"1\":{\"281\":1}}],[\"使用hash槽对数据进行分片\",{\"1\":{\"246\":1}}],[\"使用监听容器来异步接收消息\",{\"1\":{\"226\":1}}],[\"使用队列的备份和复制机制来提高数据的可靠性\",{\"1\":{\"225\":1}}],[\"使用事务来确保消息的发送和确认\",{\"1\":{\"223\":1}}],[\"使用string进行拼接时需要创建新对象\",{\"1\":{\"196\":1}}],[\"使用阿里\",{\"1\":{\"186\":1}}],[\"使用消息队列\",{\"1\":{\"185\":1}}],[\"使用批量插入代替单条插入\",{\"1\":{\"172\":1}}],[\"使用批量插入\",{\"1\":{\"172\":1}}],[\"使用数值代替字符串\",{\"1\":{\"172\":1}}],[\"使用表级锁定\",{\"1\":{\"158\":1}}],[\"使用动态代理方式\",{\"1\":{\"120\":1}}],[\"使用面向接口的编程思想定义策略层\",{\"1\":{\"119\":1}}],[\"使用场景\",{\"1\":{\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"214\":1}}],[\"使用算法\",{\"1\":{\"34\":1}}],[\"使用不当可能导致内存泄漏\",{\"1\":{\"26\":1}}],[\"使用哈希表存储数据\",{\"1\":{\"26\":1}}],[\"使用强引用作为\",{\"1\":{\"23\":1}}],[\"使用一把锁\",{\"1\":{\"18\":1}}],[\"使用两把锁\",{\"1\":{\"18\":1}}],[\"使用示例\",{\"1\":{\"16\":1}}],[\"使用\",{\"0\":{\"33\":1,\"40\":1,\"80\":1,\"180\":1,\"206\":1},\"1\":{\"15\":1,\"65\":1,\"66\":1,\"70\":1,\"93\":1,\"122\":2,\"162\":3,\"167\":1,\"172\":2,\"180\":1}}],[\"使用threadpoolexecutor直接创建线程池\",{\"1\":{\"12\":1}}],[\"方法名\",{\"1\":{\"217\":1}}],[\"方法体\",{\"1\":{\"210\":1}}],[\"方法来获取循环依赖对象的前期暴露对象\",{\"1\":{\"82\":1}}],[\"方法\",{\"1\":{\"26\":1,\"69\":1,\"124\":1,\"217\":2}}],[\"方法或线程结束时清理\",{\"1\":{\"23\":1}}],[\"方法手动清理\",{\"1\":{\"22\":1}}],[\"方法完成\",{\"1\":{\"20\":1}}],[\"最终可能导致服务崩溃\",{\"1\":{\"280\":1}}],[\"最终的响应\",{\"1\":{\"122\":1}}],[\"最近最少使用频率\",{\"1\":{\"256\":2}}],[\"最近最少使用\",{\"1\":{\"256\":2}}],[\"最好采用分页查询来减少单次查询的数据量\",{\"1\":{\"172\":1}}],[\"最高的隔离级别\",{\"1\":{\"152\":1}}],[\"最低的隔离级别\",{\"1\":{\"152\":1}}],[\"最后\",{\"1\":{\"65\":1,\"182\":1}}],[\"最重要的还是开发人员在编写代码时记得在使用完数据后及时调用\",{\"1\":{\"22\":1}}],[\"最大线程max\",{\"1\":{\"12\":1}}],[\"最大线程数是\",{\"1\":{\"11\":1}}],[\"最大容量为\",{\"1\":{\"9\":1,\"10\":1}}],[\"中常见的三种\",{\"1\":{\"250\":1}}],[\"中等\",{\"1\":{\"221\":1}}],[\"中用于子查询的两种不同关键字\",{\"1\":{\"164\":1}}],[\"中的\",{\"1\":{\"102\":1}}],[\"中的应用\",{\"1\":{\"100\":1}}],[\"中\",{\"0\":{\"219\":1},\"1\":{\"38\":1,\"55\":1,\"124\":2,\"163\":1,\"168\":1,\"184\":1,\"219\":1,\"223\":2,\"224\":1,\"225\":1,\"226\":1}}],[\"中在进行\",{\"1\":{\"22\":1}}],[\"中完成\",{\"1\":{\"20\":1}}],[\"虽然还没有初始化完成\",{\"1\":{\"82\":1}}],[\"虽然\",{\"1\":{\"22\":1}}],[\"但不符合业内通识\",{\"1\":{\"287\":1}}],[\"但源\",{\"1\":{\"280\":1}}],[\"但语句用来自行以使某件事发生\",{\"1\":{\"264\":1}}],[\"但当主节点故障时\",{\"1\":{\"246\":1}}],[\"但在存储过程中可能会丢失\",{\"1\":{\"225\":1}}],[\"但要做出有别于父类的响应时\",{\"1\":{\"202\":1}}],[\"但要是不是id就不能走聚簇索引\",{\"1\":{\"153\":1}}],[\"但性能开销较大\",{\"1\":{\"152\":1}}],[\"但可能出现幻读\",{\"1\":{\"152\":1}}],[\"但可能出现不可重复读和幻读\",{\"1\":{\"152\":1}}],[\"但可以获取到该对象在堆中的存储地址\",{\"1\":{\"82\":1}}],[\"但为空\",{\"1\":{\"138\":1}}],[\"但注意不能自己嵌套自己\",{\"1\":{\"133\":1}}],[\"但它们在性能和用法上有所不同\",{\"1\":{\"168\":1}}],[\"但它们在返回类型和用途上有所不同\",{\"1\":{\"61\":1}}],[\"但它们的定位和用途有所不同\",{\"1\":{\"56\":1}}],[\"但是这边还不触发\",{\"1\":{\"55\":1}}],[\"但是这只是一种后备选择\",{\"1\":{\"22\":1}}],[\"但是由于没有正确处理对象的引用关系\",{\"1\":{\"22\":1}}],[\"但是值对象还在\",{\"1\":{\"22\":1}}],[\"但同时也引入了新的问题\",{\"1\":{\"22\":1}}],[\"这在连接数很多时会导致大量的线程消耗\",{\"1\":{\"251\":1}}],[\"这就要求左边必须是一个容器\",{\"1\":{\"229\":1}}],[\"这是一个多行注释\",{\"1\":{\"241\":1}}],[\"这是\",{\"1\":{\"181\":1}}],[\"这可以显著提高查询性能\",{\"1\":{\"170\":1}}],[\"这可能导致索引失效\",{\"1\":{\"162\":1}}],[\"这可能导致事务在处理过程中得到不一致的数据集\",{\"1\":{\"151\":1}}],[\"这可能导致事务在处理过程中得到不同的结果\",{\"1\":{\"150\":1}}],[\"这可能导致错误的决策\",{\"1\":{\"149\":1}}],[\"这时我们需要对b方法进行处理\",{\"1\":{\"98\":1}}],[\"这个新的\",{\"1\":{\"262\":1}}],[\"这个事务方法对另一个事务方法\",{\"1\":{\"98\":1}}],[\"这个拷贝过程发生在\",{\"1\":{\"25\":1}}],[\"这两个注解\",{\"1\":{\"75\":1}}],[\"这边是另一个重要扩展点\",{\"1\":{\"55\":1}}],[\"这边是一个非常重要的扩展点\",{\"1\":{\"55\":1}}],[\"这种差异在设计类和方法时需要考虑\",{\"1\":{\"41\":1}}],[\"这意味着如果一个用户变量和一个系统变量具有相同的名称\",{\"1\":{\"276\":1}}],[\"这意味着如果使用\",{\"1\":{\"25\":1}}],[\"这意味着\",{\"1\":{\"169\":1}}],[\"这意味着在这个范围内的\",{\"1\":{\"219\":1}}],[\"这意味着在\",{\"1\":{\"60\":1}}],[\"这意味着它们与特定类的实例相关联\",{\"1\":{\"39\":1}}],[\"这些条件可能导致索引失效\",{\"1\":{\"162\":1}}],[\"这些问题都与事务的隔离级别有关\",{\"1\":{\"148\":1}}],[\"这些成员变量和对象是在\",{\"1\":{\"39\":1}}],[\"这些额外创建的线程在等待\",{\"1\":{\"24\":1}}],[\"这些请求需要被逐一处理和记录\",{\"1\":{\"16\":1}}],[\"这将导致\",{\"1\":{\"23\":1}}],[\"这样解决了上述问题\",{\"1\":{\"246\":1}}],[\"这样可以减少数据传输量\",{\"1\":{\"172\":1}}],[\"这样可以保证数据的完整性和一致性\",{\"1\":{\"23\":1}}],[\"这样就可以在被代理对象时候做增强\",{\"1\":{\"35\":1}}],[\"这样\",{\"1\":{\"25\":1,\"224\":1}}],[\"这样也会存在内存泄漏的风险\",{\"1\":{\"22\":1}}],[\"这样在一定程度上降低了内存泄漏的风险\",{\"1\":{\"22\":1}}],[\"而不需要外部类\",{\"1\":{\"212\":1}}],[\"而不是检索所有记录\",{\"1\":{\"170\":1}}],[\"而不是类的某个特定实例\",{\"1\":{\"40\":1}}],[\"而倒排索引\",{\"1\":{\"187\":1}}],[\"而无需访问表的实际数据\",{\"1\":{\"155\":1}}],[\"而无需指定确切的类\",{\"1\":{\"101\":1}}],[\"而每个\",{\"1\":{\"116\":1}}],[\"而将一些步骤延迟到子类中\",{\"1\":{\"104\":1,\"117\":1}}],[\"而交互少的场景\",{\"1\":{\"34\":2}}],[\"而是编译器自动生成的\",{\"1\":{\"33\":1}}],[\"而是会被放回池中重用\",{\"1\":{\"25\":1}}],[\"而\",{\"1\":{\"21\":1,\"163\":1}}],[\"是程序在内存中申请的一块用来存放数据的小空间\",{\"1\":{\"282\":1}}],[\"是一种同步非阻塞\",{\"1\":{\"252\":1}}],[\"是一种同步阻塞\",{\"1\":{\"251\":1}}],[\"是一个流行的\",{\"1\":{\"278\":1}}],[\"是一个单例\",{\"1\":{\"116\":1}}],[\"是一个基于\",{\"1\":{\"106\":1}}],[\"是一个方法级别的注解\",{\"1\":{\"77\":1}}],[\"是一个类级别的注解\",{\"1\":{\"76\":1}}],[\"是一个完整的微服务框架\",{\"1\":{\"59\":1}}],[\"是否使用缓冲\",{\"1\":{\"214\":1}}],[\"是通过分词策略\",{\"1\":{\"187\":1}}],[\"是两种常用的存储引擎\",{\"1\":{\"156\":1}}],[\"是指不包含可变成员变量的对象\",{\"1\":{\"73\":1}}],[\"是指包含可变成员变量的对象\",{\"1\":{\"72\":1}}],[\"是实现依赖注入\",{\"1\":{\"67\":1}}],[\"是\",{\"1\":{\"58\":1,\"62\":1,\"164\":1,\"214\":1,\"277\":2}}],[\"是基于模型\",{\"1\":{\"74\":1}}],[\"是基于\",{\"1\":{\"57\":1,\"261\":2}}],[\"是强引用\",{\"0\":{\"23\":1},\"1\":{\"21\":1}}],[\"是弱引用\",{\"0\":{\"22\":1},\"1\":{\"21\":1}}],[\"是懒惰的\",{\"1\":{\"18\":1}}],[\"的包管理器\",{\"1\":{\"277\":1}}],[\"的执行环境\",{\"1\":{\"277\":1}}],[\"的元素个数小于\",{\"1\":{\"259\":1,\"260\":1}}],[\"的元素大小小于\",{\"1\":{\"258\":1}}],[\"的使用过程中\",{\"1\":{\"222\":1}}],[\"的技术\",{\"1\":{\"219\":1}}],[\"的形式调用\",{\"1\":{\"217\":1}}],[\"的情况\",{\"1\":{\"181\":1}}],[\"的输出结果中\",{\"1\":{\"181\":1}}],[\"的否定形式\",{\"1\":{\"170\":1}}],[\"的性能差不多\",{\"1\":{\"167\":1}}],[\"的作者是$\",{\"1\":{\"135\":1}}],[\"的作用域\",{\"1\":{\"83\":1}}],[\"的前端控制器\",{\"1\":{\"122\":1}}],[\"的方法\",{\"1\":{\"117\":1}}],[\"的创建逻辑\",{\"1\":{\"115\":1}}],[\"的应用开发\",{\"1\":{\"106\":1}}],[\"的代理模式\",{\"1\":{\"103\":1}}],[\"的单例模式\",{\"1\":{\"102\":1}}],[\"的sql\",{\"1\":{\"99\":1}}],[\"的态度\",{\"1\":{\"98\":1}}],[\"的实例化需要特定的配置或状态时\",{\"1\":{\"85\":1}}],[\"的初始化\",{\"1\":{\"80\":1}}],[\"的线程安全性是一个重要的考虑因素\",{\"1\":{\"71\":1}}],[\"的线程安全性\",{\"0\":{\"71\":1}}],[\"的属性赋值\",{\"1\":{\"70\":1}}],[\"的完整生命周期流程\",{\"1\":{\"70\":1}}],[\"的生命周期与\",{\"1\":{\"86\":1,\"87\":1}}],[\"的生命周期\",{\"0\":{\"70\":1}}],[\"的自动配置机制是其核心特性之一\",{\"1\":{\"65\":1}}],[\"的能力\",{\"1\":{\"60\":1}}],[\"的关系\",{\"0\":{\"60\":1}}],[\"的特性简化了微服务的开发\",{\"1\":{\"59\":1}}],[\"的扩展方法\",{\"1\":{\"55\":1}}],[\"的配置\",{\"1\":{\"55\":1}}],[\"的安全性\",{\"1\":{\"37\":1}}],[\"的大小创建相应数量的线程来执行任务\",{\"1\":{\"24\":1}}],[\"的键\",{\"0\":{\"22\":1}}],[\"的\",{\"0\":{\"181\":1},\"1\":{\"21\":1,\"22\":1,\"104\":1,\"122\":1,\"186\":1,\"219\":1}}],[\"的区别\",{\"0\":{\"56\":1,\"61\":1,\"164\":1,\"168\":1,\"207\":1},\"1\":{\"18\":1}}],[\"移除线程和判断是否补充线程\",{\"1\":{\"20\":1}}],[\"while\",{\"0\":{\"272\":1},\"1\":{\"272\":1}}],[\"where\",{\"1\":{\"162\":5,\"171\":2,\"182\":1}}],[\"world\",{\"1\":{\"238\":1,\"241\":2}}],[\"work\",{\"1\":{\"24\":1}}],[\"worker\",{\"1\":{\"20\":1}}],[\"war\",{\"1\":{\"57\":1,\"107\":1}}],[\"write\",{\"1\":{\"52\":1,\"134\":2,\"135\":1,\"284\":1,\"285\":1}}],[\"wrong\",{\"1\":{\"18\":1,\"25\":1}}],[\"web\",{\"1\":{\"45\":1,\"58\":3,\"60\":3,\"62\":1,\"63\":1,\"74\":1,\"107\":3}}],[\"weak\",{\"0\":{\"22\":1},\"1\":{\"24\":1}}],[\"丢弃阻塞队列中最靠前的任务\",{\"1\":{\"19\":1}}],[\"默认也是单例的\",{\"1\":{\"116\":1}}],[\"默认扫描的是启动类所在的当前目录\",{\"1\":{\"112\":1}}],[\"默认是单例的\",{\"1\":{\"102\":1}}],[\"默认注入方式为\",{\"1\":{\"69\":1}}],[\"默认的注入方式为\",{\"1\":{\"69\":1}}],[\"默认返回\",{\"1\":{\"62\":1}}],[\"默认使用持久连接\",{\"1\":{\"124\":1}}],[\"默认使用非持久连接\",{\"1\":{\"124\":1}}],[\"默认使用\",{\"1\":{\"60\":1}}],[\"默认策略\",{\"1\":{\"19\":1}}],[\"默认无界\",{\"1\":{\"18\":1}}],[\"拒绝策略\",{\"0\":{\"19\":1}}],[\"头尾\",{\"1\":{\"18\":1}}],[\"需要处理\",{\"1\":{\"186\":1}}],[\"需要引入第三方组件\",{\"1\":{\"185\":1}}],[\"需要在数据库配置中开启慢查询日志\",{\"1\":{\"178\":1}}],[\"需要定义主键的生成策略\",{\"1\":{\"93\":1}}],[\"需要通过视图解析器将模型数据渲染到页面上\",{\"1\":{\"63\":1}}],[\"需要特别注意线程池的使用场景\",{\"1\":{\"25\":1}}],[\"需要是提前创建好的\",{\"1\":{\"18\":1}}],[\"需要提前初始化\",{\"1\":{\"18\":1}}],[\"入队会生成新\",{\"1\":{\"18\":1}}],[\"入队操作\",{\"1\":{\"18\":1}}],[\"内部成员\",{\"1\":{\"215\":4}}],[\"内部类\",{\"0\":{\"212\":1},\"1\":{\"210\":1}}],[\"内部的\",{\"1\":{\"194\":1}}],[\"内部使用\",{\"1\":{\"18\":1}}],[\"内外表做哈希连接\",{\"1\":{\"166\":1}}],[\"内容\",{\"1\":{\"122\":2}}],[\"内置\",{\"1\":{\"107\":1}}],[\"内置服务器\",{\"1\":{\"107\":1}}],[\"内嵌了\",{\"1\":{\"57\":1}}],[\"内存\",{\"1\":{\"282\":1}}],[\"内存中\",{\"1\":{\"214\":1}}],[\"内存操作\",{\"1\":{\"176\":1}}],[\"内存泄漏\",{\"1\":{\"22\":1}}],[\"内存管理\",{\"1\":{\"18\":1}}],[\"底层是数组\",{\"1\":{\"18\":1}}],[\"底层是链表\",{\"1\":{\"18\":1}}],[\"底层数据结构\",{\"1\":{\"18\":1}}],[\"比较运算符\",{\"0\":{\"231\":1}}],[\"比较对象的内存地址是否相等\",{\"1\":{\"207\":1}}],[\"比较数值是否相等\",{\"1\":{\"207\":1}}],[\"比较栈中的值\",{\"1\":{\"207\":1}}],[\"比较可能导致索引失效\",{\"1\":{\"162\":1}}],[\"比如\",{\"1\":{\"145\":1}}],[\"比\",{\"1\":{\"16\":1,\"181\":1}}],[\"每过一段时间抽取设置了过期的key检测是否过期\",{\"1\":{\"255\":1}}],[\"每次修改\",{\"1\":{\"184\":1}}],[\"每次请求后都会关闭\",{\"1\":{\"124\":1}}],[\"每次请求该\",{\"1\":{\"85\":1}}],[\"每次请求都会创建一个新的\",{\"1\":{\"85\":1}}],[\"每一个\",{\"1\":{\"87\":1}}],[\"每一次\",{\"1\":{\"86\":1}}],[\"每个连接都需要一个独立的线程来处理\",{\"1\":{\"251\":1}}],[\"每个主节点负责对应哈希槽\",{\"1\":{\"246\":1}}],[\"每个由\",{\"1\":{\"84\":1}}],[\"每个实例都会有自己的副本\",{\"1\":{\"39\":1}}],[\"每个插入操作必须等到另一个线程调用移除操作\",{\"1\":{\"17\":1}}],[\"每个插入操作都必须等待一个移出操作\",{\"1\":{\"11\":1}}],[\"每天会接收到大量的订单请求\",{\"1\":{\"16\":1}}],[\"公平性\",{\"1\":{\"15\":1,\"16\":1}}],[\"线程首先发起\",{\"1\":{\"252\":1}}],[\"线程依然是阻塞的\",{\"1\":{\"252\":1}}],[\"线程在等待\",{\"1\":{\"251\":1}}],[\"线程创建时的初始化阶段\",{\"1\":{\"25\":1}}],[\"线程回收和补充机制确保线程池的动态调整和资源优化\",{\"1\":{\"20\":1}}],[\"线程循环获取任务\",{\"1\":{\"20\":1}}],[\"线程安全\",{\"1\":{\"15\":1,\"16\":1,\"18\":1}}],[\"线程池中的线程在完成任务后不会立即销毁\",{\"1\":{\"25\":1}}],[\"线程池将继续创建\",{\"1\":{\"24\":1}}],[\"线程池会根据\",{\"1\":{\"24\":1}}],[\"线程池任务提交及执行流程\",{\"0\":{\"24\":1}}],[\"线程池通过\",{\"1\":{\"20\":1}}],[\"线程池怎么实现线程自动回收\",{\"0\":{\"20\":1}}],[\"线程池不会保留核心线程\",{\"1\":{\"11\":1}}],[\"线程池种类\",{\"0\":{\"8\":1}}],[\"例如添加\",{\"1\":{\"107\":1}}],[\"例如使用一个\",{\"1\":{\"18\":1}}],[\"例如一个大型电商平台的订单处理系统\",{\"1\":{\"16\":1}}],[\"例如\",{\"1\":{\"15\":1,\"94\":1,\"97\":1,\"223\":2,\"225\":1,\"226\":1}}],[\"aof\",{\"1\":{\"254\":1,\"262\":3}}],[\"aop\",{\"1\":{\"81\":1,\"103\":2,\"120\":1}}],[\"avg\",{\"1\":{\"182\":1}}],[\"age是变量名\",{\"1\":{\"283\":1}}],[\"age\",{\"1\":{\"162\":3,\"283\":1,\"284\":3,\"285\":4,\"286\":1}}],[\"acid\",{\"0\":{\"160\":1},\"1\":{\"156\":1,\"160\":2}}],[\"acks\",{\"1\":{\"223\":1}}],[\"ack\",{\"1\":{\"126\":5,\"127\":4,\"280\":1}}],[\"advisoradapter\",{\"1\":{\"121\":1}}],[\"author\",{\"1\":{\"134\":2,\"135\":2}}],[\"authenticationmanager\",{\"1\":{\"119\":1}}],[\"autowired\",{\"0\":{\"69\":1},\"1\":{\"69\":1,\"114\":1}}],[\"a方法中调用了b方法\",{\"1\":{\"98\":1}}],[\"aware\",{\"1\":{\"70\":1}}],[\"await\",{\"1\":{\"12\":1}}],[\"anaconda\",{\"0\":{\"278\":1},\"1\":{\"278\":1}}],[\"annotations\",{\"1\":{\"67\":1}}],[\"answer\",{\"1\":{\"21\":1}}],[\"applicationlistener\",{\"1\":{\"118\":1}}],[\"applicationevent\",{\"1\":{\"118\":1}}],[\"application\",{\"1\":{\"107\":2}}],[\"applicationcontext\",{\"1\":{\"55\":1,\"115\":1,\"116\":1}}],[\"apis\",{\"1\":{\"45\":1}}],[\"api\",{\"1\":{\"37\":2,\"62\":1,\"91\":1}}],[\"allkeys\",{\"1\":{\"256\":3}}],[\"all\",{\"1\":{\"172\":4,\"181\":1}}],[\"alert\",{\"1\":{\"52\":1}}],[\"alt\",{\"1\":{\"49\":1}}],[\"a\",{\"1\":{\"49\":1,\"98\":1}}],[\"array\",{\"0\":{\"142\":1}}],[\"arrayblockingqueue性能更好\",{\"1\":{\"16\":1}}],[\"arrayblockingqueue\",{\"0\":{\"15\":1},\"1\":{\"18\":6}}],[\"args\",{\"1\":{\"28\":1}}],[\"abortpolicy\",{\"1\":{\"19\":1}}],[\"计算机中存储数据的地方\",{\"1\":{\"282\":1}}],[\"计算机网络\",{\"0\":{\"123\":1}}],[\"计算机技术\",{\"1\":{\"0\":1}}],[\"计算型代码\",{\"1\":{\"13\":1}}],[\"2024\",{\"1\":{\"171\":1}}],[\"2000\",{\"1\":{\"162\":1}}],[\"20\",{\"1\":{\"162\":1}}],[\"2\",{\"0\":{\"179\":1},\"1\":{\"27\":1,\"28\":2,\"162\":1,\"235\":1,\"246\":2}}],[\"2n+1\",{\"1\":{\"13\":1}}],[\"24\",{\"1\":{\"0\":1,\"285\":1,\"286\":1}}],[\"ddos\",{\"0\":{\"279\":1},\"1\":{\"279\":1}}],[\"durable\",{\"1\":{\"225\":1}}],[\"drop\",{\"0\":{\"163\":1},\"1\":{\"163\":3}}],[\"date\",{\"0\":{\"147\":1},\"1\":{\"171\":1}}],[\"dao接口工作原理\",{\"0\":{\"99\":1}}],[\"dns\",{\"1\":{\"124\":3}}],[\"dirty\",{\"0\":{\"149\":1}}],[\"di\",{\"1\":{\"114\":1}}],[\"distributed\",{\"1\":{\"279\":1}}],[\"distinct\",{\"1\":{\"182\":1}}],[\"dispatcherservlet把返回的model传给视图\",{\"1\":{\"74\":1}}],[\"dispatcherservlet调用handlermapping\",{\"1\":{\"74\":1}}],[\"dispatcherservlet拦截请求并作为前端控制器\",{\"1\":{\"74\":1}}],[\"dispatcherservlet\",{\"1\":{\"74\":2,\"122\":4}}],[\"discardpolicy\",{\"1\":{\"19\":1}}],[\"discardoldestpolicy\",{\"1\":{\"19\":1}}],[\"document\",{\"1\":{\"52\":1,\"134\":2,\"135\":1,\"284\":1,\"285\":1}}],[\"denial\",{\"1\":{\"279\":1}}],[\"default\",{\"1\":{\"215\":1,\"217\":1,\"270\":1}}],[\"deferredimportselector\",{\"1\":{\"65\":1}}],[\"deferred\",{\"1\":{\"65\":1}}],[\"deliverymode\",{\"1\":{\"225\":1}}],[\"delete\",{\"0\":{\"163\":1},\"1\":{\"163\":3}}],[\"delayedworkqueue\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"destruction\",{\"1\":{\"70\":1}}],[\"dependency\",{\"1\":{\"67\":1,\"79\":1}}],[\"decodedstring\",{\"1\":{\"5\":2}}],[\"decodedbytes\",{\"1\":{\"5\":2}}],[\"decode\",{\"1\":{\"5\":2}}],[\"db读写\",{\"1\":{\"13\":1}}],[\"一段时间将内存数据以快照形式保存在磁盘中\",{\"1\":{\"254\":1}}],[\"一个线程可以管理多个网络连接\",{\"1\":{\"253\":1}}],[\"一个事务读取到了另一个事务未提交的数据\",{\"1\":{\"149\":1}}],[\"一真即真\",{\"1\":{\"232\":1}}],[\"一假即假\",{\"1\":{\"232\":1}}],[\"一元运算符\",{\"0\":{\"230\":1},\"1\":{\"235\":1}}],[\"一致性\",{\"1\":{\"160\":1,\"247\":1}}],[\"一旦\",{\"1\":{\"124\":1}}],[\"一般来说\",{\"1\":{\"13\":2}}],[\"一些好用的工具类\",{\"1\":{\"6\":1}}],[\"lfu\",{\"1\":{\"256\":4}}],[\"lru\",{\"1\":{\"256\":4}}],[\"list\",{\"0\":{\"259\":1},\"1\":{\"248\":1,\"259\":2,\"261\":1}}],[\"like\",{\"1\":{\"162\":2}}],[\"like操作\",{\"1\":{\"162\":1}}],[\"linkedblockingqueue\",{\"0\":{\"16\":1},\"1\":{\"9\":1,\"10\":1,\"18\":6}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"9\":1,\"10\":1}}],[\"let是关键字\",{\"1\":{\"283\":1}}],[\"let不允许多次声名同一个变量\",{\"1\":{\"283\":1}}],[\"let\",{\"1\":{\"134\":2,\"135\":2,\"136\":1,\"143\":1,\"145\":1,\"234\":1,\"283\":1,\"284\":1,\"285\":1,\"286\":2}}],[\"lazy注解\",{\"0\":{\"80\":1},\"1\":{\"80\":1}}],[\"lab提供的api\",{\"1\":{\"35\":1}}],[\"latch\",{\"1\":{\"12\":3}}],[\"loop\",{\"1\":{\"165\":1}}],[\"log\",{\"1\":{\"52\":1,\"143\":1,\"145\":1}}],[\"loading\",{\"0\":{\"31\":1}}],[\"locked\",{\"1\":{\"28\":4}}],[\"lock2\",{\"1\":{\"28\":5}}],[\"lock1\",{\"1\":{\"28\":5}}],[\"明确线程池的各项参数\",{\"1\":{\"12\":1}}],[\"可用性\",{\"1\":{\"247\":1}}],[\"可用性偏弱\",{\"1\":{\"246\":1}}],[\"可存在于文件\",{\"1\":{\"214\":1}}],[\"可恢复的异常\",{\"1\":{\"213\":1}}],[\"可变长度\",{\"1\":{\"204\":1}}],[\"可变\",{\"1\":{\"194\":1}}],[\"可变性\",{\"0\":{\"194\":1,\"204\":1}}],[\"可重复读\",{\"1\":{\"152\":1}}],[\"可能在性能上不是最优的\",{\"1\":{\"169\":1}}],[\"可能导致索引失效\",{\"1\":{\"162\":3}}],[\"可能出现脏读\",{\"1\":{\"152\":1}}],[\"可能包括调用服务层和数据访问层\",{\"1\":{\"122\":1}}],[\"可能会出现脏读\",{\"1\":{\"148\":1}}],[\"可能会创建大量的线程\",{\"1\":{\"12\":1}}],[\"可能会堆积大量的请求\",{\"1\":{\"12\":1}}],[\"可以先使用在声明\",{\"1\":{\"290\":1}}],[\"可以保证数据强一致性\",{\"1\":{\"247\":1}}],[\"可以用来描述代码的功能\",{\"1\":{\"241\":1}}],[\"可以用来进行一些定时任务\",{\"1\":{\"112\":1}}],[\"可以在配置新的\",{\"1\":{\"224\":1}}],[\"可以直接用\",{\"1\":{\"217\":1}}],[\"可以直接使用内部类\",{\"1\":{\"212\":1}}],[\"可以简单分为两种情况\",{\"1\":{\"209\":1}}],[\"可以采用以下几种方法\",{\"1\":{\"183\":1}}],[\"可以按照以下步骤进行排查和优化\",{\"1\":{\"177\":1}}],[\"可以考虑使用\",{\"1\":{\"172\":1}}],[\"可以确保查询只返回需要的列\",{\"1\":{\"172\":1}}],[\"可以删除表中的全部或部分数据\",{\"1\":{\"163\":1}}],[\"可以选择\",{\"1\":{\"161\":1}}],[\"可以维护数据的引用完整性\",{\"1\":{\"159\":1}}],[\"可以复用同一个\",{\"1\":{\"124\":1}}],[\"可以让任意类匹配某接口\",{\"1\":{\"121\":1}}],[\"可以实现applicationrunner\",{\"1\":{\"112\":1}}],[\"可以指定在遇到特定异常时进行回滚\",{\"1\":{\"97\":1}}],[\"可以指定使用公平策略还是非公平策略\",{\"1\":{\"17\":1}}],[\"可以指定使用公平锁或者非公平锁\",{\"1\":{\"15\":1}}],[\"可以使用\",{\"1\":{\"94\":1,\"261\":1}}],[\"可以被多个地方安全共享时\",{\"1\":{\"84\":1}}],[\"可以被应用程序使用了\",{\"1\":{\"70\":1}}],[\"可以生成原始\",{\"1\":{\"81\":1}}],[\"可以延迟\",{\"1\":{\"80\":1}}],[\"可以针对不同的异常类型定义不同的处理逻辑\",{\"1\":{\"77\":1}}],[\"可以集中处理特定类型的异常\",{\"1\":{\"76\":1}}],[\"可以通过设置手动提交\",{\"1\":{\"226\":1}}],[\"可以通过设置\",{\"1\":{\"223\":1,\"225\":1}}],[\"可以通过name属性来显式指定名称\",{\"1\":{\"69\":1}}],[\"可以通过\",{\"1\":{\"69\":1,\"223\":1}}],[\"可以返回视图\",{\"1\":{\"63\":1}}],[\"可以返回modelandview\",{\"1\":{\"63\":1}}],[\"可以与\",{\"1\":{\"58\":1}}],[\"可减少任务执行的等待时间\",{\"1\":{\"17\":1}}],[\"可缓存线程池\",{\"0\":{\"11\":1}}],[\"和exception\",{\"1\":{\"213\":1}}],[\"和头部信息来处理请求\",{\"1\":{\"124\":1}}],[\"和配置类的重要手段\",{\"1\":{\"67\":1}}],[\"和\",{\"0\":{\"207\":1,\"250\":1},\"1\":{\"12\":1,\"16\":1,\"18\":1,\"22\":1,\"56\":1,\"61\":1,\"62\":1,\"75\":1,\"109\":1,\"112\":1,\"124\":1,\"126\":1,\"156\":1,\"163\":2,\"164\":1,\"168\":1,\"182\":1,\"194\":1,\"219\":1,\"221\":1,\"250\":1}}],[\"创建定时器\",{\"1\":{\"255\":1}}],[\"创建\",{\"1\":{\"55\":1}}],[\"创建一个新的线程\",{\"1\":{\"25\":1}}],[\"创建额外线程\",{\"1\":{\"24\":1}}],[\"创建线程执行任务\",{\"1\":{\"24\":1}}],[\"创建线程池\",{\"1\":{\"12\":1}}],[\"创建节点的时候添加数据\",{\"1\":{\"18\":1}}],[\"创建固定线程数的线程池\",{\"0\":{\"9\":1}}],[\"不合理\",{\"1\":{\"290\":2}}],[\"不能用关键字\",{\"1\":{\"288\":1}}],[\"不能以数字开头\",{\"1\":{\"242\":1}}],[\"不遵守不会报错\",{\"1\":{\"287\":1}}],[\"不遵守会报错\",{\"1\":{\"287\":1}}],[\"不满足条件执行的代码\",{\"1\":{\"269\":1}}],[\"不淘汰任何键\",{\"1\":{\"256\":1}}],[\"不淘汰\",{\"1\":{\"256\":1}}],[\"不安全\",{\"1\":{\"254\":1}}],[\"不是线程安全的\",{\"1\":{\"195\":1}}],[\"不是开发者写的\",{\"1\":{\"33\":1}}],[\"不可变长度\",{\"1\":{\"204\":1,\"205\":1}}],[\"不可变\",{\"1\":{\"194\":1}}],[\"不可重复读和幻读\",{\"1\":{\"152\":2}}],[\"不可重复读和幻读等问题\",{\"1\":{\"148\":1}}],[\"不可重复读\",{\"0\":{\"150\":1}}],[\"不需要惊醒加锁\",{\"1\":{\"249\":1}}],[\"不需要接入到业务系统中\",{\"1\":{\"186\":1}}],[\"不需要打成\",{\"1\":{\"107\":1}}],[\"不会进行去重操作\",{\"1\":{\"172\":1}}],[\"不使用的变量会回收空间\",{\"1\":{\"282\":1}}],[\"不使用\",{\"1\":{\"172\":1}}],[\"不等于比较\",{\"1\":{\"162\":1}}],[\"不完全支持\",{\"1\":{\"160\":1}}],[\"不支持事务和外键\",{\"1\":{\"174\":1,\"176\":1}}],[\"不支持事务处理\",{\"1\":{\"157\":1}}],[\"不支持\",{\"1\":{\"163\":1}}],[\"不支持外键约束\",{\"1\":{\"159\":1}}],[\"不支持在构造函数或参数上使用\",{\"1\":{\"69\":1}}],[\"不经过视图解析器处理\",{\"1\":{\"64\":1}}],[\"不建议用\",{\"1\":{\"12\":1}}],[\"不存储元素的阻塞队列\",{\"1\":{\"11\":1,\"17\":1}}],[\"阻塞队列\",{\"0\":{\"14\":1}}],[\"阻塞队列为\",{\"1\":{\"11\":1}}],[\"阻塞队列是\",{\"1\":{\"9\":1,\"10\":1}}],[\"理论上可以创建无限多的线程\",{\"1\":{\"11\":1}}],[\"01\",{\"1\":{\"171\":2}}],[\"0\",{\"1\":{\"11\":2,\"32\":1,\"124\":1,\"233\":1,\"234\":1}}],[\"0l\",{\"1\":{\"9\":1,\"10\":1}}],[\"10\",{\"1\":{\"162\":1}}],[\"1000\",{\"1\":{\"28\":2}}],[\"127\",{\"1\":{\"219\":2}}],[\"128\",{\"1\":{\"219\":2,\"259\":1,\"260\":1}}],[\"12\",{\"1\":{\"143\":1,\"145\":2,\"285\":1}}],[\"1\",{\"0\":{\"178\":1},\"1\":{\"10\":3,\"27\":1,\"28\":2,\"124\":3,\"235\":1,\"246\":2}}],[\"163邮箱\",{\"1\":{\"1\":1,\"4\":1}}],[\"mq\",{\"0\":{\"220\":1,\"222\":1,\"223\":1},\"1\":{\"222\":1}}],[\"merge\",{\"1\":{\"181\":2}}],[\"memory\",{\"0\":{\"176\":1}}],[\"method的\",{\"1\":{\"70\":1}}],[\"method\",{\"1\":{\"70\":2}}],[\"mysql\",{\"0\":{\"183\":1},\"1\":{\"156\":1,\"183\":1,\"184\":2,\"186\":1}}],[\"myisam\",{\"0\":{\"156\":1,\"174\":1},\"1\":{\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":2}}],[\"mybatis运行时会为dao接口生成动态代理对象\",{\"1\":{\"99\":1}}],[\"modelandview\",{\"1\":{\"74\":2,\"122\":1}}],[\"model\",{\"1\":{\"74\":2}}],[\"mvc\",{\"0\":{\"56\":1,\"58\":1,\"60\":1,\"74\":1,\"122\":1},\"1\":{\"56\":1,\"58\":2,\"60\":3,\"61\":1,\"74\":2,\"122\":2}}],[\"male\",{\"1\":{\"286\":1}}],[\"manualacknow\",{\"1\":{\"226\":1}}],[\"manual\",{\"1\":{\"226\":1}}],[\"mandatory\",{\"1\":{\"98\":1,\"223\":1}}],[\"maven\",{\"1\":{\"107\":3}}],[\"mark\",{\"1\":{\"34\":1}}],[\"main\",{\"1\":{\"28\":1}}],[\"maximumpoolsize\",{\"1\":{\"24\":2}}],[\"max\",{\"1\":{\"9\":1,\"10\":1,\"11\":2,\"12\":2}}],[\"milliseconds\",{\"1\":{\"9\":1,\"10\":1}}],[\"switch\",{\"1\":{\"270\":1}}],[\"switch语句\",{\"0\":{\"270\":1}}],[\"sweep\",{\"1\":{\"34\":1}}],[\"skip\",{\"1\":{\"261\":1}}],[\"sorted\",{\"0\":{\"261\":1}}],[\"soft\",{\"1\":{\"24\":1}}],[\"sum\",{\"1\":{\"182\":1}}],[\"supported\",{\"1\":{\"98\":1}}],[\"supports\",{\"1\":{\"98\":1}}],[\"sql\",{\"0\":{\"172\":1,\"177\":1,\"180\":1,\"182\":1},\"1\":{\"163\":1,\"164\":1,\"168\":1,\"172\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":2}}],[\"singleton\",{\"0\":{\"84\":1,\"102\":1},\"1\":{\"81\":3,\"84\":1}}],[\"singlethreadexecutor\",{\"1\":{\"16\":1}}],[\"singlethreadpool\",{\"1\":{\"12\":1}}],[\"spring事务传播行为\",{\"0\":{\"98\":1}}],[\"spring\",{\"0\":{\"55\":1,\"56\":2,\"57\":1,\"58\":1,\"59\":1,\"60\":2,\"65\":1,\"67\":1,\"74\":1,\"83\":1,\"100\":1,\"106\":1,\"108\":1,\"113\":1,\"122\":1},\"1\":{\"55\":1,\"56\":3,\"57\":4,\"58\":4,\"59\":3,\"60\":6,\"61\":1,\"65\":5,\"66\":2,\"67\":1,\"68\":1,\"69\":1,\"70\":2,\"71\":1,\"74\":1,\"75\":1,\"79\":2,\"82\":2,\"83\":1,\"84\":2,\"85\":1,\"88\":1,\"100\":2,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":4,\"108\":2,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"122\":3}}],[\"springbootconfiguration\",{\"0\":{\"110\":1},\"1\":{\"109\":1}}],[\"springbootconfiguration注解引入\",{\"1\":{\"65\":1}}],[\"springbootapplication\",{\"0\":{\"109\":1}}],[\"springboot\",{\"0\":{\"54\":1}}],[\"shift\",{\"1\":{\"49\":1}}],[\"scope\",{\"1\":{\"83\":1}}],[\"scavenge\",{\"1\":{\"34\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"18\":1}}],[\"sleep\",{\"1\":{\"28\":2}}],[\"syn\",{\"1\":{\"126\":6}}],[\"synchronized\",{\"1\":{\"28\":4}}],[\"synchronousqueue\",{\"0\":{\"17\":1},\"1\":{\"11\":1}}],[\"synchronousqueue<runnable>\",{\"1\":{\"11\":1}}],[\"syncdeadlock\",{\"1\":{\"28\":1}}],[\"system\",{\"1\":{\"28\":4,\"181\":1}}],[\"select\",{\"1\":{\"171\":2,\"172\":2,\"182\":1,\"252\":1,\"253\":1}}],[\"selector\",{\"1\":{\"65\":1,\"111\":1}}],[\"session\",{\"0\":{\"87\":1},\"1\":{\"87\":1}}],[\"service\",{\"1\":{\"112\":1,\"279\":1}}],[\"server\",{\"1\":{\"34\":1,\"78\":1}}],[\"serializable\",{\"1\":{\"152\":1}}],[\"serial\",{\"1\":{\"34\":2}}],[\"setapplicationcontext等\",{\"1\":{\"70\":1}}],[\"set\",{\"0\":{\"260\":1,\"261\":1},\"1\":{\"22\":1,\"260\":2}}],[\"seconds\",{\"1\":{\"11\":1}}],[\"s\",{\"1\":{\"5\":3,\"34\":1}}],[\"starter\",{\"1\":{\"107\":2}}],[\"start\",{\"1\":{\"28\":2}}],[\"static关键字用于修饰成员变量\",{\"1\":{\"210\":1}}],[\"static\",{\"0\":{\"39\":1,\"40\":1,\"210\":1},\"1\":{\"5\":2,\"9\":1,\"10\":1,\"11\":1,\"28\":3,\"32\":1,\"41\":2,\"217\":2}}],[\"strategy\",{\"1\":{\"94\":1}}],[\"strong\",{\"1\":{\"24\":1}}],[\"str\",{\"1\":{\"5\":4}}],[\"stringbuffer因为加了锁影响性能\",{\"1\":{\"196\":1}}],[\"stringbuffer\",{\"0\":{\"193\":1},\"1\":{\"194\":1,\"195\":1}}],[\"stringbuilder\",{\"0\":{\"193\":1},\"1\":{\"194\":1,\"195\":1}}],[\"string\",{\"0\":{\"132\":1,\"193\":1,\"209\":1},\"1\":{\"5\":7,\"28\":1,\"194\":1,\"195\":1,\"261\":1}}],[\"random\",{\"1\":{\"256\":2}}],[\"rabbittemplate\",{\"1\":{\"224\":1}}],[\"rabbitmq\",{\"1\":{\"185\":1,\"221\":2,\"223\":2,\"224\":1,\"225\":1,\"226\":1}}],[\"rdb快照内容和增量aof修改命令存在一起\",{\"1\":{\"254\":1}}],[\"rdb\",{\"1\":{\"254\":1}}],[\"rocketmq\",{\"1\":{\"221\":2}}],[\"rollbackfor\",{\"1\":{\"97\":1}}],[\"root\",{\"1\":{\"22\":1}}],[\"ref\",{\"1\":{\"181\":3}}],[\"reference\",{\"0\":{\"22\":1},\"1\":{\"24\":4}}],[\"repeatable\",{\"0\":{\"150\":1},\"1\":{\"152\":1}}],[\"repository\",{\"1\":{\"112\":1}}],[\"read\",{\"0\":{\"149\":1,\"150\":1,\"151\":1},\"1\":{\"152\":3,\"251\":1,\"252\":3}}],[\"redis淘汰策略\",{\"0\":{\"256\":1}}],[\"redis过期策略\",{\"0\":{\"255\":1}}],[\"redis持久机制\",{\"0\":{\"254\":1}}],[\"redis快的原因\",{\"0\":{\"249\":1}}],[\"redis存储结构\",{\"0\":{\"248\":1}}],[\"redis有几种集群模式\",{\"0\":{\"246\":1}}],[\"redis\",{\"0\":{\"245\":1,\"257\":1},\"1\":{\"117\":1,\"258\":2,\"259\":2,\"260\":2,\"262\":1}}],[\"redistemplate\",{\"1\":{\"117\":1}}],[\"required\",{\"1\":{\"98\":1}}],[\"require\",{\"1\":{\"98\":1}}],[\"request\",{\"0\":{\"86\":1},\"1\":{\"78\":1}}],[\"responseentity<>\",{\"1\":{\"78\":2}}],[\"responseentity<string>\",{\"1\":{\"78\":2}}],[\"responsebody注解用于将返回对象直接转换为\",{\"1\":{\"64\":1}}],[\"responsebody\",{\"0\":{\"64\":1}}],[\"responsebody的组合注解\",{\"1\":{\"62\":1}}],[\"resource\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"restcontroller\",{\"0\":{\"61\":1,\"62\":1},\"1\":{\"61\":1,\"62\":1,\"76\":1}}],[\"restful\",{\"1\":{\"58\":1,\"62\":1}}],[\"rehash\",{\"1\":{\"26\":1}}],[\"remove\",{\"1\":{\"22\":1,\"26\":1}}],[\"reentrantlock\",{\"1\":{\"18\":1}}],[\"reentrantlock在操作前后加锁来保证线程安全\",{\"1\":{\"15\":1}}],[\"return\",{\"1\":{\"5\":4,\"9\":1,\"10\":1,\"11\":1,\"78\":2,\"223\":1}}],[\"runtimeexception和其他\",{\"1\":{\"213\":1}}],[\"runtimeexception\",{\"1\":{\"5\":2,\"213\":1}}],[\"ttl\",{\"1\":{\"256\":2}}],[\"type\",{\"0\":{\"181\":1},\"1\":{\"181\":1}}],[\"typeof\",{\"1\":{\"143\":1,\"145\":1}}],[\"tcp四次挥手\",{\"0\":{\"127\":1}}],[\"tcp连接就建立成功\",{\"1\":{\"126\":1}}],[\"tcp三次握手\",{\"0\":{\"126\":1}}],[\"tcp三次握手与四次挥手\",{\"0\":{\"125\":1}}],[\"tcp\",{\"1\":{\"124\":6,\"126\":5,\"127\":4,\"280\":2}}],[\"thymeleaf\",{\"1\":{\"122\":1}}],[\"thread\",{\"1\":{\"28\":10}}],[\"threadlocal改进的框架或者工具\",{\"0\":{\"26\":1}}],[\"threadlocal中set的值\",{\"1\":{\"24\":1,\"25\":1}}],[\"threadlocal\",{\"1\":{\"23\":1,\"26\":2}}],[\"threadlocalmap的值确保了只要threadlocal对象存在\",{\"1\":{\"23\":1}}],[\"threadlocalmap的值\",{\"0\":{\"23\":1}}],[\"threadlocalmap的引用类型\",{\"0\":{\"21\":1}}],[\"threadlocalmap\",{\"0\":{\"22\":1},\"1\":{\"21\":1,\"22\":1}}],[\"threadpoolexecutor\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"throwable有两个直接的子类\",{\"1\":{\"213\":1}}],[\"throw\",{\"1\":{\"5\":2}}],[\"template\",{\"0\":{\"104\":1}}],[\"truncate\",{\"0\":{\"163\":1},\"1\":{\"163\":3}}],[\"true\",{\"1\":{\"136\":1,\"165\":2}}],[\"transactional\",{\"0\":{\"97\":1},\"1\":{\"97\":2}}],[\"transient\",{\"0\":{\"95\":1},\"1\":{\"95\":1}}],[\"try\",{\"1\":{\"5\":2,\"28\":2}}],[\"tomcat\",{\"1\":{\"57\":1,\"107\":1}}],[\"t2\",{\"1\":{\"28\":2}}],[\"t1\",{\"1\":{\"28\":2}}],[\"timeunit\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"eviction\",{\"1\":{\"256\":1}}],[\"epoll\",{\"1\":{\"253\":1}}],[\"elasticsearch倒派索引\",{\"0\":{\"187\":1}}],[\"elasticsearch\",{\"0\":{\"183\":1},\"1\":{\"183\":1,\"184\":2,\"185\":1,\"186\":1}}],[\"else\",{\"1\":{\"5\":2}}],[\"equals\",{\"0\":{\"207\":1,\"208\":1}}],[\"eq\",{\"1\":{\"181\":1}}],[\"early\",{\"1\":{\"81\":1}}],[\"error\",{\"1\":{\"78\":1,\"213\":2}}],[\"ecmascript\",{\"1\":{\"45\":1}}],[\"enableautoconfiguration\",{\"0\":{\"111\":1},\"1\":{\"109\":1}}],[\"enableconfigurationproperties注解引入\",{\"1\":{\"65\":1}}],[\"enableconfigurationproperties注解\",{\"1\":{\"65\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"65\":1}}],[\"entity\",{\"0\":{\"92\":1},\"1\":{\"92\":1}}],[\"entry\",{\"1\":{\"22\":1}}],[\"encodetostring\",{\"1\":{\"5\":1}}],[\"encode\",{\"1\":{\"5\":1}}],[\"explain\",{\"0\":{\"180\":1,\"181\":1},\"1\":{\"180\":1,\"181\":1}}],[\"exists\",{\"0\":{\"168\":1,\"170\":1},\"1\":{\"168\":1,\"170\":4,\"171\":2}}],[\"exist\",{\"0\":{\"164\":1,\"165\":1},\"1\":{\"164\":1,\"165\":3,\"167\":2}}],[\"executors\",{\"1\":{\"12\":1}}],[\"executorservice\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"exceptionhandler\",{\"0\":{\"77\":1,\"90\":1},\"1\":{\"75\":1,\"77\":2,\"78\":2,\"90\":1}}],[\"exception\",{\"1\":{\"5\":4,\"78\":3,\"97\":1,\"213\":3}}],[\"e\",{\"1\":{\"5\":4,\"28\":4,\"78\":4}}],[\"cdn\",{\"1\":{\"281\":1}}],[\"char\",{\"0\":{\"203\":1},\"1\":{\"194\":1,\"204\":1,\"205\":1,\"206\":1,\"214\":1}}],[\"c\",{\"1\":{\"171\":2}}],[\"customer\",{\"1\":{\"171\":1}}],[\"customers\",{\"1\":{\"171\":1}}],[\"customexception\",{\"1\":{\"78\":2}}],[\"css\",{\"1\":{\"124\":1}}],[\"circular\",{\"1\":{\"79\":1}}],[\"ctrl\",{\"1\":{\"48\":1}}],[\"cg\",{\"1\":{\"35\":1}}],[\"cms\",{\"1\":{\"34\":2}}],[\"cluster模式\",{\"1\":{\"246\":1}}],[\"cloud\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"client\",{\"1\":{\"34\":2}}],[\"classpath\",{\"1\":{\"111\":1}}],[\"class\",{\"1\":{\"5\":1,\"28\":1,\"32\":1,\"78\":3,\"97\":1}}],[\"cpu\",{\"1\":{\"34\":3}}],[\"cpu密集型任务\",{\"1\":{\"13\":1}}],[\"committed\",{\"1\":{\"152\":1}}],[\"commandlinerunner接口的runner方法实现\",{\"1\":{\"112\":1}}],[\"comic\",{\"1\":{\"134\":2,\"135\":2}}],[\"componentscan\",{\"0\":{\"112\":1},\"1\":{\"109\":1}}],[\"component\",{\"0\":{\"68\":1},\"1\":{\"68\":1,\"112\":1}}],[\"const\",{\"1\":{\"181\":2}}],[\"console\",{\"1\":{\"52\":1,\"143\":1,\"145\":1}}],[\"conditional注解排除无效配置类\",{\"1\":{\"65\":1}}],[\"conditional\",{\"1\":{\"65\":1,\"66\":1}}],[\"continue\",{\"1\":{\"274\":1}}],[\"controlleradvice\",{\"0\":{\"76\":1,\"89\":1},\"1\":{\"75\":1,\"76\":2,\"77\":1,\"78\":1,\"89\":1}}],[\"controller用于定义一个控制器\",{\"1\":{\"63\":1}}],[\"controller\",{\"0\":{\"61\":1,\"63\":1},\"1\":{\"61\":1,\"62\":1,\"74\":1,\"76\":1,\"112\":1,\"122\":1}}],[\"contextrefreshedevent\",{\"1\":{\"55\":1}}],[\"concurrent\",{\"1\":{\"34\":1}}],[\"corepoolsize\",{\"1\":{\"24\":3}}],[\"countdown\",{\"1\":{\"12\":1}}],[\"countdownlatch能够使一个线程在等待另外一些线程完成各自工作之后\",{\"1\":{\"12\":1}}],[\"countdownlatch\",{\"1\":{\"12\":3}}],[\"count\",{\"1\":{\"12\":1,\"182\":1}}],[\"case\",{\"1\":{\"270\":3}}],[\"canal\",{\"1\":{\"186\":1}}],[\"cache\",{\"1\":{\"81\":3}}],[\"cachedthreadpool\",{\"1\":{\"12\":1}}],[\"callerrunspolicy\",{\"1\":{\"19\":1}}],[\"catch\",{\"1\":{\"5\":2,\"28\":2}}],[\"npm\",{\"1\":{\"277\":1}}],[\"nio\",{\"0\":{\"250\":1,\"252\":1},\"1\":{\"250\":1,\"252\":1}}],[\"name\",{\"1\":{\"162\":3,\"239\":2}}],[\"num逻辑运算符短路\",{\"1\":{\"234\":1}}],[\"num\",{\"1\":{\"143\":2,\"145\":2,\"234\":3}}],[\"number\",{\"0\":{\"131\":1}}],[\"null当假的看\",{\"1\":{\"233\":1}}],[\"null\",{\"0\":{\"138\":1},\"1\":{\"5\":3,\"22\":1,\"162\":2,\"165\":1}}],[\"nested支持嵌套事务\",{\"1\":{\"98\":1}}],[\"never\",{\"1\":{\"98\":1}}],[\"newcachedthreadpool\",{\"1\":{\"11\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"10\":1}}],[\"newfixedthreadpool\",{\"1\":{\"9\":1}}],[\"new\",{\"1\":{\"5\":3,\"9\":2,\"10\":3,\"11\":2,\"12\":1,\"28\":4,\"78\":2,\"98\":1}}],[\"no\",{\"1\":{\"256\":1}}],[\"non\",{\"0\":{\"150\":1,\"252\":1}}],[\"notebook\",{\"1\":{\"278\":1}}],[\"not\",{\"0\":{\"168\":2,\"169\":1,\"170\":1},\"1\":{\"98\":1,\"162\":2,\"168\":2,\"169\":2,\"170\":4,\"171\":3,\"291\":1}}],[\"node跟npm指令有啥区别\",{\"0\":{\"277\":1}}],[\"node\",{\"1\":{\"18\":3,\"277\":4}}],[\"n+1\",{\"1\":{\"13\":1}}],[\"nthreads\",{\"1\":{\"9\":3}}],[\"group\",{\"1\":{\"182\":1}}],[\"gender\",{\"1\":{\"286\":1}}],[\"generationtype\",{\"1\":{\"94\":1}}],[\"generatedvalue\",{\"0\":{\"94\":1},\"1\":{\"94\":2}}],[\"geo\",{\"1\":{\"261\":1}}],[\"getobject\",{\"1\":{\"82\":1}}],[\"getmessage\",{\"1\":{\"78\":2}}],[\"get\",{\"1\":{\"22\":1,\"124\":1,\"280\":1}}],[\"gettask\",{\"1\":{\"20\":1}}],[\"getbytes\",{\"1\":{\"5\":1}}],[\"getencoder\",{\"1\":{\"5\":1}}],[\"getdecoder\",{\"1\":{\"5\":1}}],[\"global\",{\"1\":{\"78\":1}}],[\"globalexceptionhandler\",{\"1\":{\"78\":1}}],[\"garbage\",{\"1\":{\"34\":1}}],[\"g1\",{\"1\":{\"34\":1}}],[\"gc\",{\"1\":{\"22\":2}}],[\"gson转换等\",{\"1\":{\"13\":1}}],[\"github\",{\"1\":{\"4\":1}}],[\"=0\",{\"1\":{\"181\":1}}],[\"=\",{\"1\":{\"5\":6,\"12\":1,\"28\":4,\"94\":1,\"97\":1,\"134\":2,\"135\":2,\"136\":1,\"143\":1,\"145\":1,\"162\":5,\"171\":1,\"229\":3,\"234\":2,\"235\":2,\"239\":1,\"284\":1,\"285\":2,\"286\":3}}],[\"===\",{\"1\":{\"231\":1,\"235\":1}}],[\"==\",{\"0\":{\"207\":1,\"219\":1},\"1\":{\"5\":2,\"207\":1,\"231\":2,\"235\":2}}],[\"break\",{\"1\":{\"270\":4,\"274\":1}}],[\"blocking\",{\"0\":{\"251\":1,\"252\":1}}],[\"bitfield\",{\"1\":{\"261\":1}}],[\"bitmap\",{\"1\":{\"261\":1}}],[\"bitmap转换\",{\"1\":{\"13\":1}}],[\"bio\",{\"0\":{\"250\":1,\"251\":1},\"1\":{\"250\":1,\"251\":1}}],[\"binlog\",{\"0\":{\"186\":1},\"1\":{\"186\":2}}],[\"boolean\",{\"0\":{\"136\":1}}],[\"boot\",{\"0\":{\"56\":1,\"57\":1,\"60\":1,\"65\":1,\"106\":1,\"108\":1},\"1\":{\"56\":1,\"57\":1,\"59\":2,\"60\":3,\"65\":3,\"66\":1,\"106\":1,\"107\":4,\"108\":1,\"109\":1,\"110\":1}}],[\"bootstrapclassloader的缓存查找\",{\"1\":{\"36\":1}}],[\"b方法传播到a方法的事务中\",{\"1\":{\"98\":1}}],[\"b方法开启事务\",{\"1\":{\"98\":1}}],[\"base\",{\"0\":{\"147\":1}}],[\"base64string\",{\"1\":{\"5\":4}}],[\"base64util\",{\"1\":{\"5\":2}}],[\"base64\",{\"1\":{\"5\":3}}],[\"bad\",{\"1\":{\"78\":1}}],[\"by\",{\"1\":{\"182\":2}}],[\"byname\",{\"1\":{\"69\":1}}],[\"bytype\",{\"1\":{\"69\":1}}],[\"byte\",{\"1\":{\"5\":1,\"214\":1}}],[\"bean注解注册\",{\"1\":{\"68\":1}}],[\"beanfactory\",{\"1\":{\"55\":1,\"101\":2}}],[\"beanfactorypostprocessor\",{\"1\":{\"55\":1}}],[\"beanpostprocessor\",{\"1\":{\"55\":1,\"70\":2}}],[\"beandefinitionregistrypostprocessor\",{\"1\":{\"55\":1}}],[\"beandefinition\",{\"1\":{\"55\":1}}],[\"bean\",{\"0\":{\"68\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"83\":1},\"1\":{\"55\":8,\"68\":4,\"70\":11,\"71\":2,\"72\":1,\"73\":2,\"79\":1,\"80\":1,\"81\":5,\"82\":2,\"83\":2,\"84\":3,\"85\":3,\"86\":3,\"87\":4,\"102\":2,\"107\":2,\"114\":1,\"115\":2,\"116\":3}}],[\"b\",{\"1\":{\"34\":1}}],[\"igloo\",{\"1\":{\"286\":1}}],[\"i\",{\"0\":{\"250\":1,\"251\":1,\"252\":1,\"253\":1},\"1\":{\"250\":3,\"251\":2,\"252\":1,\"253\":4}}],[\"is\",{\"1\":{\"162\":2}}],[\"isdarkmode\",{\"1\":{\"136\":1}}],[\"ip\",{\"1\":{\"124\":1,\"280\":1}}],[\"identity\",{\"1\":{\"94\":1}}],[\"id\",{\"0\":{\"93\":1},\"1\":{\"93\":2,\"171\":2}}],[\"io多路复用\",{\"1\":{\"249\":1}}],[\"ioc\",{\"0\":{\"55\":1,\"114\":1},\"1\":{\"65\":1,\"70\":1}}],[\"io密集型任务\",{\"1\":{\"13\":1}}],[\"input\",{\"1\":{\"239\":1}}],[\"index\",{\"1\":{\"181\":3}}],[\"in\",{\"0\":{\"164\":1,\"166\":1,\"168\":1,\"169\":1},\"1\":{\"162\":3,\"164\":1,\"166\":2,\"167\":2,\"168\":1,\"169\":2,\"170\":1,\"171\":2}}],[\"innodb\",{\"0\":{\"156\":1,\"175\":1},\"1\":{\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":2}}],[\"init\",{\"1\":{\"70\":1}}],[\"initializingbean\",{\"1\":{\"70\":1}}],[\"instantiation\",{\"1\":{\"70\":1}}],[\"injection\",{\"1\":{\"67\":1}}],[\"inf目录下的spring\",{\"1\":{\"65\":1}}],[\"inf\",{\"1\":{\"65\":1}}],[\"inheritablethreadlocal存储上下文信息\",{\"1\":{\"25\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"25\":1}}],[\"inheritablethreadlocal变量\",{\"1\":{\"25\":1}}],[\"inheritablethreadlocal在子线程创建时从父线程拷贝值\",{\"1\":{\"25\":1}}],[\"inheritablethreadlocal原理\",{\"0\":{\"25\":1}}],[\"intern\",{\"0\":{\"209\":1}}],[\"internal\",{\"1\":{\"78\":1}}],[\"interruptedexception\",{\"1\":{\"28\":2}}],[\"integercache\",{\"1\":{\"219\":1}}],[\"integer\",{\"0\":{\"219\":1},\"1\":{\"9\":1,\"10\":1,\"11\":2,\"12\":1,\"219\":3}}],[\"int\",{\"1\":{\"9\":1,\"32\":1}}],[\"if分支语句\",{\"0\":{\"268\":1}}],[\"if\",{\"1\":{\"5\":2}}],[\"import注解导入了一个\",{\"1\":{\"65\":1}}],[\"import注解\",{\"1\":{\"65\":2}}],[\"import\",{\"1\":{\"5\":1,\"65\":2,\"242\":1}}],[\"python的输入\",{\"0\":{\"237\":1}}],[\"python\",{\"0\":{\"236\":1,\"244\":1},\"1\":{\"278\":2}}],[\"poll\",{\"1\":{\"253\":1}}],[\"post\",{\"1\":{\"124\":1}}],[\"populate\",{\"1\":{\"70\":1}}],[\"persistence\",{\"1\":{\"91\":1}}],[\"pattern\",{\"0\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1}}],[\"parallel\",{\"1\":{\"34\":2}}],[\"parnew\",{\"1\":{\"34\":1}}],[\"passwordgloo\",{\"1\":{\"2\":1}}],[\"private\",{\"1\":{\"215\":1}}],[\"print\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"242\":1}}],[\"printstacktrace\",{\"1\":{\"28\":2}}],[\"println\",{\"1\":{\"28\":4}}],[\"protected\",{\"1\":{\"215\":1}}],[\"prototype\",{\"0\":{\"85\":1}}],[\"proxy\",{\"0\":{\"103\":1}}],[\"properties优先加载级大于yml\",{\"1\":{\"107\":1}}],[\"properties\",{\"1\":{\"70\":1,\"107\":1}}],[\"prompt\",{\"1\":{\"53\":1,\"234\":1}}],[\"processworkerexit\",{\"1\":{\"20\":1}}],[\"phantom\",{\"0\":{\"151\":1},\"1\":{\"24\":1}}],[\"public\",{\"1\":{\"5\":4,\"9\":1,\"10\":1,\"11\":1,\"28\":4,\"78\":3,\"215\":1}}],[\"留下自己学习印迹\",{\"1\":{\"3\":1}}],[\"归档个人学习经验\",{\"1\":{\"3\":1}}],[\"添加好友\",{\"1\":{\"1\":1}}],[\"联系信息\",{\"0\":{\"1\":1,\"4\":1}}],[\"南昌大学\",{\"1\":{\"0\":1}}],[\"江西南昌\",{\"1\":{\"0\":1}}],[\"汉族\",{\"1\":{\"0\":1}}],[\"陈国鹏\",{\"1\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,mt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=bt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ee(t,r,o)]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ee(t,r,o)]})};
//# sourceMappingURL=index.js.map
