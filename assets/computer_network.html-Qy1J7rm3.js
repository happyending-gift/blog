import{_ as n,c as i,a as t,o as r}from"./app-BozcFY7C.js";const o={};function p(s,l){return r(),i("div",null,l[0]||(l[0]=[t('<h2 id="从输入-url-到页面展示的过程" tabindex="-1"><a class="header-anchor" href="#从输入-url-到页面展示的过程"><span>从输入 URL 到页面展示的过程</span></a></h2><p>当用户在浏览器中输入一个 URL 并按下回车键时，以下一系列步骤会发生：</p><ol><li><p><strong>DNS 解析</strong>：</p><ul><li>浏览器首先检查本地 DNS 缓存，以确定 URL 对应的 IP 地址。</li><li>如果找不到，它会向 DNS 服务器查询。</li></ul></li><li><p><strong>建立 TCP 连接</strong>：</p><ul><li>通过三次握手过程，浏览器与服务器建立 TCP 连接。</li></ul></li><li><p><strong>发送 HTTP 请求</strong>：</p><ul><li>一旦 TCP 连接建立，浏览器会构建一个 HTTP 请求并发送给服务器。</li></ul></li><li><p><strong>服务器处理请求</strong>：</p><ul><li>服务器接收到请求后，会根据请求的 URL、HTTP 方法（如 GET、POST）和头部信息来处理请求。</li></ul></li><li><p><strong>发送 HTTP 响应</strong>：</p><ul><li>服务器处理完请求后，会发送一个 HTTP 响应，包括状态码、响应头部和正文（即所请求的页面内容）。</li></ul></li><li><p><strong>浏览器渲染页面</strong>：</p><ul><li>浏览器接收到响应后，会解析 HTML 文档，并根据 HTML、CSS 和 JavaScript 来渲染页面。</li></ul></li><li><p><strong>关闭 TCP 连接</strong>：</p><ul><li>在 HTTP/1.0 中，默认使用非持久连接，每次请求后都会关闭 TCP 连接。</li><li>在 HTTP/1.1 中，默认使用持久连接，可以复用同一个 TCP 连接来发送多个请求和响应。</li></ul></li></ol><h2 id="tcp三次握手与四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp三次握手与四次挥手"><span>TCP三次握手与四次挥手</span></a></h2><h3 id="tcp三次握手" tabindex="-1"><a class="header-anchor" href="#tcp三次握手"><span>TCP三次握手</span></a></h3><p>TCP 三次握手是建立一个可靠 TCP 连接的过程，它包括以下步骤：</p><ol><li><p><strong>SYN（同步序列编号）</strong>：</p><ul><li>客户端发送一个带有 SYN 标志的 TCP 段到服务器，以初始化序列号。</li></ul></li><li><p><strong>SYN-ACK（同步序列编号和确认应答）</strong>：</p><ul><li>服务器收到 SYN 后，同意建立连接，并发送一个带有 SYN 和 ACK 标志的 TCP 段作为响应。</li></ul></li><li><p><strong>ACK（确认应答）</strong>：</p><ul><li>客户端收到 SYN-ACK 后，发送一个带有 ACK 标志的 TCP 段作为最后的确认。</li></ul></li></ol><p>完成这三个步骤后，TCP连接就建立成功，数据可以开始传输。</p><h3 id="tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp四次挥手"><span>TCP四次挥手</span></a></h3><p>TCP 四次挥手是终止一个 TCP 连接的过程，它包括以下步骤：</p><ol><li><p><strong>FIN（结束）</strong>：</p><ul><li>客户端发送一个带有 FIN 标志的 TCP 段，表示客户端已经发送完所有数据，请求关闭连接。</li></ul></li><li><p><strong>ACK（确认应答）</strong>：</p><ul><li>服务器收到 FIN 后，发送一个 ACK 段作为确认，同时准备好关闭连接。</li></ul></li><li><p><strong>FIN（结束）</strong>：</p><ul><li>服务器也发送一个带有 FIN 标志的 TCP 段，表示它已经准备好关闭连接。</li></ul></li><li><p><strong>ACK（确认应答）</strong>：</p><ul><li>客户端收到服务器的 FIN 后，发送最后一个 ACK 段作为确认。</li></ul></li></ol>',11)]))}const a=n(o,[["render",p]]),T=JSON.parse('{"path":"/js/computer_network.html","title":"计算机网络","lang":"zh-CN","frontmatter":{"title":"计算机网络","author":"chengp"},"headers":[{"level":2,"title":"从输入 URL 到页面展示的过程","slug":"从输入-url-到页面展示的过程","link":"#从输入-url-到页面展示的过程","children":[]},{"level":2,"title":"TCP三次握手与四次挥手","slug":"tcp三次握手与四次挥手","link":"#tcp三次握手与四次挥手","children":[{"level":3,"title":"TCP三次握手","slug":"tcp三次握手","link":"#tcp三次握手","children":[]},{"level":3,"title":"TCP四次挥手","slug":"tcp四次挥手","link":"#tcp四次挥手","children":[]}]}],"git":{"updatedTime":1748329949000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":1}],"changelog":[{"hash":"5060321abaa67e9154b1456a9d36705be88f8f8e","time":1748329949000,"email":"1787536379@qq.com","author":"“root”","message":"add 学习文档"}]},"filePathRelative":"js/computer_network.md","excerpt":"<h2>从输入 URL 到页面展示的过程</h2>\\n<p>当用户在浏览器中输入一个 URL 并按下回车键时，以下一系列步骤会发生：</p>\\n<ol>\\n<li>\\n<p><strong>DNS 解析</strong>：</p>\\n<ul>\\n<li>浏览器首先检查本地 DNS 缓存，以确定 URL 对应的 IP 地址。</li>\\n<li>如果找不到，它会向 DNS 服务器查询。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>建立 TCP 连接</strong>：</p>\\n<ul>\\n<li>通过三次握手过程，浏览器与服务器建立 TCP 连接。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>发送 HTTP 请求</strong>：</p>\\n<ul>\\n<li>一旦 TCP 连接建立，浏览器会构建一个 HTTP 请求并发送给服务器。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>服务器处理请求</strong>：</p>\\n<ul>\\n<li>服务器接收到请求后，会根据请求的 URL、HTTP 方法（如 GET、POST）和头部信息来处理请求。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>发送 HTTP 响应</strong>：</p>\\n<ul>\\n<li>服务器处理完请求后，会发送一个 HTTP 响应，包括状态码、响应头部和正文（即所请求的页面内容）。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>浏览器渲染页面</strong>：</p>\\n<ul>\\n<li>浏览器接收到响应后，会解析 HTML 文档，并根据 HTML、CSS 和 JavaScript 来渲染页面。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>关闭 TCP 连接</strong>：</p>\\n<ul>\\n<li>在 HTTP/1.0 中，默认使用非持久连接，每次请求后都会关闭 TCP 连接。</li>\\n<li>在 HTTP/1.1 中，默认使用持久连接，可以复用同一个 TCP 连接来发送多个请求和响应。</li>\\n</ul>\\n</li>\\n</ol>"}');export{a as comp,T as data};
