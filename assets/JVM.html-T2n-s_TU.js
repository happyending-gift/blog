import{_ as d,c as e,a,o as n}from"./app-B_BkCXe5.js";const l={};function r(h,t){return n(),e("div",null,t[0]||(t[0]=[a('<h2 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h2><h3 id="加载-loading" tabindex="-1"><a class="header-anchor" href="#加载-loading"><span>加载（Loading）</span></a></h3><p>将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。</p><h3 id="连接-验证、准备、解析" tabindex="-1"><a class="header-anchor" href="#连接-验证、准备、解析"><span>连接（验证、准备、解析）</span></a></h3><p>验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求</p><p>准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。</p><p>解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。</p><h3 id="初始化、使用、卸载" tabindex="-1"><a class="header-anchor" href="#初始化、使用、卸载"><span>初始化、使用、卸载</span></a></h3><p>初始化阶段简单来说就是执行类的构造器方法，不是开发者写的，而是编译器自动生成的。</p><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器"><span>垃圾收集器</span></a></h2><table><thead><tr><th>垃圾收集器</th><th>类型</th><th>作用域</th><th>使用算法</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>Serial</td><td>串行回收</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>适用于单核 CPU 环境下的 Client 模式</td></tr><tr><td>Serial Old</td><td>串行回收</td><td>老年代</td><td>标记-压缩算法</td><td>响应速度优先</td><td>适用于单核 CPU 环境下的 Client 模式</td></tr><tr><td>ParNew</td><td>并行回收</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多核 CPU 环境中 Server 模式下与 CMS 配合使用</td></tr><tr><td>Parallel Scavenge</td><td>并行回收</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>适用于后台运算，而交互少的场景</td></tr><tr><td>Parallel Old</td><td>并行回收</td><td>老年代</td><td>标记-压缩算法</td><td>吞吐量优先</td><td>适用于后台运算，而交互少的场景</td></tr><tr><td>CMS(Concurrent Mark-Sweep)</td><td>并发回收</td><td>老年代</td><td>标记-清除算法</td><td>响应速度优先</td><td>适用于 B/S 业务，也就是交互多的场景</td></tr><tr><td>G1(Garbage-First)</td><td>并发, 并行回收</td><td>新生代 &amp; 老年代(整堆收集器)</td><td>复制算法 &amp; 标记-压缩算法</td><td>响应速度优先</td><td>面向服务端的应用</td></tr></tbody></table>',11)]))}const s=d(l,[["render",r]]),c=JSON.parse('{"path":"/js/JVM.html","title":"虚拟机","lang":"zh-CN","frontmatter":{"title":"虚拟机"},"headers":[{"level":2,"title":"类加载过程","slug":"类加载过程","link":"#类加载过程","children":[{"level":3,"title":"加载（Loading）","slug":"加载-loading","link":"#加载-loading","children":[]},{"level":3,"title":"连接（验证、准备、解析）","slug":"连接-验证、准备、解析","link":"#连接-验证、准备、解析","children":[]},{"level":3,"title":"初始化、使用、卸载","slug":"初始化、使用、卸载","link":"#初始化、使用、卸载","children":[]}]},{"level":2,"title":"垃圾收集器","slug":"垃圾收集器","link":"#垃圾收集器","children":[]}],"git":{"updatedTime":1747989623000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":4}],"changelog":[{"hash":"776626f91ca5344e532a9daf331771c840b96fa7","time":1747989623000,"email":"1787536379@qq.com","author":"“root”","message":"lock content 1.0"},{"hash":"c8ea528e448bd1dc1e06af30d983b966efbb1b65","time":1747962417000,"email":"1787536379@qq.com","author":"“root”","message":"JVM content 1.0"},{"hash":"6e8ccf50fca98416a48bb367ce6edd471fbd6dd7","time":1747962062000,"email":"1787536379@qq.com","author":"“root”","message":"JVM content 1.0"},{"hash":"7280c20fb6fcce0feef8aa86b4821fe4e44030f8","time":1747702888000,"email":"1787536379@qq.com","author":"“root”","message":"JUC content 1.1"}]},"filePathRelative":"js/JVM.md","excerpt":"<h2>类加载过程</h2>\\n<h3>加载（Loading）</h3>\\n<p>将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。</p>\\n<h3>连接（验证、准备、解析）</h3>\\n<p>验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求</p>\\n<p>准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。</p>\\n<p>解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。</p>\\n<h3>初始化、使用、卸载</h3>"}');export{s as comp,c as data};
