import{_ as n,c as s,a as e,o as l}from"./app-BvENaC6a.js";const t={};function p(o,a){return l(),s("div",null,a[0]||(a[0]=[e(`<h2 id="线程池种类" tabindex="-1"><a class="header-anchor" href="#线程池种类"><span>线程池种类</span></a></h2><h3 id="创建固定线程数的线程池" tabindex="-1"><a class="header-anchor" href="#创建固定线程数的线程池"><span>创建固定线程数的线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数与最大线程数一样：没有救急线程。</p><p>阻塞队列是 LinkedBlockingQueue：最大容量为 Integer.MAX_VALUE。</p><h3 id="单线程化的线程池" tabindex="-1"><a class="header-anchor" href="#单线程化的线程池"><span>单线程化的线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数和最大线程数都是 1。</p><p>阻塞队列是 LinkedBlockingQueue，最大容量为 Integer.MAX_VALUE。</p><h3 id="可缓存线程池" tabindex="-1"><a class="header-anchor" href="#可缓存线程池"><span>可缓存线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数为 0：线程池不会保留核心线程。</p><p>最大线程数是 Integer.MAX_VALUE：理论上可以创建无限多的线程。</p><p>阻塞队列为 SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p><h3 id="定时线程池" tabindex="-1"><a class="header-anchor" href="#定时线程池"><span>定时线程池</span></a></h3><p>核心线程自己定，最大线程MAX</p><div class="hint-container warning"><p class="hint-container-title">不建议用 Executors 创建线程池</p><ol><li><p><strong>FixedThreadPool 和 SingleThreadPool</strong>：</p><ul><li>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li></ul></li><li><p><strong>CachedThreadPool</strong>：</p><ul><li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li></ul></li></ol><p>推荐的做法</p><p>使用ThreadPoolExecutor直接创建线程池，明确线程池的各项参数，避免资源耗尽的风险</p></div><div class="hint-container tip"><p class="hint-container-title">CountDownLatch</p><p>CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。</p><p>CountDownLatch latch = new CountDownLatch(count);</p><p>latch.countDown();</p><p>latch.await();</p></div><h2 id="核心线程数的确定" tabindex="-1"><a class="header-anchor" href="#核心线程数的确定"><span>核心线程数的确定</span></a></h2><p>IO密集型任务</p><p>一般来说：文件读写、DB读写、网络请求等</p><p>核心线程数大小设置为 2N+1</p><p>CPU密集型任务</p><p>一般来说：计算型代码、Bitmap转换、Gson转换等</p><p>核心线程数大小设置为 N+1</p><h2 id="阻塞队列" tabindex="-1"><a class="header-anchor" href="#阻塞队列"><span>阻塞队列</span></a></h2><h3 id="arrayblockingqueue" tabindex="-1"><a class="header-anchor" href="#arrayblockingqueue"><span>ArrayBlockingQueue</span></a></h3><ul><li><strong>适用场景</strong>：适用于固定数量任务的排队处理，例如，当需要限制线程池中任务的数量时使用，防止生产速度大于消费速度。</li><li><strong>线程安全</strong>：使用 ReentrantLock在操作前后加锁来保证线程安全。</li><li><strong>公平性</strong>：初始化时，可以指定使用公平锁或者非公平锁。</li></ul><h3 id="linkedblockingqueue" tabindex="-1"><a class="header-anchor" href="#linkedblockingqueue"><span>LinkedBlockingQueue</span></a></h3><ul><li><strong>适用场景</strong>：适用于任务量较大的场景，例如一个大型电商平台的订单处理系统，每天会接收到大量的订单请求，这些请求需要被逐一处理和记录。</li><li><strong>线程安全</strong>：分别使用了读写两把锁，比 ArrayBlockingQueue性能更好。</li><li><strong>公平性</strong>：只支持非公平锁。</li><li><strong>使用示例</strong>：FixedThreadPool 和 SingleThreadExecutor。</li></ul><h3 id="synchronousqueue" tabindex="-1"><a class="header-anchor" href="#synchronousqueue"><span>SynchronousQueue</span></a></h3><ul><li><strong>特点</strong>：不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作。</li><li><strong>适用场景</strong>：适用于任务直接提交给线程而不进行排队的场景，可以指定使用公平策略还是非公平策略。</li><li><strong>优势</strong>：适用于生产者与消费者速度相匹配的场景，可减少任务执行的等待时间。</li></ul><h3 id="delayedworkqueue" tabindex="-1"><a class="header-anchor" href="#delayedworkqueue"><span>DelayedWorkQueue</span></a></h3><ul><li><strong>特点</strong>：ScheduledThreadPoolExecutor 常见的例子，例如使用一个 DelayedWorkQueue 来管理一个超时未响应的连接队列。</li><li><strong>线程安全</strong>：内部使用 ReentrantLock 加锁。</li></ul><p>::: wrong LinkedBlockingQueue 和 ArrayBlockingQueue 的区别 容量：</p><p>LinkedBlockingQueue 默认无界，支持有界。</p><p>ArrayBlockingQueue 强制有界。</p><p>底层数据结构：</p><p>LinkedBlockingQueue 底层是链表。</p><p>ArrayBlockingQueue 底层是数组。</p><p>内存管理：</p><p>LinkedBlockingQueue 是懒惰的，创建节点的时候添加数据。</p><p>ArrayBlockingQueue 需要提前初始化 Node 数组。</p><p>入队操作：</p><p>LinkedBlockingQueue 入队会生成新 Node。</p><p>ArrayBlockingQueue Node 需要是提前创建好的。</p><p>锁机制：</p><p>LinkedBlockingQueue 使用两把锁（头尾）。</p><p>ArrayBlockingQueue 使用一把锁。 :::</p><h2 id="拒绝策略" tabindex="-1"><a class="header-anchor" href="#拒绝策略"><span>拒绝策略</span></a></h2><ol><li><p><strong>AbortPolicy</strong>：</p><ul><li>直接抛出异常，默认策略。</li></ul></li><li><p><strong>CallerRunsPolicy</strong>：</p><ul><li>用调用者所在的线程来执行任务。</li></ul></li><li><p><strong>DiscardOldestPolicy</strong>：</p><ul><li>丢弃阻塞队列中最靠前的任务，并执行当前任务。</li></ul></li><li><p><strong>DiscardPolicy</strong>：</p><ul><li>直接丢弃任务。</li></ul></li></ol><h2 id="java-线程池怎么实现线程自动回收" tabindex="-1"><a class="header-anchor" href="#java-线程池怎么实现线程自动回收"><span>Java 线程池怎么实现线程自动回收？</span></a></h2><p>线程池通过 worker 线程循环获取任务。</p><p>超时判断在 getTask() 中完成，超时后触发线程回收。</p><p>回收流程由 processWorkerExit() 方法完成，包括任务统计、移除线程和判断是否补充线程。</p><p>线程回收和补充机制确保线程池的动态调整和资源优化。</p><h2 id="threadlocalmap的引用类型" tabindex="-1"><a class="header-anchor" href="#threadlocalmap的引用类型"><span>ThreadLocalMap的引用类型</span></a></h2><div class="hint-container tip"><p class="hint-container-title">answer</p><p>ThreadLocalMap 的 key 是弱引用，而 value 是强引用。</p></div><h3 id="为什么-threadlocalmap-的键-key-是弱引用-weak-reference" tabindex="-1"><a class="header-anchor" href="#为什么-threadlocalmap-的键-key-是弱引用-weak-reference"><span>为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？</span></a></h3><p>弱引用意味着，如果没有其他引用对象的强引用关系，那么这个仅被弱引用的对象在下次垃圾回收（GC）时就会被回收掉，这样在一定程度上降低了内存泄漏的风险。但同时也引入了新的问题，即键虽然被回收了，但是值对象还在，我们无法获取，也无法删除，这样也会存在内存泄漏的风险。虽然 ThreadLocalMap 中在进行 set 和 get 操作时会进行启发式清理和探测式清理，清理一部分键为 null 的 Entry 对象，但是这只是一种后备选择，最重要的还是开发人员在编写代码时记得在使用完数据后及时调用 remove() 方法手动清理。</p><div class="hint-container tip"><p class="hint-container-title">内存泄漏</p><p>有些对象已经不再使用了，但是由于没有正确处理对象的引用关系，使得这个无用的对象还一直被 GC Root 直接或间接引用着，垃圾回收时就无法清理掉这些对象，如果这类对象存在很多，就会导致内存泄漏。</p></div><h3 id="为什么-threadlocalmap的值-value-是强引用" tabindex="-1"><a class="header-anchor" href="#为什么-threadlocalmap的值-value-是强引用"><span>为什么 ThreadLocalMap的值（Value）是强引用？</span></a></h3><p>如果值是弱引用，那么在没有其他强引用指向这个值的情况下，值可能会在任何时候被垃圾回收器回收。这将导致 ThreadLocal 无法正确地存储和检索数据，因为它们可能会在不被期望的情况下突然消失。</p><p>强引用保证数据完整性：使用强引用作为 ThreadLocalMap的值确保了只要ThreadLocal对象存在，其关联的数据值也会一直存在，直到显式地通过remove()方法或线程结束时清理。这样可以保证数据的完整性和一致性，避免因垃圾回收导致的潜在错误。</p><p>::: threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了</p><p>两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。</p><p>:::</p><div class="hint-container tip"><p class="hint-container-title">Java中的引用类型</p><ul><li><p><strong>强引用（Strong Reference）</strong>：</p><ul><li>只要引用还存在就不会被回收。</li></ul></li><li><p><strong>软引用（Soft Reference）</strong>：</p><ul><li>JVM内存不足时，才会回收软引用指向的对象。</li></ul></li><li><p><strong>弱引用（Weak Reference）</strong>：</p><ul><li>被垃圾回收线程发现就会被回收。</li></ul></li><li><p><strong>虚引用（Phantom Reference）</strong>：</p><ul><li>必须和引用队列一起使用，主要是跟踪垃圾回收。。</li></ul></li></ul></div><h2 id="inheritablethreadlocal原理" tabindex="-1"><a class="header-anchor" href="#inheritablethreadlocal原理"><span>InheritableThreadLocal原理</span></a></h2><p>InheritableThreadLocal在子线程创建时从父线程拷贝值。具体来说，这个拷贝过程发生在 Java 线程创建时的初始化阶段。</p><p>当一个线程（父线程）创建一个新的线程（子线程）时，JVM 会检查父线程中的 InheritableThreadLocal变量，并将这些变量的值复制到子线程中。这样，子线程就可以访问到父线程中 InheritableThreadLocal 变量的值。</p><p>线程池中的线程在完成任务后不会立即销毁，而是会被放回池中重用。这意味着如果使用 InheritableThreadLocal存储上下文信息，那么这些信息可能会被重用的线程意外地继承，导致数据错乱。</p><p>在使用InheritableThreadLocal 时，需要特别注意线程池的使用场景，确保不会因线程重用而导致数据不一致的问题。通常建议在任务执行完毕后清除InheritableThreadLocal的值，以避免潜在的数据泄露风险。</p><p>::: wrong threadlocal中set的值，同时只能存在一个，后面set的值，会把前面的给覆盖了</p><p>两个不同的ThreadLocal 在map中位置发生冲突会使用开放寻址法。 :::</p><h2 id="threadlocal改进的框架或者工具" tabindex="-1"><a class="header-anchor" href="#threadlocal改进的框架或者工具"><span>ThreadLocal改进的框架或者工具</span></a></h2><ol><li><p>数据扩容机制</p><p>FastThreadLocal： 扩容时将原数据拷贝到新数组。 扩容过程简单高效。 ThreadLocal： 使用哈希表存储数据。 扩容后需要重新哈希（rehash），效率较低。</p></li><li><p>安全性 ThreadLocal： 使用不当可能导致内存泄漏。 在线程池场景下，只能通过主动检测来防止内存泄漏，增加了开销。 FastThreadLocal： 提供了 remove() 方法，允许主动清除对象。 在任务执行完成后会自动触发清除机制，减少了内存泄漏的风险。</p></li></ol>`,77)]))}const i=n(t,[["render",p]]),r=JSON.parse('{"path":"/js/JUC.html","title":"多线程","lang":"zh-CN","frontmatter":{"title":"多线程"},"headers":[{"level":2,"title":"线程池种类","slug":"线程池种类","link":"#线程池种类","children":[{"level":3,"title":"创建固定线程数的线程池","slug":"创建固定线程数的线程池","link":"#创建固定线程数的线程池","children":[]},{"level":3,"title":"单线程化的线程池","slug":"单线程化的线程池","link":"#单线程化的线程池","children":[]},{"level":3,"title":"可缓存线程池","slug":"可缓存线程池","link":"#可缓存线程池","children":[]},{"level":3,"title":"定时线程池","slug":"定时线程池","link":"#定时线程池","children":[]}]},{"level":2,"title":"核心线程数的确定","slug":"核心线程数的确定","link":"#核心线程数的确定","children":[]},{"level":2,"title":"阻塞队列","slug":"阻塞队列","link":"#阻塞队列","children":[{"level":3,"title":"ArrayBlockingQueue","slug":"arrayblockingqueue","link":"#arrayblockingqueue","children":[]},{"level":3,"title":"LinkedBlockingQueue","slug":"linkedblockingqueue","link":"#linkedblockingqueue","children":[]},{"level":3,"title":"SynchronousQueue","slug":"synchronousqueue","link":"#synchronousqueue","children":[]},{"level":3,"title":"DelayedWorkQueue","slug":"delayedworkqueue","link":"#delayedworkqueue","children":[]}]},{"level":2,"title":"拒绝策略","slug":"拒绝策略","link":"#拒绝策略","children":[]},{"level":2,"title":"Java 线程池怎么实现线程自动回收？","slug":"java-线程池怎么实现线程自动回收","link":"#java-线程池怎么实现线程自动回收","children":[]},{"level":2,"title":"ThreadLocalMap的引用类型","slug":"threadlocalmap的引用类型","link":"#threadlocalmap的引用类型","children":[{"level":3,"title":"为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？","slug":"为什么-threadlocalmap-的键-key-是弱引用-weak-reference","link":"#为什么-threadlocalmap-的键-key-是弱引用-weak-reference","children":[]},{"level":3,"title":"为什么 ThreadLocalMap的值（Value）是强引用？","slug":"为什么-threadlocalmap的值-value-是强引用","link":"#为什么-threadlocalmap的值-value-是强引用","children":[]}]},{"level":2,"title":"InheritableThreadLocal原理","slug":"inheritablethreadlocal原理","link":"#inheritablethreadlocal原理","children":[]},{"level":2,"title":"ThreadLocal改进的框架或者工具","slug":"threadlocal改进的框架或者工具","link":"#threadlocal改进的框架或者工具","children":[]}],"git":{"updatedTime":1747908783000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":11}],"changelog":[{"hash":"9c5a2d7c511dc3dd5ee2fbc3038d6fec0f3f71a7","time":1747908783000,"email":"1787536379@qq.com","author":"“root”","message":"tag content 1.0"},{"hash":"a69ae34ff70ac09f7c5d24fe3c1102e7b6e2b70f","time":1747703073000,"email":"1787536379@qq.com","author":"“root”","message":"JUC content 1.1"},{"hash":"3af14fdda498e804d7425f5e0c1a0d7a32db77ae","time":1747702834000,"email":"1787536379@qq.com","author":"“root”","message":"JUC content 1.1"},{"hash":"197aceab73a2684bd558367fc13092d6d06d1bc2","time":1747538069000,"email":"1787536379@qq.com","author":"“root”","message":"1.1"},{"hash":"56a7d60ee67793ce8fa22689555da59376bed4be","time":1747501961000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"685f88ad8368789151dbb5629c9199a787dc7b29","time":1747501815000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"1857e48f34a2547bcffe75517720809d35f27453","time":1747501677000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"93fe7bfffd7a7c6a38bd1e40a293aa941a6ef286","time":1747500947000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"08ffb0fa20fb1df5dcbb232b541fb5b3e1373b68","time":1747499917000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"c4e83d57546d7e264244a88677266d13b488910a","time":1747499680000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"11f0fe4ec4ced75ec5a83d62d288f5172be2017a","time":1747498950000,"email":"1787536379@qq.com","author":"“root”","message":"第一个总结上传"}]},"filePathRelative":"js/JUC.md","excerpt":"<h2>线程池种类</h2>\\n<h3>创建固定线程数的线程池</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">ExecutorService</span> <span class=\\"token function\\">newFixedThreadPool</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> nThreads<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span><span class=\\"token punctuation\\">(</span>nThreads<span class=\\"token punctuation\\">,</span> nThreads<span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0L</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MILLISECONDS</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkedBlockingQueue</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{i as comp,r as data};
