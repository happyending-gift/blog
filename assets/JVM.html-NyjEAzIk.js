import{_ as a,c as e,a as d,o as l}from"./app-C3OQ5REo.js";const i={};function s(n,t){return l(),e("div",null,t[0]||(t[0]=[d('<h2 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h2><h3 id="加载-loading" tabindex="-1"><a class="header-anchor" href="#加载-loading"><span>加载（Loading）</span></a></h3><p>将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。</p><h3 id="连接-验证、准备、解析" tabindex="-1"><a class="header-anchor" href="#连接-验证、准备、解析"><span>连接（验证、准备、解析）</span></a></h3><p>验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求</p><p>准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。</p><p>解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。</p><h3 id="初始化、使用、卸载" tabindex="-1"><a class="header-anchor" href="#初始化、使用、卸载"><span>初始化、使用、卸载</span></a></h3><p>初始化阶段简单来说就是执行类的构造器方法，不是开发者写的，而是编译器自动生成的。</p><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器"><span>垃圾收集器</span></a></h2><table><thead><tr><th>垃圾收集器</th><th>类型</th><th>作用域</th><th>使用算法</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>Serial</td><td>串行回收</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>适用于单核 CPU 环境下的 Client 模式</td></tr><tr><td>Serial Old</td><td>串行回收</td><td>老年代</td><td>标记-压缩算法</td><td>响应速度优先</td><td>适用于单核 CPU 环境下的 Client 模式</td></tr><tr><td>ParNew</td><td>并行回收</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多核 CPU 环境中 Server 模式下与 CMS 配合使用</td></tr><tr><td>Parallel Scavenge</td><td>并行回收</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>适用于后台运算，而交互少的场景</td></tr><tr><td>Parallel Old</td><td>并行回收</td><td>老年代</td><td>标记-压缩算法</td><td>吞吐量优先</td><td>适用于后台运算，而交互少的场景</td></tr><tr><td>CMS(Concurrent Mark-Sweep)</td><td>并发回收</td><td>老年代</td><td>标记-清除算法</td><td>响应速度优先</td><td>适用于 B/S 业务，也就是交互多的场景</td></tr><tr><td>G1(Garbage-First)</td><td>并发, 并行回收</td><td>新生代 &amp; 老年代(整堆收集器)</td><td>复制算法 &amp; 标记-压缩算法</td><td>响应速度优先</td><td>面向服务端的应用</td></tr></tbody></table><h2 id="静态代理、动态代理" tabindex="-1"><a class="header-anchor" href="#静态代理、动态代理"><span>静态代理、动态代理</span></a></h2><p>类编译时产生，静态</p><p>类运行时产生，动态</p><p>静态代理：代理类与被代理类实现相同接口，相同方法，代理类需要有被代理类的成员变量，这样就可以在被代理对象时候做增强。</p><p>动态代理，允许我们运行时生成代理对象，实现方案时GDK给我们提供的proxy类，CG lab提供的api,被代理有接口实现就实现响应接口，没有就继承，</p><h2 id="双亲委派" tabindex="-1"><a class="header-anchor" href="#双亲委派"><span>双亲委派</span></a></h2><p>当我们进行类加载时，我们会先从appclassloader缓存查找，</p><p>若没有会向extclassloader、bootstrapclassloader的缓存查找，</p><p>如果还没有，他将向下在加载器对应路径查找</p><h3 id="为什么使用双亲委派" tabindex="-1"><a class="header-anchor" href="#为什么使用双亲委派"><span>为什么使用双亲委派</span></a></h3><ul><li><strong>避免类的重复加载</strong>：确保一个类只被加载一次。</li><li><strong>保证 Java 核心 API 的安全性</strong>：防止核心 API 被随意篡改。</li><li><strong>提供类加载的层次结构</strong>：允许用户自定义类加载器以满足特定需求。</li></ul><h2 id="类加载时成员变量和静态成员变量的初始化时机" tabindex="-1"><a class="header-anchor" href="#类加载时成员变量和静态成员变量的初始化时机"><span>类加载时成员变量和静态成员变量的初始化时机</span></a></h2><p>在 Java 中，类的加载和初始化涉及到成员变量和静态成员变量的初始化时机，它们之间存在一些关键的差异：</p><h3 id="未使用-static-修饰的成员变量和成员对象" tabindex="-1"><a class="header-anchor" href="#未使用-static-修饰的成员变量和成员对象"><span>未使用 static 修饰的成员变量和成员对象</span></a></h3><ul><li>这些成员变量和对象是在 <strong>类的的第一个实例被创建时</strong> 进行初始化的。</li><li>这意味着它们与特定类的实例相关联，每个实例都会有自己的副本。</li></ul><h3 id="使用-static-修饰的成员变量" tabindex="-1"><a class="header-anchor" href="#使用-static-修饰的成员变量"><span>使用 static 修饰的成员变量</span></a></h3><ul><li>静态成员变量是在 <strong>类加载阶段</strong> 进行初始化的。</li><li>它们与类的实例化无关，属于类本身，而不是类的某个特定实例。</li><li>因此，静态成员变量在类第一次被加载到 JVM 时就初始化，并且只会初始化一次。</li></ul><h3 id="初始化时机的比较" tabindex="-1"><a class="header-anchor" href="#初始化时机的比较"><span>初始化时机的比较</span></a></h3><ul><li>由于 static 修饰的成员变量在类加载时就初始化，它们会比未使用 static 修饰的普通成员变量 <strong>更早进行初始化</strong>。</li><li>这种差异在设计类和方法时需要考虑，特别是涉及到类的静态上下文和单例模式等场景。</li></ul>',30)]))}const h=a(i,[["render",s]]),c=JSON.parse('{"path":"/js/JVM.html","title":"虚拟机","lang":"zh-CN","frontmatter":{"title":"虚拟机","author":"chengp"},"headers":[{"level":2,"title":"类加载过程","slug":"类加载过程","link":"#类加载过程","children":[{"level":3,"title":"加载（Loading）","slug":"加载-loading","link":"#加载-loading","children":[]},{"level":3,"title":"连接（验证、准备、解析）","slug":"连接-验证、准备、解析","link":"#连接-验证、准备、解析","children":[]},{"level":3,"title":"初始化、使用、卸载","slug":"初始化、使用、卸载","link":"#初始化、使用、卸载","children":[]}]},{"level":2,"title":"垃圾收集器","slug":"垃圾收集器","link":"#垃圾收集器","children":[]},{"level":2,"title":"静态代理、动态代理","slug":"静态代理、动态代理","link":"#静态代理、动态代理","children":[]},{"level":2,"title":"双亲委派","slug":"双亲委派","link":"#双亲委派","children":[{"level":3,"title":"为什么使用双亲委派","slug":"为什么使用双亲委派","link":"#为什么使用双亲委派","children":[]}]},{"level":2,"title":"类加载时成员变量和静态成员变量的初始化时机","slug":"类加载时成员变量和静态成员变量的初始化时机","link":"#类加载时成员变量和静态成员变量的初始化时机","children":[{"level":3,"title":"未使用 static 修饰的成员变量和成员对象","slug":"未使用-static-修饰的成员变量和成员对象","link":"#未使用-static-修饰的成员变量和成员对象","children":[]},{"level":3,"title":"使用 static 修饰的成员变量","slug":"使用-static-修饰的成员变量","link":"#使用-static-修饰的成员变量","children":[]},{"level":3,"title":"初始化时机的比较","slug":"初始化时机的比较","link":"#初始化时机的比较","children":[]}]}],"git":{"updatedTime":1748329949000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":6}],"changelog":[{"hash":"5060321abaa67e9154b1456a9d36705be88f8f8e","time":1748329949000,"email":"1787536379@qq.com","author":"“root”","message":"add 学习文档"},{"hash":"2f28edffd20e17e141c8d3f074c0c15dbcd3bc6c","time":1748231170000,"email":"1787536379@qq.com","author":"“root”","message":"content 2.0"},{"hash":"776626f91ca5344e532a9daf331771c840b96fa7","time":1747989623000,"email":"1787536379@qq.com","author":"“root”","message":"lock content 1.0"},{"hash":"c8ea528e448bd1dc1e06af30d983b966efbb1b65","time":1747962417000,"email":"1787536379@qq.com","author":"“root”","message":"JVM content 1.0"},{"hash":"6e8ccf50fca98416a48bb367ce6edd471fbd6dd7","time":1747962062000,"email":"1787536379@qq.com","author":"“root”","message":"JVM content 1.0"},{"hash":"7280c20fb6fcce0feef8aa86b4821fe4e44030f8","time":1747702888000,"email":"1787536379@qq.com","author":"“root”","message":"JUC content 1.1"}]},"filePathRelative":"js/JVM.md","excerpt":"<h2>类加载过程</h2>\\n<h3>加载（Loading）</h3>\\n<p>将class文件的二进制字节流所代表的静态存储结构转化为方法区运行时的数据结构。</p>\\n<h3>连接（验证、准备、解析）</h3>\\n<p>验证：确保 .class 文件中的字节流包含的信息符合当前虚拟机的要求</p>\\n<p>准备：为类中的静态字段分配内存，并设置默认的初始值（如 int 类型初始值是 0）。 被 final 修饰的 static 字段不会设置，因为 final 在编译的时候就分配了。</p>\\n<p>解析：解析阶段是虚拟机将常量池的符号引用直接替换为直接引用的过程。</p>\\n<h3>初始化、使用、卸载</h3>"}');export{h as comp,c as data};
