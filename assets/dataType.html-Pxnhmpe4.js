import{_ as r,c as d,b as n,a as l,d as e,e as a,w as o,r as i,o as u}from"./app-DRAIoFbg.js";const h={},k={id:"number",tabindex:"-1"},m={class:"header-anchor",href:"#number"},v={id:"string",tabindex:"-1"},b={class:"header-anchor",href:"#string"},g={id:"boolean",tabindex:"-1"},f={class:"header-anchor",href:"#boolean"},x={id:"undefined",tabindex:"-1"},y={class:"header-anchor",href:"#undefined"},j={id:"null",tabindex:"-1"},w={class:"header-anchor",href:"#null"},_={id:"object",tabindex:"-1"},C={class:"header-anchor",href:"#object"},N={id:"function",tabindex:"-1"},B={class:"header-anchor",href:"#function"},T={id:"array",tabindex:"-1"},G={class:"header-anchor",href:"#array"};function V(I,s){const t=i("Badge"),p=i("CodeGroupItem"),c=i("CodeGroup");return u(),d("div",null,[s[10]||(s[10]=n("h2",{id:"数据类型分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据类型分类"},[n("span",null,"数据类型分类")])],-1)),s[11]||(s[11]=n("h3",{id:"基本数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本数据类型"},[n("span",null,"基本数据类型")])],-1)),n("h4",k,[n("a",m,[n("span",null,[s[0]||(s[0]=a("number ")),e(t,{text:"数字型",type:"tip"})])])]),s[12]||(s[12]=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"介绍"),n("p",null,"Javascript是弱数据类型，赋值后才能判断")],-1)),s[13]||(s[13]=n("ul",null,[n("li",null,"整数"),n("li",null,"小数"),n("li",null,"负数")],-1)),n("h4",v,[n("a",b,[n("span",null,[s[1]||(s[1]=a("string ")),e(t,{text:"字符串型",type:"tip"})])])]),s[14]||(s[14]=l(`<h5 id="字符串含义" tabindex="-1"><a class="header-anchor" href="#字符串含义"><span>字符串含义</span></a></h5><p>字符串使用英文状态下的<code>&quot;</code> <code>&quot;</code>或<code>&#39;</code> <code>&#39;</code> 单引号和双引号可以相互嵌套，但注意不能自己嵌套自己</p><h5 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;忍者&#39;</span><span class="token operator">+</span><span class="token string">&#39;神龟&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>comic <span class="token operator">+</span> author<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>
<span class="line"></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>comic<span class="token punctuation">}</span>的作者是$<span class="token punctuation">{</span>author<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n("h4",g,[n("a",f,[n("span",null,[s[2]||(s[2]=a("Boolean ")),e(t,{text:"布尔型",type:"warning"})])])]),s[15]||(s[15]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> isDarkMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n("h4",x,[n("a",y,[n("span",null,[s[3]||(s[3]=a("undefined ")),e(t,{text:"未定义型",type:"danger"})])])]),s[16]||(s[16]=n("p",null,"只声明变量，未赋值",-1)),n("h4",j,[n("a",w,[n("span",null,[s[4]||(s[4]=a("null ")),e(t,{text:"空",type:"warning"})])])]),s[17]||(s[17]=n("p",null,"声明并赋值，但为空",-1)),s[18]||(s[18]=n("h3",{id:"引用数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引用数据类型"},[n("span",null,"引用数据类型")])],-1)),n("h4",_,[n("a",C,[n("span",null,[s[5]||(s[5]=a("object ")),e(t,{text:"对象",type:"tip"})])])]),n("h4",N,[n("a",B,[n("span",null,[s[6]||(s[6]=a("function ")),e(t,{text:"函数",type:"danger"})])])]),n("h4",T,[n("a",G,[n("span",null,[s[7]||(s[7]=a("array ")),e(t,{text:"数组",color:"warning"})])])]),s[19]||(s[19]=l(`<h2 id="检测数据类型" tabindex="-1"><a class="header-anchor" href="#检测数据类型"><span>检测数据类型</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h2><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出number12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+</code>两边只要有一个字符串，都会把另外一个转成字符串 除了<code>+</code>以外的算术运算符，比如<code>-</code> <code>*</code> <code>/</code>等都会把数据转成数字类型</p><h3 id="显式转换" tabindex="-1"><a class="header-anchor" href="#显式转换"><span>显式转换</span></a></h3>`,7)),e(c,null,{default:o(()=>[e(p,{title:"数字型"},{default:o(()=>s[8]||(s[8]=[n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'10'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"}),a(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//保留整数")]),a(`
`),n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'12.88'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"}),a(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 保留小数")]),a(`
`),n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"parseFloat"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'12.88'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e(p,{title:"字符型"},{default:o(()=>s[9]||(s[9]=[n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"})])])],-1)])),_:1})]),_:1})])}const S=r(h,[["render",V]]),q=JSON.parse(`{"path":"/js/dataType.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型"},"headers":[{"level":2,"title":"数据类型分类","slug":"数据类型分类","link":"#数据类型分类","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用数据类型","slug":"引用数据类型","link":"#引用数据类型","children":[]}]},{"level":2,"title":"检测数据类型","slug":"检测数据类型","link":"#检测数据类型","children":[]},{"level":2,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"显式转换","slug":"显式转换","link":"#显式转换","children":[]}]}],"git":{"updatedTime":1745573447000,"contributors":[{"name":"passwordgloo","username":"passwordgloo","email":"passwordgloo@163.com","commits":1,"url":"https://github.com/passwordgloo"}],"changelog":[{"hash":"139915bc8f6a136ef4637defc6e60b54aa9ce9ed","time":1745573447000,"email":"passwordgloo@163.com","author":"passwordgloo","message":"docs: 📝 添加js文档"}]},"filePathRelative":"js/dataType.md","excerpt":"<h2>数据类型分类</h2>\\n<h3>基本数据类型</h3>\\n<h4>number </h4>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">介绍</p>\\n<p>Javascript是弱数据类型，赋值后才能判断</p>\\n</div>\\n<ul>\\n<li>整数</li>\\n<li>小数</li>\\n<li>负数</li>\\n</ul>\\n<h4>string </h4>\\n<h5>字符串含义</h5>\\n<p>字符串使用英文状态下的<code>\\"</code> <code>\\"</code>或<code>'</code> <code>'</code>\\n单引号和双引号可以相互嵌套，但注意不能自己嵌套自己</p>"}`);export{S as comp,q as data};
