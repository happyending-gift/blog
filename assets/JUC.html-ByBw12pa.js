import{_ as n,c as s,a as e,o as p}from"./app-DNzKyGco.js";const t={};function c(l,a){return p(),s("div",null,a[0]||(a[0]=[e(`<h2 id="线程池种类" tabindex="-1"><a class="header-anchor" href="#线程池种类"><span>线程池种类</span></a></h2><h3 id="创建固定线程数的线程池" tabindex="-1"><a class="header-anchor" href="#创建固定线程数的线程池"><span>创建固定线程数的线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数与最大线程数一样：没有救急线程。</p><p>阻塞队列是 LinkedBlockingQueue：最大容量为 Integer.MAX_VALUE。</p><h3 id="单线程化的线程池" tabindex="-1"><a class="header-anchor" href="#单线程化的线程池"><span>单线程化的线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数和最大线程数都是 1。</p><p>阻塞队列是 LinkedBlockingQueue，最大容量为 Integer.MAX_VALUE。</p><h3 id="可缓存线程池" tabindex="-1"><a class="header-anchor" href="#可缓存线程池"><span>可缓存线程池</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数为 0：线程池不会保留核心线程。</p><p>最大线程数是 Integer.MAX_VALUE：理论上可以创建无限多的线程。</p><p>阻塞队列为 SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p><h3 id="定时线程池" tabindex="-1"><a class="header-anchor" href="#定时线程池"><span>定时线程池</span></a></h3><p>核心线程自己定，最大线程MAX</p><h2 id="threadlocalmap的引用类型" tabindex="-1"><a class="header-anchor" href="#threadlocalmap的引用类型"><span>ThreadLocalMap的引用类型</span></a></h2><div class="hint-container tip"><p class="hint-container-title">answer</p><p>ThreadLocalMap 的 key 是弱引用，而 value 是强引用。</p></div><h3 id="为什么-threadlocalmap-的键-key-是弱引用-weak-reference" tabindex="-1"><a class="header-anchor" href="#为什么-threadlocalmap-的键-key-是弱引用-weak-reference"><span>为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？</span></a></h3><p>弱引用意味着，如果没有其他引用对象的强引用关系，那么这个仅被弱引用的对象在下次垃圾回收（GC）时就会被回收掉，这样在一定程度上降低了内存泄漏的风险。但同时也引入了新的问题，即键虽然被回收了，但是值对象还在，我们无法获取，也无法删除，这样也会存在内存泄漏的风险。虽然 ThreadLocalMap 中在进行 set 和 get 操作时会进行启发式清理和探测式清理，清理一部分键为 null 的 Entry 对象，但是这只是一种后备选择，最重要的还是开发人员在编写代码时记得在使用完数据后及时调用 remove() 方法手动清理。</p><div class="hint-container tip"><p class="hint-container-title">内存泄漏</p><p>有些对象已经不再使用了，但是由于没有正确处理对象的引用关系，使得这个无用的对象还一直被 GC Root 直接或间接引用着，垃圾回收时就无法清理掉这些对象，如果这类对象存在很多，就会导致内存泄漏。</p></div><h3 id="为什么-threadlocalmap的值-value-是强引用" tabindex="-1"><a class="header-anchor" href="#为什么-threadlocalmap的值-value-是强引用"><span>为什么 ThreadLocalMap的值（Value）是强引用？</span></a></h3><p>如果值是弱引用，那么在没有其他强引用指向这个值的情况下，值可能会在任何时候被垃圾回收器回收。这将导致 ThreadLocal 无法正确地存储和检索数据，因为它们可能会在不被期望的情况下突然消失。</p><p>强引用保证数据完整性：使用强引用作为 ThreadLocalMap的值确保了只要ThreadLocal对象存在，其关联的数据值也会一直存在，直到显式地通过remove()方法或线程结束时清理。这样可以保证数据的完整性和一致性，避免因垃圾回收导致的潜在错误。</p>`,24)]))}const i=n(t,[["render",c]]),u=JSON.parse('{"path":"/js/JUC.html","title":"多线程","lang":"zh-CN","frontmatter":{"title":"多线程"},"headers":[{"level":2,"title":"线程池种类","slug":"线程池种类","link":"#线程池种类","children":[{"level":3,"title":"创建固定线程数的线程池","slug":"创建固定线程数的线程池","link":"#创建固定线程数的线程池","children":[]},{"level":3,"title":"单线程化的线程池","slug":"单线程化的线程池","link":"#单线程化的线程池","children":[]},{"level":3,"title":"可缓存线程池","slug":"可缓存线程池","link":"#可缓存线程池","children":[]},{"level":3,"title":"定时线程池","slug":"定时线程池","link":"#定时线程池","children":[]}]},{"level":2,"title":"ThreadLocalMap的引用类型","slug":"threadlocalmap的引用类型","link":"#threadlocalmap的引用类型","children":[{"level":3,"title":"为什么 ThreadLocalMap 的键（Key）是弱引用（Weak Reference）？","slug":"为什么-threadlocalmap-的键-key-是弱引用-weak-reference","link":"#为什么-threadlocalmap-的键-key-是弱引用-weak-reference","children":[]},{"level":3,"title":"为什么 ThreadLocalMap的值（Value）是强引用？","slug":"为什么-threadlocalmap的值-value-是强引用","link":"#为什么-threadlocalmap的值-value-是强引用","children":[]}]}],"git":{"updatedTime":1747501961000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":7}],"changelog":[{"hash":"56a7d60ee67793ce8fa22689555da59376bed4be","time":1747501961000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"685f88ad8368789151dbb5629c9199a787dc7b29","time":1747501815000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"1857e48f34a2547bcffe75517720809d35f27453","time":1747501677000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"93fe7bfffd7a7c6a38bd1e40a293aa941a6ef286","time":1747500947000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"08ffb0fa20fb1df5dcbb232b541fb5b3e1373b68","time":1747499917000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"c4e83d57546d7e264244a88677266d13b488910a","time":1747499680000,"email":"1787536379@qq.com","author":"“root”","message":"1"},{"hash":"11f0fe4ec4ced75ec5a83d62d288f5172be2017a","time":1747498950000,"email":"1787536379@qq.com","author":"“root”","message":"第一个总结上传"}]},"filePathRelative":"js/JUC.md","excerpt":"<h2>线程池种类</h2>\\n<h3>创建固定线程数的线程池</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">ExecutorService</span> <span class=\\"token function\\">newFixedThreadPool</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> nThreads<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span><span class=\\"token punctuation\\">(</span>nThreads<span class=\\"token punctuation\\">,</span> nThreads<span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0L</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MILLISECONDS</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkedBlockingQueue</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{i as comp,u as data};
