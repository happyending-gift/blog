import{_ as t,c as i,a as d,o as s}from"./app-BxNjl_Ns.js";const l={};function a(r,e){return s(),i("div",null,e[0]||(e[0]=[d('<h2 id="redis有几种集群模式-高可用" tabindex="-1"><a class="header-anchor" href="#redis有几种集群模式-高可用"><span>Redis有几种集群模式/高可用</span></a></h2><p>1、主从模式：将一个redis中的数据复制到其他节点，来实现数据的冗余和备份，主节点实现写操作，从节点同步数据，</p><p>客服端在从节点读取数据实现读写分离， 但当主节点故障时，整个redis功能都不能使用，可用性偏弱</p><p>2、哨兵模式：主从模式基础上加入哨兵节点，当发生故障时，哨兵节点会在从节点中选出一个节点当主节点</p><ul><li><strong>1</strong>：主从切换期间客户端出现访问瞬断</li><li><strong>2</strong>：单个master节点写、存储能力有限</li></ul><p>3、cluster模式：采用数据分片的技术将全部数据分散存储在不同节点，这样解决了上述问题，</p><p>如何分片：使用hash槽对数据进行分片，每个主节点负责对应哈希槽，当存取某个key时，通过hash计算确定存取的位置。</p><h2 id="分布式cap原理" tabindex="-1"><a class="header-anchor" href="#分布式cap原理"><span>分布式CAP原理</span></a></h2><p>分区容错性：系统某节点发生故障时，仍能提供服务</p><p>一致性：所有节点同一时间看到的都是一样的，可以保证数据强一致性，加锁影响系统吞吐量（重找）</p><p>可用性；保证服务一直可用，正常的响应时间</p><h2 id="redis存储结构" tabindex="-1"><a class="header-anchor" href="#redis存储结构"><span>Redis存储结构</span></a></h2><p>|String | hash | list |set | zset |</p><h2 id="redis快的原因" tabindex="-1"><a class="header-anchor" href="#redis快的原因"><span>Redis快的原因</span></a></h2><p>基于内存，数据存储在内存中，读写速度快，同时会定期持久化，同步到磁盘中防止数据丢失</p><p>单线程减少上下文切换，同时由于单线程，使得处理复杂操作时，不需要惊醒加锁</p><p>Io多路复用：单个线程处理多个并发连接，提高吞吐量</p><p>精简的数据结构和算法：数据结构都是优化过的，同时还有跳跃表、布弄过率器等提高查询操作效率</p><h2 id="bio、nio-和-i-o-多路复用的区别" tabindex="-1"><a class="header-anchor" href="#bio、nio-和-i-o-多路复用的区别"><span>BIO、NIO 和 I/O 多路复用的区别</span></a></h2><p>在网络编程中，I/O 模型决定了程序如何处理输入和输出操作。BIO、NIO 和 I/O 多路复用是 Java 中常见的三种 I/O 模型，它们在处理并发请求时有不同的行为和性能特点。</p><h3 id="bio-blocking-i-o" tabindex="-1"><a class="header-anchor" href="#bio-blocking-i-o"><span>BIO（Blocking I/O）</span></a></h3><p>BIO 是一种同步阻塞 I/O 模型。</p><p>特点：</p><ul><li>应用程序发起 <code>read</code> 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。</li><li>每个连接都需要一个独立的线程来处理，这在连接数很多时会导致大量的线程消耗。</li><li>线程在等待 I/O 操作完成时不能做其他事情。</li></ul><h3 id="nio-non-blocking-i-o" tabindex="-1"><a class="header-anchor" href="#nio-non-blocking-i-o"><span>NIO（Non-blocking I/O）</span></a></h3><p>NIO 是一种同步非阻塞 I/O 模型。</p><p>特点：</p><ul><li>应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的。</li><li>通过轮询操作，避免了一直阻塞。线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。</li><li>read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。</li></ul><h3 id="i-o-多路复用" tabindex="-1"><a class="header-anchor" href="#i-o-多路复用"><span>I/O 多路复用</span></a></h3><p>I/O 多路复用是一种 I/O 复用技术，它允许一个线程监视多个文件描述符，以确定哪些文件描述符已经准备好进行 I/O 操作。</p><p>特点：</p><ul><li>通过使用 select、poll 或 epoll 系统调用，一个线程可以管理多个网络连接。</li><li>当某个连接的数据准备好时，操作系统会通知程序，程序再进行相应的 I/O 操作。</li><li>减少了线程之间的切换开销，提高了系统的并发处理能力。</li></ul><h2 id="redis持久机制" tabindex="-1"><a class="header-anchor" href="#redis持久机制"><span>redis持久机制</span></a></h2><p>RDB：一段时间将内存数据以快照形式保存在磁盘中,文件后缀一般为rdb,</p><p>优点：备份文件小，加载速度慢 缺点：不安全，数据丢失，数据不是实时保存的</p><p>AOF：将所有写操作追加到一个日志文件中，</p><p>优点：安全，数据不易丢失</p><p>缺点：备份文件大，加载速度快，适合小规模数据恢复</p><p>混合持久化：重写写入AOF文件前一刻内存做RDB快照处理，RDB快照内容和增量AOF修改命令存在一起，</p><p>写入新的AOF文件，重启时，先加载RDB内容，重放增量AOF日志，替代AOF全量文件重放。</p><h2 id="redis过期策略" tabindex="-1"><a class="header-anchor" href="#redis过期策略"><span>redis过期策略</span></a></h2><p>定时删除：创建定时器，时间一道删除</p><p>惰性删除：未使用时不会删除，等用到key的时候，再判断有没有过期</p><p>定期删除：每过一段时间抽取设置了过期的key检测是否过期</p><h2 id="redis淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis淘汰策略"><span>Redis淘汰策略</span></a></h2><table><thead><tr><th>淘汰策略</th><th>适用范围</th><th>淘汰算法</th><th>描述</th></tr></thead><tbody><tr><td><code>volatile-lru</code></td><td>设置过期时间的键</td><td>LRU（最近最少使用）</td><td>优先淘汰最近最少使用的键，只针对设置了过期时间的键。</td></tr><tr><td><code>allkeys-lru</code></td><td>所有键</td><td>LRU（最近最少使用）</td><td>优先淘汰最近最少使用的键，适用于所有键。</td></tr><tr><td><code>allkeys-lfu</code></td><td>所有键</td><td>LFU（最近最少使用频率）</td><td>优先淘汰使用频率最低的键，适用于所有键。</td></tr><tr><td><code>volatile-lfu</code></td><td>设置过期时间的键</td><td>LFU（最近最少使用频率）</td><td>优先淘汰使用频率最低的键，只针对设置了过期时间的键。</td></tr><tr><td><code>volatile-random</code></td><td>设置过期时间的键</td><td>随机淘汰</td><td>随机选择键进行淘汰，只针对设置了过期时间的键。</td></tr><tr><td><code>allkeys-random</code></td><td>所有键</td><td>随机淘汰</td><td>随机选择键进行淘汰，适用于所有键。</td></tr><tr><td><code>volatile-ttl</code></td><td>设置过期时间的键</td><td>TTL（剩余生存时间）</td><td>优先淘汰剩余生存时间最短的键，只针对设置了过期时间的键。</td></tr><tr><td><code>no-eviction</code></td><td>所有键</td><td>不淘汰</td><td>不淘汰任何键，当内存不足时，写操作会报错。</td></tr></tbody></table><h2 id="redis-数据结构存储方式" tabindex="-1"><a class="header-anchor" href="#redis-数据结构存储方式"><span>Redis 数据结构存储方式</span></a></h2><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h3><ul><li>当 Hash 的元素大小小于 64 字节时，Redis 会采用 <strong>压缩表</strong>（ziplist）来存储。</li><li>超过这个大小限制时，Redis 会使用 <strong>hash 表</strong> 来存储。</li></ul><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><ul><li>当 List 的元素个数小于 128 个，并且每个元素大小小于 64 字节时，Redis 会采用 <strong>压缩表</strong>（ziplist）来存储。</li><li>超过这个限制时，Redis 会使用 <strong>双向链表</strong> 来存储 List 数据。</li></ul><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h3><ul><li>当 Set 的元素个数小于 128 个，并且所有元素都是数值时，Redis 采用 <strong>有序数组</strong> 来存储。</li><li>否则，Redis 会使用 <strong>hash 表</strong> 来存储 Set 数据。</li></ul><h3 id="sorted-set-zset" tabindex="-1"><a class="header-anchor" href="#sorted-set-zset"><span>Sorted Set (ZSet)</span></a></h3><ul><li><p>ZSet 可以使用 <strong>压缩表</strong> 或 <strong>跳表</strong>（skip list）来存储数据，具体取决于元素的数量和大小。</p></li><li><p>HyperLogLog、Bitmap、Bitfield 是基于 String 数据类型实现的；Geo 是基于 ZSet 数据类型实现的；</p></li></ul><h2 id="重写aof" tabindex="-1"><a class="header-anchor" href="#重写aof"><span>重写aof</span></a></h2><p>Redis 生成新的 AOF 文件来代替旧 AOF 文件，这个新的 AOF 文件包含重建当前数据集所需的最少命令。</p><p>具体过程是遍历所有数据库的所有键，从数据库读取键现在的值，然后用一条命令去记录键值对，</p><p>代替之前记录这个键值对的多条命令。</p>',59)]))}const o=t(l,[["render",a]]),h=JSON.parse('{"path":"/js/redis1.html","title":"redis","lang":"zh-CN","frontmatter":{"title":"redis","author":"chengp"},"headers":[{"level":2,"title":"Redis有几种集群模式/高可用","slug":"redis有几种集群模式-高可用","link":"#redis有几种集群模式-高可用","children":[]},{"level":2,"title":"分布式CAP原理","slug":"分布式cap原理","link":"#分布式cap原理","children":[]},{"level":2,"title":"Redis存储结构","slug":"redis存储结构","link":"#redis存储结构","children":[]},{"level":2,"title":"Redis快的原因","slug":"redis快的原因","link":"#redis快的原因","children":[]},{"level":2,"title":"BIO、NIO 和 I/O 多路复用的区别","slug":"bio、nio-和-i-o-多路复用的区别","link":"#bio、nio-和-i-o-多路复用的区别","children":[{"level":3,"title":"BIO（Blocking I/O）","slug":"bio-blocking-i-o","link":"#bio-blocking-i-o","children":[]},{"level":3,"title":"NIO（Non-blocking I/O）","slug":"nio-non-blocking-i-o","link":"#nio-non-blocking-i-o","children":[]},{"level":3,"title":"I/O 多路复用","slug":"i-o-多路复用","link":"#i-o-多路复用","children":[]}]},{"level":2,"title":"redis持久机制","slug":"redis持久机制","link":"#redis持久机制","children":[]},{"level":2,"title":"redis过期策略","slug":"redis过期策略","link":"#redis过期策略","children":[]},{"level":2,"title":"Redis淘汰策略","slug":"redis淘汰策略","link":"#redis淘汰策略","children":[]},{"level":2,"title":"Redis 数据结构存储方式","slug":"redis-数据结构存储方式","link":"#redis-数据结构存储方式","children":[{"level":3,"title":"Hash","slug":"hash","link":"#hash","children":[]},{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"Set","slug":"set","link":"#set","children":[]},{"level":3,"title":"Sorted Set (ZSet)","slug":"sorted-set-zset","link":"#sorted-set-zset","children":[]}]},{"level":2,"title":"重写aof","slug":"重写aof","link":"#重写aof","children":[]}],"git":{"updatedTime":1748331469000,"contributors":[{"name":"“root”","username":"","email":"1787536379@qq.com","commits":4}],"changelog":[{"hash":"d95c5586ec48bde22b3c35e6610e081db4b35fda","time":1748331469000,"email":"1787536379@qq.com","author":"“root”","message":"add 学习文档"},{"hash":"5060321abaa67e9154b1456a9d36705be88f8f8e","time":1748329949000,"email":"1787536379@qq.com","author":"“root”","message":"add 学习文档"},{"hash":"7de995f7b2d57b6ed805b307410fa1c43160096b","time":1748240439000,"email":"1787536379@qq.com","author":"“root”","message":"content 2.0"},{"hash":"2f28edffd20e17e141c8d3f074c0c15dbcd3bc6c","time":1748231170000,"email":"1787536379@qq.com","author":"“root”","message":"content 2.0"}]},"filePathRelative":"js/redis1.md","excerpt":"<h2>Redis有几种集群模式/高可用</h2>\\n<p>1、主从模式：将一个redis中的数据复制到其他节点，来实现数据的冗余和备份，主节点实现写操作，从节点同步数据，</p>\\n<p>客服端在从节点读取数据实现读写分离， 但当主节点故障时，整个redis功能都不能使用，可用性偏弱</p>\\n<p>2、哨兵模式：主从模式基础上加入哨兵节点，当发生故障时，哨兵节点会在从节点中选出一个节点当主节点</p>\\n<ul>\\n<li><strong>1</strong>：主从切换期间客户端出现访问瞬断</li>\\n<li><strong>2</strong>：单个master节点写、存储能力有限</li>\\n</ul>"}');export{o as comp,h as data};
